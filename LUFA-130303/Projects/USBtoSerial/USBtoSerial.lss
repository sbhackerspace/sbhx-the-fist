
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000015d6  0000166a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012a  0080012e  0080012e  00001698  2**0
                  ALLOC
  3 .stab         00001050  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003c6  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000580  00000000  00000000  00002ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009343  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025f3  00000000  00000000  0000c373  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004279  00000000  00000000  0000e966  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f44  00000000  00000000  00012be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003bcf  00000000  00000000  00013b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a3f  00000000  00000000  000176f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006f0  00000000  00000000  0001d132  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	0f c4       	rjmp	.+2078   	; 0x848 <__vector_10>
      2a:	00 00       	nop
      2c:	d5 c4       	rjmp	.+2474   	; 0x9d8 <__vector_11>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	7f c1       	rjmp	.+766    	; 0x364 <__vector_25>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	71 c0       	rjmp	.+226    	; 0x174 <__bad_interrupt>
      92:	00 00       	nop
      94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
      a8:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
      b8:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f6:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     106:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     116:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000124 <DeviceDescriptor>:
     124:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     134:	dc 01                                               ..

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d0 e2       	ldi	r29, 0x20	; 32
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	e6 ed       	ldi	r30, 0xD6	; 214
     14a:	f5 e1       	ldi	r31, 0x15	; 21
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	ae 32       	cpi	r26, 0x2E	; 46
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>
     15c:	1b be       	out	0x3b, r1	; 59

0000015e <__do_clear_bss>:
     15e:	12 e0       	ldi	r17, 0x02	; 2
     160:	ae e2       	ldi	r26, 0x2E	; 46
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a8 35       	cpi	r26, 0x58	; 88
     16a:	b1 07       	cpc	r27, r17
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	57 d0       	rcall	.+174    	; 0x21e <main>
     170:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     176:	9b b1       	in	r25, 0x0b	; 11
     178:	9f 70       	andi	r25, 0x0F	; 15
     17a:	98 2b       	or	r25, r24
     17c:	9b b9       	out	0x0b, r25	; 11
			}
     17e:	08 95       	ret

00000180 <RingBuffer_Insert>:
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     180:	fc 01       	movw	r30, r24

			*Buffer->In = Data;
     182:	a0 81       	ld	r26, Z
     184:	b1 81       	ldd	r27, Z+1	; 0x01
     186:	6c 93       	st	X, r22

			if (++Buffer->In == Buffer->End)
     188:	80 81       	ld	r24, Z
     18a:	91 81       	ldd	r25, Z+1	; 0x01
     18c:	01 96       	adiw	r24, 0x01	; 1
     18e:	91 83       	std	Z+1, r25	; 0x01
     190:	80 83       	st	Z, r24
     192:	26 81       	ldd	r18, Z+6	; 0x06
     194:	37 81       	ldd	r19, Z+7	; 0x07
     196:	82 17       	cp	r24, r18
     198:	93 07       	cpc	r25, r19
     19a:	21 f4       	brne	.+8      	; 0x1a4 <RingBuffer_Insert+0x24>
			  Buffer->In = Buffer->Start;
     19c:	84 81       	ldd	r24, Z+4	; 0x04
     19e:	95 81       	ldd	r25, Z+5	; 0x05
     1a0:	91 83       	std	Z+1, r25	; 0x01
     1a2:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1a4:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1a6:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     1a8:	82 85       	ldd	r24, Z+10	; 0x0a
     1aa:	93 85       	ldd	r25, Z+11	; 0x0b
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	93 87       	std	Z+11, r25	; 0x0b
     1b0:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1b2:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1b4:	08 95       	ret

000001b6 <RingBuffer_Remove>:
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1b6:	fc 01       	movw	r30, r24

			uint8_t Data = *Buffer->Out;
     1b8:	a2 81       	ldd	r26, Z+2	; 0x02
     1ba:	b3 81       	ldd	r27, Z+3	; 0x03
     1bc:	8d 91       	ld	r24, X+

			if (++Buffer->Out == Buffer->End)
     1be:	b3 83       	std	Z+3, r27	; 0x03
     1c0:	a2 83       	std	Z+2, r26	; 0x02
     1c2:	26 81       	ldd	r18, Z+6	; 0x06
     1c4:	37 81       	ldd	r19, Z+7	; 0x07
     1c6:	a2 17       	cp	r26, r18
     1c8:	b3 07       	cpc	r27, r19
     1ca:	21 f4       	brne	.+8      	; 0x1d4 <RingBuffer_Remove+0x1e>
			  Buffer->Out = Buffer->Start;
     1cc:	24 81       	ldd	r18, Z+4	; 0x04
     1ce:	35 81       	ldd	r19, Z+5	; 0x05
     1d0:	33 83       	std	Z+3, r19	; 0x03
     1d2:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1d4:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1d6:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     1d8:	22 85       	ldd	r18, Z+10	; 0x0a
     1da:	33 85       	ldd	r19, Z+11	; 0x0b
     1dc:	21 50       	subi	r18, 0x01	; 1
     1de:	30 40       	sbci	r19, 0x00	; 0
     1e0:	33 87       	std	Z+11, r19	; 0x0b
     1e2:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1e4:	9f bf       	out	0x3f, r25	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     1e6:	08 95       	ret

000001e8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1e8:	84 b7       	in	r24, 0x34	; 52
     1ea:	87 7f       	andi	r24, 0xF7	; 247
     1ec:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1ee:	88 e1       	ldi	r24, 0x18	; 24
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	80 93 60 00 	sts	0x0060, r24
     1f8:	10 92 60 00 	sts	0x0060, r1
     1fc:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	80 e8       	ldi	r24, 0x80	; 128
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	80 93 61 00 	sts	0x0061, r24
     20a:	90 93 61 00 	sts	0x0061, r25
     20e:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     210:	8a b1       	in	r24, 0x0a	; 10
     212:	80 6f       	ori	r24, 0xF0	; 240
     214:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     216:	8b b1       	in	r24, 0x0b	; 11
     218:	8f 70       	andi	r24, 0x0F	; 15
     21a:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     21c:	fa c2       	rjmp	.+1524   	; 0x812 <USB_Init>

0000021e <main>:
     21e:	e4 df       	rcall	.-56     	; 0x1e8 <SetupHardware>
}
     220:	ee e2       	ldi	r30, 0x2E	; 46
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     222:	f1 e0       	ldi	r31, 0x01	; 1
     224:	2f b7       	in	r18, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     226:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     228:	8a e3       	ldi	r24, 0x3A	; 58

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	91 83       	std	Z+1, r25	; 0x01
     22e:	80 83       	st	Z, r24
     230:	93 83       	std	Z+3, r25	; 0x03
			Buffer->Out    = DataPtr;
     232:	82 83       	std	Z+2, r24	; 0x02
     234:	95 83       	std	Z+5, r25	; 0x05
			Buffer->Start  = &DataPtr[0];
     236:	84 83       	std	Z+4, r24	; 0x04
     238:	8a eb       	ldi	r24, 0xBA	; 186
			Buffer->End    = &DataPtr[Size];
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	97 83       	std	Z+7, r25	; 0x07
     23e:	86 83       	std	Z+6, r24	; 0x06
     240:	80 e8       	ldi	r24, 0x80	; 128
			Buffer->Size   = Size;
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	91 87       	std	Z+9, r25	; 0x09
     246:	80 87       	std	Z+8, r24	; 0x08
     248:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     24a:	12 86       	std	Z+10, r1	; 0x0a
     24c:	2f bf       	out	0x3f, r18	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     24e:	ea eb       	ldi	r30, 0xBA	; 186
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     250:	f1 e0       	ldi	r31, 0x01	; 1
     252:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     254:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     256:	26 ec       	ldi	r18, 0xC6	; 198

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     258:	31 e0       	ldi	r19, 0x01	; 1
     25a:	31 83       	std	Z+1, r19	; 0x01
     25c:	20 83       	st	Z, r18
     25e:	33 83       	std	Z+3, r19	; 0x03
			Buffer->Out    = DataPtr;
     260:	22 83       	std	Z+2, r18	; 0x02
     262:	35 83       	std	Z+5, r19	; 0x05
			Buffer->Start  = &DataPtr[0];
     264:	24 83       	std	Z+4, r18	; 0x04
     266:	26 e4       	ldi	r18, 0x46	; 70
			Buffer->End    = &DataPtr[Size];
     268:	32 e0       	ldi	r19, 0x02	; 2
     26a:	37 83       	std	Z+7, r19	; 0x07
     26c:	26 83       	std	Z+6, r18	; 0x06
     26e:	91 87       	std	Z+9, r25	; 0x09
			Buffer->Size   = Size;
     270:	80 87       	std	Z+8, r24	; 0x08
     272:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     274:	12 86       	std	Z+10, r1	; 0x0a
     276:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     278:	80 e1       	ldi	r24, 0x10	; 16
	SetupHardware();

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     27a:	7d df       	rcall	.-262    	; 0x176 <LEDs_SetAllLEDs>
     27c:	78 94       	sei
     27e:	0a e0       	ldi	r16, 0x0A	; 10
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     280:	16 e6       	ldi	r17, 0x66	; 102
	GlobalInterruptEnable();

	for (;;)
	{
        printf('asdf\n');
     282:	00 d0       	rcall	.+0      	; 0x284 <main+0x66>
     284:	ed b7       	in	r30, 0x3d	; 61
     286:	fe b7       	in	r31, 0x3e	; 62
     288:	12 83       	std	Z+2, r17	; 0x02
     28a:	01 83       	std	Z+1, r16	; 0x01
     28c:	f7 d6       	rcall	.+3566   	; 0x107c <printf>
     28e:	8f b7       	in	r24, 0x3f	; 63
     290:	f8 94       	cli
     292:	20 91 38 01 	lds	r18, 0x0138
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     296:	30 91 39 01 	lds	r19, 0x0139
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     29a:	8f bf       	out	0x3f, r24	; 63
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2a0:	80 91 36 01 	lds	r24, 0x0136
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     2a4:	90 91 37 01 	lds	r25, 0x0137
     2a8:	28 17       	cp	r18, r24
     2aa:	39 07       	cpc	r19, r25
     2ac:	49 f0       	breq	.+18     	; 0x2c0 <main+0xa2>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	8d d6       	rcall	.+3354   	; 0xfce <CDC_Device_ReceiveByte>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     2b4:	bc 01       	movw	r22, r24
     2b6:	97 fd       	sbrc	r25, 7
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <main+0xa2>
     2ba:	8e e2       	ldi	r24, 0x2E	; 46
     2bc:	91 e0       	ldi	r25, 0x01	; 1

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
     2be:	60 df       	rcall	.-320    	; 0x180 <RingBuffer_Insert>
     2c0:	2f b7       	in	r18, 0x3f	; 63
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     2c2:	f8 94       	cli
     2c4:	80 91 c4 01 	lds	r24, 0x01C4
     2c8:	90 91 c5 01 	lds	r25, 0x01C5
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2cc:	2f bf       	out	0x3f, r18	; 63
     2ce:	00 97       	sbiw	r24, 0x00	; 0
     2d0:	11 f1       	breq	.+68     	; 0x316 <main+0xf8>
     2d2:	20 91 01 01 	lds	r18, 0x0101
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2d6:	2f 70       	andi	r18, 0x0F	; 15
		}

		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if (BufferCount)
     2d8:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2dc:	20 91 e8 00 	lds	r18, 0x00E8
     2e0:	20 ff       	sbrs	r18, 0
     2e2:	19 c0       	rjmp	.+50     	; 0x316 <main+0xf8>
     2e4:	80 31       	cpi	r24, 0x10	; 16
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     2e6:	91 05       	cpc	r25, r1
     2e8:	10 f0       	brcs	.+4      	; 0x2ee <main+0xd0>
		{
			Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);

			/* Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
			 * until it completes as there is a chance nothing is listening and a lengthy timeout could occur */
			if (Endpoint_IsINReady())
     2ea:	8f e0       	ldi	r24, 0x0F	; 15
     2ec:	90 e0       	ldi	r25, 0x00	; 0
			{
				/* Never send more than one bank size less one byte to the host at a time, so that we don't block
				 * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));
     2ee:	f8 2e       	mov	r15, r24
     2f0:	c0 e0       	ldi	r28, 0x00	; 0
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
     2f4:	0e c0       	rjmp	.+28     	; 0x312 <main+0xf4>
     2f6:	e0 91 bc 01 	lds	r30, 0x01BC

				/* Read bytes from the USART receive buffer into the USB IN endpoint */
				while (BytesToSend--)
     2fa:	f0 91 bd 01 	lds	r31, 0x01BD
     2fe:	80 e0       	ldi	r24, 0x00	; 0
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	60 81       	ld	r22, Z
     304:	f8 d5       	rcall	.+3056   	; 0xef6 <CDC_Device_SendByte>
     306:	21 96       	adiw	r28, 0x01	; 1
				{
					/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
					if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     308:	88 23       	and	r24, r24
     30a:	29 f4       	brne	.+10     	; 0x316 <main+0xf8>
     30c:	8a eb       	ldi	r24, 0xBA	; 186
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	52 df       	rcall	.-348    	; 0x1b6 <RingBuffer_Remove>
     312:	fc 16       	cp	r15, r28
     314:	81 f7       	brne	.-32     	; 0x2f6 <main+0xd8>
     316:	2f b7       	in	r18, 0x3f	; 63
					{
						break;
					}

					/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
					RingBuffer_Remove(&USARTtoUSB_Buffer);
     318:	f8 94       	cli
     31a:	80 91 38 01 	lds	r24, 0x0138
     31e:	90 91 39 01 	lds	r25, 0x0139
				/* Never send more than one bank size less one byte to the host at a time, so that we don't block
				 * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));

				/* Read bytes from the USART receive buffer into the USB IN endpoint */
				while (BytesToSend--)
     322:	2f bf       	out	0x3f, r18	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     324:	00 97       	sbiw	r24, 0x00	; 0
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     326:	49 f0       	breq	.+18     	; 0x33a <main+0x11c>
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     328:	8e e2       	ldi	r24, 0x2E	; 46
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	44 df       	rcall	.-376    	; 0x1b6 <RingBuffer_Remove>
     32e:	90 91 c8 00 	lds	r25, 0x00C8
				}
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
     332:	95 ff       	sbrs	r25, 5
     334:	fc cf       	rjmp	.-8      	; 0x32e <main+0x110>
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     336:	80 93 ce 00 	sts	0x00CE, r24
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	91 e0       	ldi	r25, 0x01	; 1
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     33e:	30 d6       	rcall	.+3168   	; 0xfa0 <CDC_Device_USBTask>
     340:	ef d4       	rcall	.+2526   	; 0xd20 <USB_USBTask>
     342:	9f cf       	rjmp	.-194    	; 0x282 <main+0x64>

00000344 <EVENT_USB_Device_Connect>:
     344:	80 ea       	ldi	r24, 0xA0	; 160
				UDR1 = DataByte;
     346:	17 cf       	rjmp	.-466    	; 0x176 <LEDs_SetAllLEDs>

00000348 <EVENT_USB_Device_Disconnect>:
     348:	80 e1       	ldi	r24, 0x10	; 16

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     34a:	15 cf       	rjmp	.-470    	; 0x176 <LEDs_SetAllLEDs>

0000034c <EVENT_USB_Device_ConfigurationChanged>:
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	ae d5       	rcall	.+2908   	; 0xeae <CDC_Device_ConfigureEndpoints>
		USB_USBTask();
     352:	88 23       	and	r24, r24
     354:	11 f0       	breq	.+4      	; 0x35a <EVENT_USB_Device_ConfigurationChanged+0xe>
	}
     356:	80 e6       	ldi	r24, 0x60	; 96
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     358:	01 c0       	rjmp	.+2      	; 0x35c <EVENT_USB_Device_ConfigurationChanged+0x10>
     35a:	80 e9       	ldi	r24, 0x90	; 144
     35c:	0c cf       	rjmp	.-488    	; 0x176 <LEDs_SetAllLEDs>

0000035e <EVENT_USB_Device_ControlRequest>:
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	91 e0       	ldi	r25, 0x01	; 1
}
     362:	f9 c4       	rjmp	.+2546   	; 0xd56 <CDC_Device_ProcessControlRequest>

00000364 <__vector_25>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     364:	1f 92       	push	r1
}
     366:	0f 92       	push	r0

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	0f 92       	push	r0
     36c:	0b b6       	in	r0, 0x3b	; 59
     36e:	0f 92       	push	r0
     370:	11 24       	eor	r1, r1
     372:	2f 93       	push	r18
     374:	3f 93       	push	r19
     376:	4f 93       	push	r20
     378:	5f 93       	push	r21
     37a:	6f 93       	push	r22
     37c:	7f 93       	push	r23
     37e:	8f 93       	push	r24
     380:	9f 93       	push	r25
     382:	af 93       	push	r26
     384:	bf 93       	push	r27
     386:	ef 93       	push	r30
     388:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     38a:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     38e:	8e b3       	in	r24, 0x1e	; 30
     390:	84 30       	cpi	r24, 0x04	; 4
     392:	19 f4       	brne	.+6      	; 0x39a <__vector_25+0x36>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     394:	8a eb       	ldi	r24, 0xBA	; 186
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	f3 de       	rcall	.-538    	; 0x180 <RingBuffer_Insert>
     39a:	ff 91       	pop	r31
}
     39c:	ef 91       	pop	r30
     39e:	bf 91       	pop	r27
     3a0:	af 91       	pop	r26
     3a2:	9f 91       	pop	r25
     3a4:	8f 91       	pop	r24
     3a6:	7f 91       	pop	r23
     3a8:	6f 91       	pop	r22
     3aa:	5f 91       	pop	r21
     3ac:	4f 91       	pop	r20
     3ae:	3f 91       	pop	r19
     3b0:	2f 91       	pop	r18
     3b2:	0f 90       	pop	r0
     3b4:	0b be       	out	0x3b, r0	; 59
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <EVENT_CDC_Device_LineEncodingChanged>:
     3c0:	cf 93       	push	r28
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     3c2:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     3c4:	a1 8d       	ldd	r26, Z+25	; 0x19
     3c6:	a1 50       	subi	r26, 0x01	; 1
     3c8:	a2 30       	cpi	r26, 0x02	; 2
     3ca:	28 f4       	brcc	.+10     	; 0x3d6 <EVENT_CDC_Device_LineEncodingChanged+0x16>
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	a5 5e       	subi	r26, 0xE5	; 229
     3d0:	be 4f       	sbci	r27, 0xFE	; 254
     3d2:	cc 91       	ld	r28, X
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     3d6:	c0 e0       	ldi	r28, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     3d8:	80 8d       	ldd	r24, Z+24	; 0x18
     3da:	82 30       	cpi	r24, 0x02	; 2
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
     3de:	c8 60       	ori	r28, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     3e0:	82 8d       	ldd	r24, Z+26	; 0x1a
     3e2:	87 30       	cpi	r24, 0x07	; 7
     3e4:	31 f0       	breq	.+12     	; 0x3f2 <EVENT_CDC_Device_LineEncodingChanged+0x32>
     3e6:	88 30       	cpi	r24, 0x08	; 8
     3e8:	31 f0       	breq	.+12     	; 0x3f6 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     3ea:	86 30       	cpi	r24, 0x06	; 6
     3ec:	29 f4       	brne	.+10     	; 0x3f8 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     3ee:	c2 60       	ori	r28, 0x02	; 2
			break;
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     3f2:	c4 60       	ori	r28, 0x04	; 4
			break;
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     3f6:	c6 60       	ori	r28, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     3f8:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     3fc:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     400:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     404:	24 89       	ldd	r18, Z+20	; 0x14
     406:	35 89       	ldd	r19, Z+21	; 0x15
     408:	46 89       	ldd	r20, Z+22	; 0x16
     40a:	57 89       	ldd	r21, Z+23	; 0x17
     40c:	da 01       	movw	r26, r20
     40e:	c9 01       	movw	r24, r18
     410:	b6 95       	lsr	r27
     412:	a7 95       	ror	r26
     414:	97 95       	ror	r25
     416:	87 95       	ror	r24
     418:	80 5c       	subi	r24, 0xC0	; 192
     41a:	9d 4b       	sbci	r25, 0xBD	; 189
     41c:	a0 4f       	sbci	r26, 0xF0	; 240
     41e:	bf 4f       	sbci	r27, 0xFF	; 255
     420:	bc 01       	movw	r22, r24
     422:	cd 01       	movw	r24, r26
     424:	09 d6       	rcall	.+3090   	; 0x1038 <__udivmodsi4>
     426:	21 50       	subi	r18, 0x01	; 1
     428:	30 40       	sbci	r19, 0x00	; 0
     42a:	30 93 cd 00 	sts	0x00CD, r19
     42e:	20 93 cc 00 	sts	0x00CC, r18
     432:	c0 93 ca 00 	sts	0x00CA, r28

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     436:	82 e0       	ldi	r24, 0x02	; 2
	UCSR1A = (1 << U2X1);
     438:	80 93 c8 00 	sts	0x00C8, r24
     43c:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     43e:	80 93 c9 00 	sts	0x00C9, r24
     442:	cf 91       	pop	r28
}
     444:	08 95       	ret

00000446 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     446:	92 30       	cpi	r25, 0x02	; 2
     448:	29 f0       	breq	.+10     	; 0x454 <CALLBACK_USB_GetDescriptor+0xe>
     44a:	93 30       	cpi	r25, 0x03	; 3
     44c:	41 f0       	breq	.+16     	; 0x45e <CALLBACK_USB_GetDescriptor+0x18>
     44e:	91 30       	cpi	r25, 0x01	; 1
     450:	e9 f4       	brne	.+58     	; 0x48c <CALLBACK_USB_GetDescriptor+0x46>
     452:	17 c0       	rjmp	.+46     	; 0x482 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     454:	8e e3       	ldi	r24, 0x3E	; 62
     456:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     458:	e6 ee       	ldi	r30, 0xE6	; 230
     45a:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     45c:	1b c0       	rjmp	.+54     	; 0x494 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	41 f0       	breq	.+16     	; 0x472 <CALLBACK_USB_GetDescriptor+0x2c>
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	18 f0       	brcs	.+6      	; 0x46c <CALLBACK_USB_GetDescriptor+0x26>
     466:	82 30       	cpi	r24, 0x02	; 2
     468:	89 f4       	brne	.+34     	; 0x48c <CALLBACK_USB_GetDescriptor+0x46>
     46a:	06 c0       	rjmp	.+12     	; 0x478 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     46c:	e2 ee       	ldi	r30, 0xE2	; 226
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	05 c0       	rjmp	.+10     	; 0x47c <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     472:	e8 ec       	ldi	r30, 0xC8	; 200
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	02 c0       	rjmp	.+4      	; 0x47c <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     478:	e8 e9       	ldi	r30, 0x98	; 152
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	84 91       	lpm	r24, Z
     47e:	90 e0       	ldi	r25, 0x00	; 0
					break;
     480:	09 c0       	rjmp	.+18     	; 0x494 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     482:	82 e1       	ldi	r24, 0x12	; 18
     484:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     486:	e4 e2       	ldi	r30, 0x24	; 36
     488:	f1 e0       	ldi	r31, 0x01	; 1
     48a:	04 c0       	rjmp	.+8      	; 0x494 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     490:	e0 e0       	ldi	r30, 0x00	; 0
     492:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     494:	da 01       	movw	r26, r20
     496:	11 96       	adiw	r26, 0x01	; 1
     498:	fc 93       	st	X, r31
     49a:	ee 93       	st	-X, r30
	return Size;
}
     49c:	08 95       	ret

0000049e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     49e:	20 91 50 02 	lds	r18, 0x0250
     4a2:	30 91 51 02 	lds	r19, 0x0251
     4a6:	26 17       	cp	r18, r22
     4a8:	37 07       	cpc	r19, r23
     4aa:	20 f4       	brcc	.+8      	; 0x4b4 <Endpoint_Write_Control_Stream_LE+0x16>
     4ac:	b9 01       	movw	r22, r18
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	35 c0       	rjmp	.+106    	; 0x51e <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     4b4:	61 15       	cp	r22, r1
     4b6:	71 05       	cpc	r23, r1
     4b8:	d1 f7       	brne	.-12     	; 0x4ae <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4ba:	20 91 e8 00 	lds	r18, 0x00E8
     4be:	2e 77       	andi	r18, 0x7E	; 126
     4c0:	20 93 e8 00 	sts	0x00E8, r18
     4c4:	f4 cf       	rjmp	.-24     	; 0x4ae <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4c6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4c8:	88 23       	and	r24, r24
     4ca:	f1 f1       	breq	.+124    	; 0x548 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4cc:	85 30       	cpi	r24, 0x05	; 5
     4ce:	c1 f1       	breq	.+112    	; 0x540 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4d0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4d4:	83 fd       	sbrc	r24, 3
     4d6:	36 c0       	rjmp	.+108    	; 0x544 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4d8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4dc:	82 fd       	sbrc	r24, 2
     4de:	2a c0       	rjmp	.+84     	; 0x534 <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4e0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     4e4:	80 ff       	sbrs	r24, 0
     4e6:	1b c0       	rjmp	.+54     	; 0x51e <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     4e8:	80 91 f2 00 	lds	r24, 0x00F2
     4ec:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4f2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4f4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     4f8:	61 50       	subi	r22, 0x01	; 1
     4fa:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     4fc:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4fe:	61 15       	cp	r22, r1
     500:	71 05       	cpc	r23, r1
     502:	19 f0       	breq	.+6      	; 0x50a <Endpoint_Write_Control_Stream_LE+0x6c>
     504:	88 30       	cpi	r24, 0x08	; 8
     506:	91 05       	cpc	r25, r1
     508:	a0 f3       	brcs	.-24     	; 0x4f2 <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     50a:	21 e0       	ldi	r18, 0x01	; 1
     50c:	88 30       	cpi	r24, 0x08	; 8
     50e:	91 05       	cpc	r25, r1
     510:	09 f0       	breq	.+2      	; 0x514 <Endpoint_Write_Control_Stream_LE+0x76>
     512:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     514:	80 91 e8 00 	lds	r24, 0x00E8
     518:	8e 77       	andi	r24, 0x7E	; 126
     51a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     51e:	61 15       	cp	r22, r1
     520:	71 05       	cpc	r23, r1
     522:	89 f6       	brne	.-94     	; 0x4c6 <Endpoint_Write_Control_Stream_LE+0x28>
     524:	22 23       	and	r18, r18
     526:	79 f6       	brne	.-98     	; 0x4c6 <Endpoint_Write_Control_Stream_LE+0x28>
     528:	05 c0       	rjmp	.+10     	; 0x534 <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     52a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     52c:	88 23       	and	r24, r24
     52e:	61 f0       	breq	.+24     	; 0x548 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     530:	85 30       	cpi	r24, 0x05	; 5
     532:	61 f0       	breq	.+24     	; 0x54c <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     534:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     538:	82 ff       	sbrs	r24, 2
     53a:	f7 cf       	rjmp	.-18     	; 0x52a <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     54c:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     54e:	08 95       	ret

00000550 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     550:	20 91 50 02 	lds	r18, 0x0250
     554:	30 91 51 02 	lds	r19, 0x0251
     558:	26 17       	cp	r18, r22
     55a:	37 07       	cpc	r19, r23
     55c:	20 f4       	brcc	.+8      	; 0x566 <Endpoint_Write_Control_PStream_LE+0x16>
     55e:	b9 01       	movw	r22, r18
     560:	fc 01       	movw	r30, r24
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	37 c0       	rjmp	.+110    	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     566:	61 15       	cp	r22, r1
     568:	71 05       	cpc	r23, r1
     56a:	d1 f7       	brne	.-12     	; 0x560 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     56c:	20 91 e8 00 	lds	r18, 0x00E8
     570:	2e 77       	andi	r18, 0x7E	; 126
     572:	20 93 e8 00 	sts	0x00E8, r18
     576:	f4 cf       	rjmp	.-24     	; 0x560 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     578:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     57a:	88 23       	and	r24, r24
     57c:	09 f4       	brne	.+2      	; 0x580 <Endpoint_Write_Control_PStream_LE+0x30>
     57e:	3f c0       	rjmp	.+126    	; 0x5fe <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     580:	85 30       	cpi	r24, 0x05	; 5
     582:	c9 f1       	breq	.+114    	; 0x5f6 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     584:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     588:	83 fd       	sbrc	r24, 3
     58a:	37 c0       	rjmp	.+110    	; 0x5fa <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     58c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     590:	82 fd       	sbrc	r24, 2
     592:	2b c0       	rjmp	.+86     	; 0x5ea <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     594:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     598:	80 ff       	sbrs	r24, 0
     59a:	1c c0       	rjmp	.+56     	; 0x5d4 <Endpoint_Write_Control_PStream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     59c:	80 91 f2 00 	lds	r24, 0x00F2
     5a0:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5a6:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5a8:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     5ac:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     5ae:	61 50       	subi	r22, 0x01	; 1
     5b0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     5b2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5b4:	61 15       	cp	r22, r1
     5b6:	71 05       	cpc	r23, r1
     5b8:	19 f0       	breq	.+6      	; 0x5c0 <Endpoint_Write_Control_PStream_LE+0x70>
     5ba:	88 30       	cpi	r24, 0x08	; 8
     5bc:	91 05       	cpc	r25, r1
     5be:	98 f3       	brcs	.-26     	; 0x5a6 <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	88 30       	cpi	r24, 0x08	; 8
     5c4:	91 05       	cpc	r25, r1
     5c6:	09 f0       	breq	.+2      	; 0x5ca <Endpoint_Write_Control_PStream_LE+0x7a>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5ca:	80 91 e8 00 	lds	r24, 0x00E8
     5ce:	8e 77       	andi	r24, 0x7E	; 126
     5d0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     5d4:	61 15       	cp	r22, r1
     5d6:	71 05       	cpc	r23, r1
     5d8:	79 f6       	brne	.-98     	; 0x578 <Endpoint_Write_Control_PStream_LE+0x28>
     5da:	22 23       	and	r18, r18
     5dc:	69 f6       	brne	.-102    	; 0x578 <Endpoint_Write_Control_PStream_LE+0x28>
     5de:	05 c0       	rjmp	.+10     	; 0x5ea <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5e0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5e2:	88 23       	and	r24, r24
     5e4:	61 f0       	breq	.+24     	; 0x5fe <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5e6:	85 30       	cpi	r24, 0x05	; 5
     5e8:	61 f0       	breq	.+24     	; 0x602 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5ea:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     5ee:	82 ff       	sbrs	r24, 2
     5f0:	f7 cf       	rjmp	.-18     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     5f6:	83 e0       	ldi	r24, 0x03	; 3
     5f8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     602:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     604:	08 95       	ret

00000606 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     606:	98 2f       	mov	r25, r24
     608:	2a c0       	rjmp	.+84     	; 0x65e <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     60a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     60e:	98 17       	cp	r25, r24
     610:	39 f0       	breq	.+14     	; 0x620 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     612:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     616:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     61a:	50 91 f0 00 	lds	r21, 0x00F0
     61e:	03 c0       	rjmp	.+6      	; 0x626 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     620:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     622:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     624:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     626:	21 ff       	sbrs	r18, 1
     628:	19 c0       	rjmp	.+50     	; 0x65c <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     62a:	30 91 eb 00 	lds	r19, 0x00EB
     62e:	3e 7f       	andi	r19, 0xFE	; 254
     630:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     634:	30 91 ed 00 	lds	r19, 0x00ED
     638:	3d 7f       	andi	r19, 0xFD	; 253
     63a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     63e:	30 91 eb 00 	lds	r19, 0x00EB
     642:	31 60       	ori	r19, 0x01	; 1
     644:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     648:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     64c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     650:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     654:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     658:	27 ff       	sbrs	r18, 7
     65a:	08 c0       	rjmp	.+16     	; 0x66c <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     65c:	9f 5f       	subi	r25, 0xFF	; 255
     65e:	97 30       	cpi	r25, 0x07	; 7
     660:	a0 f2       	brcs	.-88     	; 0x60a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     662:	8f 70       	andi	r24, 0x0F	; 15
     664:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     66c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     66e:	08 95       	ret

00000670 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     67a:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     67c:	00 e0       	ldi	r16, 0x00	; 0
     67e:	2a c0       	rjmp	.+84     	; 0x6d4 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     680:	98 81       	ld	r25, Y
     682:	99 23       	and	r25, r25
     684:	29 f1       	breq	.+74     	; 0x6d0 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     686:	6b 81       	ldd	r22, Y+3	; 0x03
     688:	e9 81       	ldd	r30, Y+1	; 0x01
     68a:	fa 81       	ldd	r31, Y+2	; 0x02
     68c:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     68e:	89 2f       	mov	r24, r25
     690:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     692:	87 30       	cpi	r24, 0x07	; 7
     694:	18 f5       	brcc	.+70     	; 0x6dc <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     696:	62 95       	swap	r22
     698:	66 0f       	add	r22, r22
     69a:	66 0f       	add	r22, r22
     69c:	60 7c       	andi	r22, 0xC0	; 192
     69e:	99 1f       	adc	r25, r25
     6a0:	99 27       	eor	r25, r25
     6a2:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6a4:	69 2b       	or	r22, r25
     6a6:	22 30       	cpi	r18, 0x02	; 2
     6a8:	10 f0       	brcs	.+4      	; 0x6ae <Endpoint_ConfigureEndpointTable+0x3e>
     6aa:	96 e0       	ldi	r25, 0x06	; 6
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <Endpoint_ConfigureEndpointTable+0x40>
     6ae:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     6b0:	28 e0       	ldi	r18, 0x08	; 8
     6b2:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     6b8:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     6ba:	22 0f       	add	r18, r18
     6bc:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     6be:	2e 17       	cp	r18, r30
     6c0:	3f 07       	cpc	r19, r31
     6c2:	d0 f3       	brcs	.-12     	; 0x6b8 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     6c4:	42 95       	swap	r20
     6c6:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     6c8:	49 2b       	or	r20, r25
     6ca:	9d df       	rcall	.-198    	; 0x606 <Endpoint_ConfigureEndpoint_Prv>
     6cc:	88 23       	and	r24, r24
     6ce:	31 f0       	breq	.+12     	; 0x6dc <Endpoint_ConfigureEndpointTable+0x6c>
     6d0:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     6d2:	25 96       	adiw	r28, 0x05	; 5
     6d4:	01 17       	cp	r16, r17
     6d6:	a1 f6       	brne	.-88     	; 0x680 <Endpoint_ConfigureEndpointTable+0x10>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     6da:	01 c0       	rjmp	.+2      	; 0x6de <Endpoint_ConfigureEndpointTable+0x6e>
     6dc:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     6de:	df 91       	pop	r29
	}
	
	return true;
}
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	08 95       	ret

000006e8 <Endpoint_ClearStatusStage>:
     6e8:	80 91 4a 02 	lds	r24, 0x024A
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6ec:	87 ff       	sbrs	r24, 7
     6ee:	11 c0       	rjmp	.+34     	; 0x712 <Endpoint_ClearStatusStage+0x2a>
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6f2:	8e b3       	in	r24, 0x1e	; 30
     6f4:	88 23       	and	r24, r24
     6f6:	b1 f0       	breq	.+44     	; 0x724 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6f8:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     6fc:	82 ff       	sbrs	r24, 2
     6fe:	f9 cf       	rjmp	.-14     	; 0x6f2 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     700:	80 91 e8 00 	lds	r24, 0x00E8
     704:	8b 77       	andi	r24, 0x7B	; 123
     706:	80 93 e8 00 	sts	0x00E8, r24
     70a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     70c:	8e b3       	in	r24, 0x1e	; 30
     70e:	88 23       	and	r24, r24
     710:	49 f0       	breq	.+18     	; 0x724 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     712:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     716:	80 ff       	sbrs	r24, 0
     718:	f9 cf       	rjmp	.-14     	; 0x70c <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     71a:	80 91 e8 00 	lds	r24, 0x00E8
     71e:	8e 77       	andi	r24, 0x7E	; 126
     720:	80 93 e8 00 	sts	0x00E8, r24
     724:	08 95       	ret

00000726 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     726:	80 91 e4 00 	lds	r24, 0x00E4
     72a:	90 91 e5 00 	lds	r25, 0x00E5
     72e:	45 e6       	ldi	r20, 0x65	; 101
     730:	01 c0       	rjmp	.+2      	; 0x734 <Endpoint_WaitUntilReady+0xe>
     732:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     734:	20 91 ec 00 	lds	r18, 0x00EC
     738:	20 ff       	sbrs	r18, 0
     73a:	22 c0       	rjmp	.+68     	; 0x780 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     73c:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     740:	20 fd       	sbrc	r18, 0
     742:	14 c0       	rjmp	.+40     	; 0x76c <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     744:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     746:	22 23       	and	r18, r18
     748:	99 f0       	breq	.+38     	; 0x770 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     74a:	25 30       	cpi	r18, 0x05	; 5
     74c:	99 f0       	breq	.+38     	; 0x774 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     74e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     752:	25 fd       	sbrc	r18, 5
     754:	11 c0       	rjmp	.+34     	; 0x778 <Endpoint_WaitUntilReady+0x52>
     756:	20 91 e4 00 	lds	r18, 0x00E4
     75a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     75e:	28 17       	cp	r18, r24
     760:	39 07       	cpc	r19, r25
     762:	41 f3       	breq	.-48     	; 0x734 <Endpoint_WaitUntilReady+0xe>
     764:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     766:	29 f7       	brne	.-54     	; 0x732 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     768:	84 e0       	ldi	r24, 0x04	; 4
     76a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     774:	83 e0       	ldi	r24, 0x03	; 3
     776:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     77c:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     77e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     780:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     784:	22 ff       	sbrs	r18, 2
     786:	de cf       	rjmp	.-68     	; 0x744 <Endpoint_WaitUntilReady+0x1e>
     788:	f9 cf       	rjmp	.-14     	; 0x77c <Endpoint_WaitUntilReady+0x56>

0000078a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     792:	4d d0       	rcall	.+154    	; 0x82e <USB_INT_DisableAllInterrupts>
     794:	54 d0       	rcall	.+168    	; 0x83e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     796:	c8 ed       	ldi	r28, 0xD8	; 216
     798:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     79a:	88 81       	ld	r24, Y
     79c:	8f 77       	andi	r24, 0x7F	; 127
     79e:	88 83       	st	Y, r24
     7a0:	88 81       	ld	r24, Y
     7a2:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     7a4:	88 83       	st	Y, r24
     7a6:	88 81       	ld	r24, Y
     7a8:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7aa:	88 83       	st	Y, r24
     7ac:	e7 ed       	ldi	r30, 0xD7	; 215
     7ae:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     7b0:	80 81       	ld	r24, Z
     7b2:	80 68       	ori	r24, 0x80	; 128
     7b4:	80 83       	st	Z, r24
     7b6:	19 bc       	out	0x29, r1	; 41
     7b8:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7ba:	10 92 46 02 	sts	0x0246, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     7be:	10 92 48 02 	sts	0x0248, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     7c2:	10 92 47 02 	sts	0x0247, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     7c6:	00 ee       	ldi	r16, 0xE0	; 224
     7c8:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     7ca:	f8 01       	movw	r30, r16
     7cc:	80 81       	ld	r24, Z
     7ce:	8b 7f       	andi	r24, 0xFB	; 251
     7d0:	80 83       	st	Z, r24
     7d2:	88 81       	ld	r24, Y
     7d4:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7d6:	88 83       	st	Y, r24
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7dc:	42 e0       	ldi	r20, 0x02	; 2
     7de:	13 df       	rcall	.-474    	; 0x606 <Endpoint_ConfigureEndpoint_Prv>
     7e0:	e1 ee       	ldi	r30, 0xE1	; 225
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7e6:	8e 7f       	andi	r24, 0xFE	; 254
     7e8:	80 83       	st	Z, r24
     7ea:	e2 ee       	ldi	r30, 0xE2	; 226
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7f0:	81 60       	ori	r24, 0x01	; 1
     7f2:	80 83       	st	Z, r24
     7f4:	80 81       	ld	r24, Z
     7f6:	88 60       	ori	r24, 0x08	; 8
     7f8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7fa:	f8 01       	movw	r30, r16
     7fc:	80 81       	ld	r24, Z
     7fe:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     800:	80 83       	st	Z, r24
     802:	88 81       	ld	r24, Y
     804:	80 61       	ori	r24, 0x10	; 16
     806:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     80e:	0f 91       	pop	r16
     810:	08 95       	ret

00000812 <USB_Init>:
     812:	e8 ed       	ldi	r30, 0xD8	; 216
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     818:	8f 7e       	andi	r24, 0xEF	; 239
     81a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     81c:	e7 ed       	ldi	r30, 0xD7	; 215
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	81 60       	ori	r24, 0x01	; 1
     824:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	80 93 49 02 	sts	0x0249, r24

	USB_ResetInterface();
     82c:	ae cf       	rjmp	.-164    	; 0x78a <USB_ResetInterface>

0000082e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     82e:	e8 ed       	ldi	r30, 0xD8	; 216
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	8c 7f       	andi	r24, 0xFC	; 252
     836:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     838:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     83c:	08 95       	ret

0000083e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     83e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     842:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     846:	08 95       	ret

00000848 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	0b b6       	in	r0, 0x3b	; 59
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     86e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     872:	82 ff       	sbrs	r24, 2
     874:	0a c0       	rjmp	.+20     	; 0x88a <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     876:	80 91 e2 00 	lds	r24, 0x00E2
     87a:	82 ff       	sbrs	r24, 2
     87c:	06 c0       	rjmp	.+12     	; 0x88a <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     87e:	80 91 e1 00 	lds	r24, 0x00E1
     882:	8b 7f       	andi	r24, 0xFB	; 251
     884:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     888:	4a d2       	rcall	.+1172   	; 0xd1e <USB_Event_Stub>
     88a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     88e:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     890:	1b c0       	rjmp	.+54     	; 0x8c8 <__vector_10+0x80>
     892:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     896:	80 ff       	sbrs	r24, 0
     898:	17 c0       	rjmp	.+46     	; 0x8c8 <__vector_10+0x80>
     89a:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     89e:	8e 7f       	andi	r24, 0xFE	; 254
     8a0:	80 93 da 00 	sts	0x00DA, r24
     8a4:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8a8:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8aa:	0b c0       	rjmp	.+22     	; 0x8c2 <__vector_10+0x7a>
     8ac:	8c e0       	ldi	r24, 0x0C	; 12

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8ae:	89 bd       	out	0x29, r24	; 41
     8b0:	8e e0       	ldi	r24, 0x0E	; 14
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8b2:	89 bd       	out	0x29, r24	; 41
     8b4:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8b6:	00 fe       	sbrs	r0, 0
     8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <__vector_10+0x6c>
     8ba:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8bc:	8e bb       	out	0x1e, r24	; 30
     8be:	42 dd       	rcall	.-1404   	; 0x344 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <__vector_10+0x80>
     8c2:	19 bc       	out	0x29, r1	; 41
     8c4:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8c6:	40 dd       	rcall	.-1408   	; 0x348 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8c8:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     8cc:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8ce:	17 c0       	rjmp	.+46     	; 0x8fe <__vector_10+0xb6>
     8d0:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     8d4:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     8d6:	13 c0       	rjmp	.+38     	; 0x8fe <__vector_10+0xb6>
     8d8:	80 91 e2 00 	lds	r24, 0x00E2
     8dc:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8de:	80 93 e2 00 	sts	0x00E2, r24
     8e2:	80 91 e2 00 	lds	r24, 0x00E2
     8e6:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8e8:	80 93 e2 00 	sts	0x00E2, r24
     8ec:	80 91 d8 00 	lds	r24, 0x00D8
     8f0:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8f2:	80 93 d8 00 	sts	0x00D8, r24
     8f6:	19 bc       	out	0x29, r1	; 41
     8f8:	85 e0       	ldi	r24, 0x05	; 5
     8fa:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8fc:	10 d2       	rcall	.+1056   	; 0xd1e <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     8fe:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     902:	84 ff       	sbrs	r24, 4
     904:	2c c0       	rjmp	.+88     	; 0x95e <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     906:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     90a:	84 ff       	sbrs	r24, 4
     90c:	28 c0       	rjmp	.+80     	; 0x95e <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     90e:	8c e0       	ldi	r24, 0x0C	; 12
     910:	89 bd       	out	0x29, r24	; 41
     912:	8e e0       	ldi	r24, 0x0E	; 14
     914:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     916:	09 b4       	in	r0, 0x29	; 41
     918:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     91a:	fd cf       	rjmp	.-6      	; 0x916 <__vector_10+0xce>
     91c:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     920:	8f 7d       	andi	r24, 0xDF	; 223
     922:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     926:	80 91 e1 00 	lds	r24, 0x00E1
     92a:	8f 7e       	andi	r24, 0xEF	; 239
     92c:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     930:	80 91 e2 00 	lds	r24, 0x00E2
     934:	8f 7e       	andi	r24, 0xEF	; 239
     936:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     93a:	80 91 e2 00 	lds	r24, 0x00E2
     93e:	81 60       	ori	r24, 0x01	; 1
     940:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     944:	80 91 46 02 	lds	r24, 0x0246
     948:	88 23       	and	r24, r24
     94a:	21 f4       	brne	.+8      	; 0x954 <__vector_10+0x10c>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     94c:	80 91 e3 00 	lds	r24, 0x00E3
     950:	87 ff       	sbrs	r24, 7
     952:	02 c0       	rjmp	.+4      	; 0x958 <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     954:	84 e0       	ldi	r24, 0x04	; 4
     956:	01 c0       	rjmp	.+2      	; 0x95a <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	8e bb       	out	0x1e, r24	; 30
     95c:	e0 d1       	rcall	.+960    	; 0xd1e <USB_Event_Stub>
     95e:	80 91 e1 00 	lds	r24, 0x00E1
     962:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     964:	26 c0       	rjmp	.+76     	; 0x9b2 <__vector_10+0x16a>
     966:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     96a:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     96c:	22 c0       	rjmp	.+68     	; 0x9b2 <__vector_10+0x16a>
     96e:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     972:	87 7f       	andi	r24, 0xF7	; 247
     974:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	8e bb       	out	0x1e, r24	; 30
     97c:	10 92 46 02 	sts	0x0246, r1
     980:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     984:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     986:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     98a:	80 91 e2 00 	lds	r24, 0x00E2
     98e:	8e 7f       	andi	r24, 0xFE	; 254
     990:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     994:	80 91 e2 00 	lds	r24, 0x00E2
     998:	80 61       	ori	r24, 0x10	; 16
     99a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	42 e0       	ldi	r20, 0x02	; 2
     9a4:	30 de       	rcall	.-928    	; 0x606 <Endpoint_ConfigureEndpoint_Prv>
     9a6:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     9aa:	88 60       	ori	r24, 0x08	; 8
     9ac:	80 93 f0 00 	sts	0x00F0, r24
     9b0:	b6 d1       	rcall	.+876    	; 0xd1e <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9b2:	ff 91       	pop	r31
     9b4:	ef 91       	pop	r30
     9b6:	bf 91       	pop	r27
     9b8:	af 91       	pop	r26
     9ba:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9bc:	8f 91       	pop	r24
     9be:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9c0:	6f 91       	pop	r22
     9c2:	5f 91       	pop	r21
     9c4:	4f 91       	pop	r20
     9c6:	3f 91       	pop	r19
     9c8:	2f 91       	pop	r18
     9ca:	0f 90       	pop	r0
     9cc:	0b be       	out	0x3b, r0	; 59
     9ce:	0f 90       	pop	r0
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	0f 90       	pop	r0
     9d4:	1f 90       	pop	r1
     9d6:	18 95       	reti

000009d8 <__vector_11>:
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	0b b6       	in	r0, 0x3b	; 59
     9e2:	0f 92       	push	r0
     9e4:	11 24       	eor	r1, r1

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     9e6:	2f 93       	push	r18
     9e8:	3f 93       	push	r19
     9ea:	4f 93       	push	r20
     9ec:	5f 93       	push	r21
     9ee:	6f 93       	push	r22
     9f0:	7f 93       	push	r23
     9f2:	8f 93       	push	r24
     9f4:	9f 93       	push	r25
     9f6:	af 93       	push	r26
     9f8:	bf 93       	push	r27
     9fa:	cf 93       	push	r28
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a00:	c0 91 e9 00 	lds	r28, 0x00E9
     a04:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a06:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a0a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a0e:	80 91 f0 00 	lds	r24, 0x00F0
     a12:	87 7f       	andi	r24, 0xF7	; 247
     a14:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a18:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a1a:	1d d0       	rcall	.+58     	; 0xa56 <USB_Device_ProcessControlRequest>
     a1c:	10 92 e9 00 	sts	0x00E9, r1
     a20:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a24:	88 60       	ori	r24, 0x08	; 8
     a26:	80 93 f0 00 	sts	0x00F0, r24
     a2a:	c0 93 e9 00 	sts	0x00E9, r28
     a2e:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a30:	ef 91       	pop	r30
     a32:	cf 91       	pop	r28
     a34:	bf 91       	pop	r27
     a36:	af 91       	pop	r26
     a38:	9f 91       	pop	r25
     a3a:	8f 91       	pop	r24
     a3c:	7f 91       	pop	r23
     a3e:	6f 91       	pop	r22
     a40:	5f 91       	pop	r21
     a42:	4f 91       	pop	r20
     a44:	3f 91       	pop	r19
     a46:	2f 91       	pop	r18
     a48:	0f 90       	pop	r0
     a4a:	0b be       	out	0x3b, r0	; 59
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	cd b7       	in	r28, 0x3d	; 61
     a5e:	de b7       	in	r29, 0x3e	; 62
     a60:	ac 97       	sbiw	r28, 0x2c	; 44
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a6c:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a6e:	ea e4       	ldi	r30, 0x4A	; 74
     a70:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a72:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a76:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	88 30       	cpi	r24, 0x08	; 8
     a7c:	d1 f7       	brne	.-12     	; 0xa72 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a7e:	6f dc       	rcall	.-1826   	; 0x35e <EVENT_USB_Device_ControlRequest>
     a80:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a84:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     a86:	33 c1       	rjmp	.+614    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     a88:	80 91 4a 02 	lds	r24, 0x024A
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a8c:	20 91 4b 02 	lds	r18, 0x024B

		switch (USB_ControlRequest.bRequest)
     a90:	25 30       	cpi	r18, 0x05	; 5
     a92:	09 f4       	brne	.+2      	; 0xa96 <USB_Device_ProcessControlRequest+0x40>
     a94:	84 c0       	rjmp	.+264    	; 0xb9e <USB_Device_ProcessControlRequest+0x148>
     a96:	26 30       	cpi	r18, 0x06	; 6
     a98:	40 f4       	brcc	.+16     	; 0xaaa <USB_Device_ProcessControlRequest+0x54>
     a9a:	21 30       	cpi	r18, 0x01	; 1
     a9c:	a1 f1       	breq	.+104    	; 0xb06 <USB_Device_ProcessControlRequest+0xb0>
     a9e:	21 30       	cpi	r18, 0x01	; 1
     aa0:	70 f0       	brcs	.+28     	; 0xabe <USB_Device_ProcessControlRequest+0x68>
     aa2:	23 30       	cpi	r18, 0x03	; 3
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <USB_Device_ProcessControlRequest+0x52>
     aa6:	23 c1       	rjmp	.+582    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     aa8:	2e c0       	rjmp	.+92     	; 0xb06 <USB_Device_ProcessControlRequest+0xb0>
     aaa:	28 30       	cpi	r18, 0x08	; 8
     aac:	09 f4       	brne	.+2      	; 0xab0 <USB_Device_ProcessControlRequest+0x5a>
     aae:	f2 c0       	rjmp	.+484    	; 0xc94 <USB_Device_ProcessControlRequest+0x23e>
     ab0:	29 30       	cpi	r18, 0x09	; 9
     ab2:	09 f4       	brne	.+2      	; 0xab6 <USB_Device_ProcessControlRequest+0x60>
     ab4:	01 c1       	rjmp	.+514    	; 0xcb8 <USB_Device_ProcessControlRequest+0x262>
     ab6:	26 30       	cpi	r18, 0x06	; 6
     ab8:	09 f0       	breq	.+2      	; 0xabc <USB_Device_ProcessControlRequest+0x66>
     aba:	19 c1       	rjmp	.+562    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     abc:	92 c0       	rjmp	.+292    	; 0xbe2 <USB_Device_ProcessControlRequest+0x18c>
     abe:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ac0:	21 f0       	breq	.+8      	; 0xaca <USB_Device_ProcessControlRequest+0x74>
     ac2:	82 38       	cpi	r24, 0x82	; 130
     ac4:	09 f0       	breq	.+2      	; 0xac8 <USB_Device_ProcessControlRequest+0x72>
     ac6:	13 c1       	rjmp	.+550    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     ac8:	08 c0       	rjmp	.+16     	; 0xada <USB_Device_ProcessControlRequest+0x84>
     aca:	80 91 47 02 	lds	r24, 0x0247
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ace:	90 91 48 02 	lds	r25, 0x0248
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     ad2:	99 23       	and	r25, r25
     ad4:	71 f0       	breq	.+28     	; 0xaf2 <USB_Device_ProcessControlRequest+0x9c>
     ad6:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <USB_Device_ProcessControlRequest+0x9c>
     ada:	80 91 4e 02 	lds	r24, 0x024E
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ade:	8f 70       	andi	r24, 0x0F	; 15
     ae0:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ae4:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ae8:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     aea:	95 ff       	sbrs	r25, 5
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     af2:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     af6:	97 7f       	andi	r25, 0xF7	; 247
     af8:	90 93 e8 00 	sts	0x00E8, r25
     afc:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     b00:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     b04:	d2 c0       	rjmp	.+420    	; 0xcaa <USB_Device_ProcessControlRequest+0x254>
     b06:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b08:	19 f0       	breq	.+6      	; 0xb10 <USB_Device_ProcessControlRequest+0xba>
     b0a:	82 30       	cpi	r24, 0x02	; 2
     b0c:	09 f0       	breq	.+2      	; 0xb10 <USB_Device_ProcessControlRequest+0xba>
     b0e:	ef c0       	rjmp	.+478    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     b10:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b12:	8f 71       	andi	r24, 0x1F	; 31
     b14:	90 70       	andi	r25, 0x00	; 0
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	29 f0       	breq	.+10     	; 0xb24 <USB_Device_ProcessControlRequest+0xce>
     b1a:	82 30       	cpi	r24, 0x02	; 2
     b1c:	91 05       	cpc	r25, r1
     b1e:	09 f0       	breq	.+2      	; 0xb22 <USB_Device_ProcessControlRequest+0xcc>
     b20:	e6 c0       	rjmp	.+460    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     b22:	0b c0       	rjmp	.+22     	; 0xb3a <USB_Device_ProcessControlRequest+0xe4>
     b24:	80 91 4c 02 	lds	r24, 0x024C
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	09 f0       	breq	.+2      	; 0xb2e <USB_Device_ProcessControlRequest+0xd8>
     b2c:	e0 c0       	rjmp	.+448    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     b2e:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b30:	09 f0       	breq	.+2      	; 0xb34 <USB_Device_ProcessControlRequest+0xde>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	80 93 48 02 	sts	0x0248, r24
     b38:	2c c0       	rjmp	.+88     	; 0xb92 <USB_Device_ProcessControlRequest+0x13c>
     b3a:	80 91 4c 02 	lds	r24, 0x024C

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b3e:	88 23       	and	r24, r24
     b40:	41 f5       	brne	.+80     	; 0xb92 <USB_Device_ProcessControlRequest+0x13c>
     b42:	20 91 4e 02 	lds	r18, 0x024E
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b46:	2f 70       	andi	r18, 0x0F	; 15
     b48:	09 f4       	brne	.+2      	; 0xb4c <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b4a:	d1 c0       	rjmp	.+418    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     b4c:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b50:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b54:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b56:	1d c0       	rjmp	.+58     	; 0xb92 <USB_Device_ProcessControlRequest+0x13c>
     b58:	80 91 4b 02 	lds	r24, 0x024B
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b5c:	83 30       	cpi	r24, 0x03	; 3
     b5e:	21 f4       	brne	.+8      	; 0xb68 <USB_Device_ProcessControlRequest+0x112>
     b60:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b64:	80 62       	ori	r24, 0x20	; 32
     b66:	13 c0       	rjmp	.+38     	; 0xb8e <USB_Device_ProcessControlRequest+0x138>
     b68:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b6c:	80 61       	ori	r24, 0x10	; 16
     b6e:	80 93 eb 00 	sts	0x00EB, r24
     b72:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <USB_Device_ProcessControlRequest+0x126>
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	2a 95       	dec	r18
     b7e:	e2 f7       	brpl	.-8      	; 0xb78 <USB_Device_ProcessControlRequest+0x122>
     b80:	80 93 ea 00 	sts	0x00EA, r24
     b84:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b88:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b8c:	88 60       	ori	r24, 0x08	; 8
     b8e:	80 93 eb 00 	sts	0x00EB, r24
     b92:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b96:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b9a:	87 7f       	andi	r24, 0xF7	; 247
     b9c:	89 c0       	rjmp	.+274    	; 0xcb0 <USB_Device_ProcessControlRequest+0x25a>
     b9e:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ba0:	09 f0       	breq	.+2      	; 0xba4 <USB_Device_ProcessControlRequest+0x14e>
     ba2:	a5 c0       	rjmp	.+330    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     ba4:	10 91 4c 02 	lds	r17, 0x024C
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ba8:	1f 77       	andi	r17, 0x7F	; 127
     baa:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     bae:	80 78       	andi	r24, 0x80	; 128
     bb0:	81 2b       	or	r24, r17
     bb2:	80 93 e3 00 	sts	0x00E3, r24
     bb6:	80 91 e8 00 	lds	r24, 0x00E8
     bba:	87 7f       	andi	r24, 0xF7	; 247
     bbc:	80 93 e8 00 	sts	0x00E8, r24
     bc0:	93 dd       	rcall	.-1242   	; 0x6e8 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     bc2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bc6:	80 ff       	sbrs	r24, 0
     bc8:	fc cf       	rjmp	.-8      	; 0xbc2 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     bca:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     bce:	80 68       	ori	r24, 0x80	; 128
     bd0:	80 93 e3 00 	sts	0x00E3, r24
     bd4:	11 23       	and	r17, r17
     bd6:	11 f0       	breq	.+4      	; 0xbdc <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	01 c0       	rjmp	.+2      	; 0xbde <USB_Device_ProcessControlRequest+0x188>
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	8e bb       	out	0x1e, r24	; 30
     be0:	86 c0       	rjmp	.+268    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     be2:	80 58       	subi	r24, 0x80	; 128
     be4:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     be6:	08 f0       	brcs	.+2      	; 0xbea <USB_Device_ProcessControlRequest+0x194>
     be8:	82 c0       	rjmp	.+260    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     bea:	80 91 4c 02 	lds	r24, 0x024C
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bee:	90 91 4d 02 	lds	r25, 0x024D
     bf2:	23 e0       	ldi	r18, 0x03	; 3
     bf4:	8c 3d       	cpi	r24, 0xDC	; 220
     bf6:	92 07       	cpc	r25, r18
     bf8:	a9 f5       	brne	.+106    	; 0xc64 <USB_Device_ProcessControlRequest+0x20e>
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     bfe:	8a e2       	ldi	r24, 0x2A	; 42
     c00:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     c02:	5f b7       	in	r21, 0x3f	; 63
     c04:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     c06:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     c08:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	4e e0       	ldi	r20, 0x0E	; 14
     c10:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     c12:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	60 93 57 00 	sts	0x0057, r22
     c1a:	e4 91       	lpm	r30, Z
     c1c:	80 ff       	sbrs	r24, 0
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <USB_Device_ProcessControlRequest+0x1d0>

					if (SerialCharNum & 0x01)
     c20:	e2 95       	swap	r30
     c22:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     c24:	4f 5f       	subi	r20, 0xFF	; 255
     c26:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     c28:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	ea 30       	cpi	r30, 0x0A	; 10
     c2e:	18 f0       	brcs	.+6      	; 0xc36 <USB_Device_ProcessControlRequest+0x1e0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     c30:	29 5c       	subi	r18, 0xC9	; 201
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <USB_Device_ProcessControlRequest+0x1e4>
     c36:	20 5d       	subi	r18, 0xD0	; 208
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
     c3a:	13 96       	adiw	r26, 0x03	; 3
     c3c:	3c 93       	st	X, r19
     c3e:	2e 93       	st	-X, r18
     c40:	12 97       	sbiw	r26, 0x02	; 2
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	12 96       	adiw	r26, 0x02	; 2
     c46:	84 31       	cpi	r24, 0x14	; 20
     c48:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c4a:	19 f7       	brne	.-58     	; 0xc12 <USB_Device_ProcessControlRequest+0x1bc>
     c4c:	5f bf       	out	0x3f, r21	; 63
     c4e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c52:	87 7f       	andi	r24, 0xF7	; 247
     c54:	80 93 e8 00 	sts	0x00E8, r24
     c58:	ce 01       	movw	r24, r28
     c5a:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c5c:	6a e2       	ldi	r22, 0x2A	; 42
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	1e dc       	rcall	.-1988   	; 0x49e <Endpoint_Write_Control_Stream_LE>
     c62:	12 c0       	rjmp	.+36     	; 0xc88 <USB_Device_ProcessControlRequest+0x232>
     c64:	60 91 4e 02 	lds	r22, 0x024E
     c68:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c6a:	4f 5f       	subi	r20, 0xFF	; 255
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	eb db       	rcall	.-2090   	; 0x446 <CALLBACK_USB_GetDescriptor>
     c70:	bc 01       	movw	r22, r24
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	09 f4       	brne	.+2      	; 0xc78 <USB_Device_ProcessControlRequest+0x222>
     c76:	3b c0       	rjmp	.+118    	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     c78:	80 91 e8 00 	lds	r24, 0x00E8
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	80 93 e8 00 	sts	0x00E8, r24
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	64 dc       	rcall	.-1848   	; 0x550 <Endpoint_Write_Control_PStream_LE>
     c88:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c8c:	8b 77       	andi	r24, 0x7B	; 123
     c8e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c92:	2d c0       	rjmp	.+90     	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     c94:	80 38       	cpi	r24, 0x80	; 128
     c96:	59 f5       	brne	.+86     	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     c98:	80 91 e8 00 	lds	r24, 0x00E8
     c9c:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c9e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ca2:	80 91 46 02 	lds	r24, 0x0246
     ca6:	80 93 f1 00 	sts	0x00F1, r24
     caa:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     cae:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cb0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cb4:	19 dd       	rcall	.-1486   	; 0x6e8 <Endpoint_ClearStatusStage>
     cb6:	1b c0       	rjmp	.+54     	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     cb8:	88 23       	and	r24, r24
     cba:	c9 f4       	brne	.+50     	; 0xcee <USB_Device_ProcessControlRequest+0x298>
     cbc:	90 91 4c 02 	lds	r25, 0x024C
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     cc0:	92 30       	cpi	r25, 0x02	; 2
     cc2:	a8 f4       	brcc	.+42     	; 0xcee <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cc4:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cc8:	87 7f       	andi	r24, 0xF7	; 247
     cca:	80 93 e8 00 	sts	0x00E8, r24
     cce:	90 93 46 02 	sts	0x0246, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cd2:	0a dd       	rcall	.-1516   	; 0x6e8 <Endpoint_ClearStatusStage>
     cd4:	80 91 46 02 	lds	r24, 0x0246
     cd8:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cda:	21 f4       	brne	.+8      	; 0xce4 <USB_Device_ProcessControlRequest+0x28e>
     cdc:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     ce0:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <USB_Device_ProcessControlRequest+0x292>
     ce4:	84 e0       	ldi	r24, 0x04	; 4
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <USB_Device_ProcessControlRequest+0x294>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     cea:	8e bb       	out	0x1e, r24	; 30
     cec:	2f db       	rcall	.-2466   	; 0x34c <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cee:	80 91 e8 00 	lds	r24, 0x00E8
     cf2:	83 ff       	sbrs	r24, 3
     cf4:	0a c0       	rjmp	.+20     	; 0xd0a <USB_Device_ProcessControlRequest+0x2b4>
     cf6:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     cfa:	87 7f       	andi	r24, 0xF7	; 247
     cfc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d00:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     d04:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d06:	80 93 eb 00 	sts	0x00EB, r24
     d0a:	ac 96       	adiw	r28, 0x2c	; 44
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     d1a:	1f 91       	pop	r17
     d1c:	08 95       	ret

00000d1e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d1e:	08 95       	ret

00000d20 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d20:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     d22:	8e b3       	in	r24, 0x1e	; 30
     d24:	88 23       	and	r24, r24
     d26:	a9 f0       	breq	.+42     	; 0xd52 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d28:	80 91 e9 00 	lds	r24, 0x00E9
     d2c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d2e:	90 91 ec 00 	lds	r25, 0x00EC
     d32:	90 ff       	sbrs	r25, 0
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <USB_USBTask+0x1a>
     d36:	c0 e8       	ldi	r28, 0x80	; 128
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <USB_USBTask+0x1c>
     d3a:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d3c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d3e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d42:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     d46:	83 ff       	sbrs	r24, 3
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     d4a:	85 de       	rcall	.-758    	; 0xa56 <USB_Device_ProcessControlRequest>
     d4c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d4e:	c0 93 e9 00 	sts	0x00E9, r28
     d52:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     d54:	08 95       	ret

00000d56 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d5c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     d60:	83 ff       	sbrs	r24, 3
     d62:	a2 c0       	rjmp	.+324    	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     d64:	88 81       	ld	r24, Y
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	20 91 4e 02 	lds	r18, 0x024E
     d6c:	30 91 4f 02 	lds	r19, 0x024F
     d70:	28 17       	cp	r18, r24
     d72:	39 07       	cpc	r19, r25
     d74:	09 f0       	breq	.+2      	; 0xd78 <CDC_Device_ProcessControlRequest+0x22>
     d76:	98 c0       	rjmp	.+304    	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     d78:	80 91 4b 02 	lds	r24, 0x024B
     d7c:	81 32       	cpi	r24, 0x21	; 33
     d7e:	69 f0       	breq	.+26     	; 0xd9a <CDC_Device_ProcessControlRequest+0x44>
     d80:	82 32       	cpi	r24, 0x22	; 34
     d82:	20 f4       	brcc	.+8      	; 0xd8c <CDC_Device_ProcessControlRequest+0x36>
     d84:	80 32       	cpi	r24, 0x20	; 32
     d86:	09 f0       	breq	.+2      	; 0xd8a <CDC_Device_ProcessControlRequest+0x34>
     d88:	8f c0       	rjmp	.+286    	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
     d8a:	3c c0       	rjmp	.+120    	; 0xe04 <CDC_Device_ProcessControlRequest+0xae>
     d8c:	82 32       	cpi	r24, 0x22	; 34
     d8e:	09 f4       	brne	.+2      	; 0xd92 <CDC_Device_ProcessControlRequest+0x3c>
     d90:	6a c0       	rjmp	.+212    	; 0xe66 <CDC_Device_ProcessControlRequest+0x110>
     d92:	83 32       	cpi	r24, 0x23	; 35
     d94:	09 f0       	breq	.+2      	; 0xd98 <CDC_Device_ProcessControlRequest+0x42>
     d96:	88 c0       	rjmp	.+272    	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
     d98:	79 c0       	rjmp	.+242    	; 0xe8c <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d9a:	80 91 4a 02 	lds	r24, 0x024A
     d9e:	81 3a       	cpi	r24, 0xA1	; 161
     da0:	09 f0       	breq	.+2      	; 0xda4 <CDC_Device_ProcessControlRequest+0x4e>
     da2:	82 c0       	rjmp	.+260    	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     da4:	80 91 e8 00 	lds	r24, 0x00E8
     da8:	87 7f       	andi	r24, 0xF7	; 247
     daa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     dae:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     db2:	80 ff       	sbrs	r24, 0
     db4:	fc cf       	rjmp	.-8      	; 0xdae <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     db6:	8c 89       	ldd	r24, Y+20	; 0x14
     db8:	9d 89       	ldd	r25, Y+21	; 0x15
     dba:	ae 89       	ldd	r26, Y+22	; 0x16
     dbc:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     dbe:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     dc2:	49 2f       	mov	r20, r25
     dc4:	5a 2f       	mov	r21, r26
     dc6:	6b 2f       	mov	r22, r27
     dc8:	77 27       	eor	r23, r23
     dca:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
     dce:	ad 01       	movw	r20, r26
     dd0:	66 27       	eor	r22, r22
     dd2:	77 27       	eor	r23, r23
     dd4:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
     dd8:	8b 2f       	mov	r24, r27
     dda:	99 27       	eor	r25, r25
     ddc:	aa 27       	eor	r26, r26
     dde:	bb 27       	eor	r27, r27
     de0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     de4:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     de6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     dea:	89 8d       	ldd	r24, Y+25	; 0x19
     dec:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     df0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     df2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     df6:	80 91 e8 00 	lds	r24, 0x00E8
     dfa:	8e 77       	andi	r24, 0x7E	; 126
     dfc:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     e00:	73 dc       	rcall	.-1818   	; 0x6e8 <Endpoint_ClearStatusStage>
     e02:	52 c0       	rjmp	.+164    	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
     e04:	80 91 4a 02 	lds	r24, 0x024A
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e08:	81 32       	cpi	r24, 0x21	; 33
     e0a:	09 f0       	breq	.+2      	; 0xe0e <CDC_Device_ProcessControlRequest+0xb8>
     e0c:	4d c0       	rjmp	.+154    	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
     e0e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e12:	87 7f       	andi	r24, 0xF7	; 247
     e14:	80 93 e8 00 	sts	0x00E8, r24
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <CDC_Device_ProcessControlRequest+0xcc>
     e1a:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     e1c:	88 23       	and	r24, r24
     e1e:	09 f4       	brne	.+2      	; 0xe22 <CDC_Device_ProcessControlRequest+0xcc>
     e20:	43 c0       	rjmp	.+134    	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
     e22:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e26:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     e28:	f8 cf       	rjmp	.-16     	; 0xe1a <CDC_Device_ProcessControlRequest+0xc4>
     e2a:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     e2e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     e32:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     e36:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     e3a:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     e3c:	2d 8b       	std	Y+21, r18	; 0x15
     e3e:	9e 8b       	std	Y+22, r25	; 0x16
     e40:	8f 8b       	std	Y+23, r24	; 0x17
     e42:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e46:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     e48:	80 91 f1 00 	lds	r24, 0x00F1
     e4c:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     e4e:	80 91 f1 00 	lds	r24, 0x00F1
     e52:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     e54:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e58:	8b 77       	andi	r24, 0x7B	; 123
     e5a:	80 93 e8 00 	sts	0x00E8, r24
     e5e:	44 dc       	rcall	.-1912   	; 0x6e8 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     e60:	ce 01       	movw	r24, r28
     e62:	ae da       	rcall	.-2724   	; 0x3c0 <EVENT_CDC_Device_LineEncodingChanged>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     e64:	21 c0       	rjmp	.+66     	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
     e66:	80 91 4a 02 	lds	r24, 0x024A
     e6a:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e6c:	e9 f4       	brne	.+58     	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
     e6e:	80 91 e8 00 	lds	r24, 0x00E8
     e72:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e74:	80 93 e8 00 	sts	0x00E8, r24
     e78:	37 dc       	rcall	.-1938   	; 0x6e8 <Endpoint_ClearStatusStage>
     e7a:	80 91 4c 02 	lds	r24, 0x024C
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e7e:	90 91 4d 02 	lds	r25, 0x024D

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     e82:	99 8b       	std	Y+17, r25	; 0x11
     e84:	88 8b       	std	Y+16, r24	; 0x10
     e86:	ce 01       	movw	r24, r28
     e88:	d6 d0       	rcall	.+428    	; 0x1036 <CDC_Device_Event_Stub>
     e8a:	0e c0       	rjmp	.+28     	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
     e8c:	80 91 4a 02 	lds	r24, 0x024A

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e90:	81 32       	cpi	r24, 0x21	; 33
     e92:	51 f4       	brne	.+20     	; 0xea8 <CDC_Device_ProcessControlRequest+0x152>
     e94:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e98:	87 7f       	andi	r24, 0xF7	; 247
     e9a:	80 93 e8 00 	sts	0x00E8, r24
     e9e:	24 dc       	rcall	.-1976   	; 0x6e8 <Endpoint_ClearStatusStage>
     ea0:	ce 01       	movw	r24, r28
     ea2:	60 91 4c 02 	lds	r22, 0x024C
     ea6:	c7 d0       	rcall	.+398    	; 0x1036 <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     eac:	08 95       	ret

00000eae <CDC_Device_ConfigureEndpoints>:
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	ec 01       	movw	r28, r24
     eb4:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
     eb6:	fc 01       	movw	r30, r24
     eb8:	8b e0       	ldi	r24, 0x0B	; 11
     eba:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     ebc:	1d 92       	st	X+, r1
     ebe:	8a 95       	dec	r24
     ec0:	e9 f7       	brne	.-6      	; 0xebc <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     ec6:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	ce db       	rcall	.-2148   	; 0x670 <Endpoint_ConfigureEndpointTable>
     ed4:	88 23       	and	r24, r24
     ed6:	59 f0       	breq	.+22     	; 0xeee <CDC_Device_ConfigureEndpoints+0x40>
     ed8:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     eda:	06 96       	adiw	r24, 0x06	; 6
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	c8 db       	rcall	.-2160   	; 0x670 <Endpoint_ConfigureEndpointTable>
     ee0:	88 23       	and	r24, r24
     ee2:	29 f0       	breq	.+10     	; 0xeee <CDC_Device_ConfigureEndpoints+0x40>
     ee4:	ce 01       	movw	r24, r28
     ee6:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     ee8:	61 e0       	ldi	r22, 0x01	; 1
     eea:	c2 db       	rcall	.-2172   	; 0x670 <Endpoint_ConfigureEndpointTable>
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <CDC_Device_ConfigureEndpoints+0x42>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     ef4:	08 95       	ret

00000ef6 <CDC_Device_SendByte>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     ef6:	cf 93       	push	r28
     ef8:	fc 01       	movw	r30, r24
     efa:	c6 2f       	mov	r28, r22
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     efc:	8e b3       	in	r24, 0x1e	; 30
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	e9 f4       	brne	.+58     	; 0xf3c <CDC_Device_SendByte+0x46>
     f02:	44 89       	ldd	r20, Z+20	; 0x14
     f04:	55 89       	ldd	r21, Z+21	; 0x15
     f06:	66 89       	ldd	r22, Z+22	; 0x16
     f08:	77 89       	ldd	r23, Z+23	; 0x17
     f0a:	41 15       	cp	r20, r1
     f0c:	51 05       	cpc	r21, r1
     f0e:	61 05       	cpc	r22, r1
     f10:	71 05       	cpc	r23, r1
     f12:	a1 f0       	breq	.+40     	; 0xf3c <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f14:	81 81       	ldd	r24, Z+1	; 0x01
     f16:	8f 70       	andi	r24, 0x0F	; 15
     f18:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f1c:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     f20:	85 fd       	sbrc	r24, 5
     f22:	08 c0       	rjmp	.+16     	; 0xf34 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f24:	80 91 e8 00 	lds	r24, 0x00E8
     f28:	8e 77       	andi	r24, 0x7E	; 126
     f2a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f2e:	fb db       	rcall	.-2058   	; 0x726 <Endpoint_WaitUntilReady>
     f30:	88 23       	and	r24, r24
     f32:	29 f4       	brne	.+10     	; 0xf3e <CDC_Device_SendByte+0x48>
     f34:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f38:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <CDC_Device_SendByte+0x48>
     f3c:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f3e:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     f40:	08 95       	ret

00000f42 <CDC_Device_Flush>:
     f42:	fc 01       	movw	r30, r24

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f44:	8e b3       	in	r24, 0x1e	; 30
     f46:	84 30       	cpi	r24, 0x04	; 4
     f48:	29 f5       	brne	.+74     	; 0xf94 <CDC_Device_Flush+0x52>
     f4a:	44 89       	ldd	r20, Z+20	; 0x14
     f4c:	55 89       	ldd	r21, Z+21	; 0x15
     f4e:	66 89       	ldd	r22, Z+22	; 0x16
     f50:	77 89       	ldd	r23, Z+23	; 0x17
     f52:	41 15       	cp	r20, r1
     f54:	51 05       	cpc	r21, r1
     f56:	61 05       	cpc	r22, r1
     f58:	71 05       	cpc	r23, r1
     f5a:	e1 f0       	breq	.+56     	; 0xf94 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f5c:	81 81       	ldd	r24, Z+1	; 0x01
     f5e:	8f 70       	andi	r24, 0x0F	; 15
     f60:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     f64:	80 91 f2 00 	lds	r24, 0x00F2
     f68:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	a1 f0       	breq	.+40     	; 0xf98 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f70:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f74:	80 91 e8 00 	lds	r24, 0x00E8
     f78:	8e 77       	andi	r24, 0x7E	; 126
     f7a:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     f7e:	95 fd       	sbrc	r25, 5
     f80:	0d c0       	rjmp	.+26     	; 0xf9c <CDC_Device_Flush+0x5a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f82:	d1 db       	rcall	.-2142   	; 0x726 <Endpoint_WaitUntilReady>
     f84:	88 23       	and	r24, r24
     f86:	59 f4       	brne	.+22     	; 0xf9e <CDC_Device_Flush+0x5c>
     f88:	90 91 e8 00 	lds	r25, 0x00E8
     f8c:	9e 77       	andi	r25, 0x7E	; 126
     f8e:	90 93 e8 00 	sts	0x00E8, r25
     f92:	08 95       	ret
     f94:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f96:	08 95       	ret
     f98:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     f9a:	08 95       	ret
     f9c:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
     f9e:	08 95       	ret

00000fa0 <CDC_Device_USBTask>:
}
     fa0:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fa2:	24 30       	cpi	r18, 0x04	; 4
     fa4:	99 f4       	brne	.+38     	; 0xfcc <CDC_Device_USBTask+0x2c>
     fa6:	fc 01       	movw	r30, r24
     fa8:	44 89       	ldd	r20, Z+20	; 0x14
     faa:	55 89       	ldd	r21, Z+21	; 0x15
     fac:	66 89       	ldd	r22, Z+22	; 0x16
     fae:	77 89       	ldd	r23, Z+23	; 0x17
     fb0:	41 15       	cp	r20, r1
     fb2:	51 05       	cpc	r21, r1
     fb4:	61 05       	cpc	r22, r1
     fb6:	71 05       	cpc	r23, r1
     fb8:	49 f0       	breq	.+18     	; 0xfcc <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fba:	21 81       	ldd	r18, Z+1	; 0x01
     fbc:	2f 70       	andi	r18, 0x0F	; 15
     fbe:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fc2:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     fc6:	20 ff       	sbrs	r18, 0
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
     fca:	bb cf       	rjmp	.-138    	; 0xf42 <CDC_Device_Flush>
     fcc:	08 95       	ret

00000fce <CDC_Device_ReceiveByte>:
     fce:	fc 01       	movw	r30, r24
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fd0:	8e b3       	in	r24, 0x1e	; 30
     fd2:	84 30       	cpi	r24, 0x04	; 4
     fd4:	51 f5       	brne	.+84     	; 0x102a <CDC_Device_ReceiveByte+0x5c>
     fd6:	44 89       	ldd	r20, Z+20	; 0x14
     fd8:	55 89       	ldd	r21, Z+21	; 0x15
     fda:	66 89       	ldd	r22, Z+22	; 0x16
     fdc:	77 89       	ldd	r23, Z+23	; 0x17
     fde:	41 15       	cp	r20, r1
     fe0:	51 05       	cpc	r21, r1
     fe2:	61 05       	cpc	r22, r1
     fe4:	71 05       	cpc	r23, r1
     fe6:	09 f1       	breq	.+66     	; 0x102a <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fe8:	86 81       	ldd	r24, Z+6	; 0x06
     fea:	8f 70       	andi	r24, 0x0F	; 15
     fec:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ff0:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     ff4:	82 ff       	sbrs	r24, 2
     ff6:	1c c0       	rjmp	.+56     	; 0x1030 <CDC_Device_ReceiveByte+0x62>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     ff8:	80 91 f2 00 	lds	r24, 0x00F2
     ffc:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	21 f0       	breq	.+8      	; 0x100c <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1004:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	9f ef       	ldi	r25, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1010:	20 91 f2 00 	lds	r18, 0x00F2
    1014:	30 91 f3 00 	lds	r19, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1018:	21 15       	cp	r18, r1
    101a:	31 05       	cpc	r19, r1
    101c:	59 f4       	brne	.+22     	; 0x1034 <CDC_Device_ReceiveByte+0x66>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    101e:	20 91 e8 00 	lds	r18, 0x00E8
    1022:	2b 77       	andi	r18, 0x7B	; 123
    1024:	20 93 e8 00 	sts	0x00E8, r18
    1028:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	9f ef       	ldi	r25, 0xFF	; 255
    102e:	08 95       	ret

	int16_t ReceivedByte = -1;
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1034:	08 95       	ret

00001036 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1036:	08 95       	ret

00001038 <__udivmodsi4>:
    1038:	a1 e2       	ldi	r26, 0x21	; 33
    103a:	1a 2e       	mov	r1, r26
    103c:	aa 1b       	sub	r26, r26
    103e:	bb 1b       	sub	r27, r27
    1040:	fd 01       	movw	r30, r26
    1042:	0d c0       	rjmp	.+26     	; 0x105e <__udivmodsi4_ep>

00001044 <__udivmodsi4_loop>:
    1044:	aa 1f       	adc	r26, r26
    1046:	bb 1f       	adc	r27, r27
    1048:	ee 1f       	adc	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	a2 17       	cp	r26, r18
    104e:	b3 07       	cpc	r27, r19
    1050:	e4 07       	cpc	r30, r20
    1052:	f5 07       	cpc	r31, r21
    1054:	20 f0       	brcs	.+8      	; 0x105e <__udivmodsi4_ep>
    1056:	a2 1b       	sub	r26, r18
    1058:	b3 0b       	sbc	r27, r19
    105a:	e4 0b       	sbc	r30, r20
    105c:	f5 0b       	sbc	r31, r21

0000105e <__udivmodsi4_ep>:
    105e:	66 1f       	adc	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	1a 94       	dec	r1
    1068:	69 f7       	brne	.-38     	; 0x1044 <__udivmodsi4_loop>
    106a:	60 95       	com	r22
    106c:	70 95       	com	r23
    106e:	80 95       	com	r24
    1070:	90 95       	com	r25
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	bd 01       	movw	r22, r26
    1078:	cf 01       	movw	r24, r30
    107a:	08 95       	ret

0000107c <printf>:
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	fe 01       	movw	r30, r28
    1086:	35 96       	adiw	r30, 0x05	; 5
    1088:	61 91       	ld	r22, Z+
    108a:	71 91       	ld	r23, Z+
    108c:	80 91 54 02 	lds	r24, 0x0254
    1090:	90 91 55 02 	lds	r25, 0x0255
    1094:	af 01       	movw	r20, r30
    1096:	03 d0       	rcall	.+6      	; 0x109e <vfprintf>
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <vfprintf>:
    109e:	2f 92       	push	r2
    10a0:	3f 92       	push	r3
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	2d 97       	sbiw	r28, 0x0d	; 13
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	3c 01       	movw	r6, r24
    10d4:	7d 87       	std	Y+13, r23	; 0x0d
    10d6:	6c 87       	std	Y+12, r22	; 0x0c
    10d8:	5a 01       	movw	r10, r20
    10da:	fc 01       	movw	r30, r24
    10dc:	17 82       	std	Z+7, r1	; 0x07
    10de:	16 82       	std	Z+6, r1	; 0x06
    10e0:	83 81       	ldd	r24, Z+3	; 0x03
    10e2:	81 ff       	sbrs	r24, 1
    10e4:	bb c1       	rjmp	.+886    	; 0x145c <vfprintf+0x3be>
    10e6:	2e 01       	movw	r4, r28
    10e8:	08 94       	sec
    10ea:	41 1c       	adc	r4, r1
    10ec:	51 1c       	adc	r5, r1
    10ee:	f3 01       	movw	r30, r6
    10f0:	93 81       	ldd	r25, Z+3	; 0x03
    10f2:	ec 85       	ldd	r30, Y+12	; 0x0c
    10f4:	fd 85       	ldd	r31, Y+13	; 0x0d
    10f6:	93 fd       	sbrc	r25, 3
    10f8:	85 91       	lpm	r24, Z+
    10fa:	93 ff       	sbrs	r25, 3
    10fc:	81 91       	ld	r24, Z+
    10fe:	fd 87       	std	Y+13, r31	; 0x0d
    1100:	ec 87       	std	Y+12, r30	; 0x0c
    1102:	88 23       	and	r24, r24
    1104:	09 f4       	brne	.+2      	; 0x1108 <vfprintf+0x6a>
    1106:	a6 c1       	rjmp	.+844    	; 0x1454 <vfprintf+0x3b6>
    1108:	85 32       	cpi	r24, 0x25	; 37
    110a:	41 f4       	brne	.+16     	; 0x111c <vfprintf+0x7e>
    110c:	93 fd       	sbrc	r25, 3
    110e:	85 91       	lpm	r24, Z+
    1110:	93 ff       	sbrs	r25, 3
    1112:	81 91       	ld	r24, Z+
    1114:	fd 87       	std	Y+13, r31	; 0x0d
    1116:	ec 87       	std	Y+12, r30	; 0x0c
    1118:	85 32       	cpi	r24, 0x25	; 37
    111a:	21 f4       	brne	.+8      	; 0x1124 <vfprintf+0x86>
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	b3 01       	movw	r22, r6
    1120:	ce d1       	rcall	.+924    	; 0x14be <fputc>
    1122:	e5 cf       	rjmp	.-54     	; 0x10ee <vfprintf+0x50>
    1124:	ff 24       	eor	r15, r15
    1126:	ee 24       	eor	r14, r14
    1128:	10 e0       	ldi	r17, 0x00	; 0
    112a:	10 32       	cpi	r17, 0x20	; 32
    112c:	b0 f4       	brcc	.+44     	; 0x115a <vfprintf+0xbc>
    112e:	8b 32       	cpi	r24, 0x2B	; 43
    1130:	69 f0       	breq	.+26     	; 0x114c <vfprintf+0xae>
    1132:	8c 32       	cpi	r24, 0x2C	; 44
    1134:	28 f4       	brcc	.+10     	; 0x1140 <vfprintf+0xa2>
    1136:	80 32       	cpi	r24, 0x20	; 32
    1138:	51 f0       	breq	.+20     	; 0x114e <vfprintf+0xb0>
    113a:	83 32       	cpi	r24, 0x23	; 35
    113c:	71 f4       	brne	.+28     	; 0x115a <vfprintf+0xbc>
    113e:	0b c0       	rjmp	.+22     	; 0x1156 <vfprintf+0xb8>
    1140:	8d 32       	cpi	r24, 0x2D	; 45
    1142:	39 f0       	breq	.+14     	; 0x1152 <vfprintf+0xb4>
    1144:	80 33       	cpi	r24, 0x30	; 48
    1146:	49 f4       	brne	.+18     	; 0x115a <vfprintf+0xbc>
    1148:	11 60       	ori	r17, 0x01	; 1
    114a:	2c c0       	rjmp	.+88     	; 0x11a4 <vfprintf+0x106>
    114c:	12 60       	ori	r17, 0x02	; 2
    114e:	14 60       	ori	r17, 0x04	; 4
    1150:	29 c0       	rjmp	.+82     	; 0x11a4 <vfprintf+0x106>
    1152:	18 60       	ori	r17, 0x08	; 8
    1154:	27 c0       	rjmp	.+78     	; 0x11a4 <vfprintf+0x106>
    1156:	10 61       	ori	r17, 0x10	; 16
    1158:	25 c0       	rjmp	.+74     	; 0x11a4 <vfprintf+0x106>
    115a:	17 fd       	sbrc	r17, 7
    115c:	2e c0       	rjmp	.+92     	; 0x11ba <vfprintf+0x11c>
    115e:	28 2f       	mov	r18, r24
    1160:	20 53       	subi	r18, 0x30	; 48
    1162:	2a 30       	cpi	r18, 0x0A	; 10
    1164:	98 f4       	brcc	.+38     	; 0x118c <vfprintf+0xee>
    1166:	16 ff       	sbrs	r17, 6
    1168:	08 c0       	rjmp	.+16     	; 0x117a <vfprintf+0xdc>
    116a:	8f 2d       	mov	r24, r15
    116c:	88 0f       	add	r24, r24
    116e:	f8 2e       	mov	r15, r24
    1170:	ff 0c       	add	r15, r15
    1172:	ff 0c       	add	r15, r15
    1174:	f8 0e       	add	r15, r24
    1176:	f2 0e       	add	r15, r18
    1178:	15 c0       	rjmp	.+42     	; 0x11a4 <vfprintf+0x106>
    117a:	8e 2d       	mov	r24, r14
    117c:	88 0f       	add	r24, r24
    117e:	e8 2e       	mov	r14, r24
    1180:	ee 0c       	add	r14, r14
    1182:	ee 0c       	add	r14, r14
    1184:	e8 0e       	add	r14, r24
    1186:	e2 0e       	add	r14, r18
    1188:	10 62       	ori	r17, 0x20	; 32
    118a:	0c c0       	rjmp	.+24     	; 0x11a4 <vfprintf+0x106>
    118c:	8e 32       	cpi	r24, 0x2E	; 46
    118e:	21 f4       	brne	.+8      	; 0x1198 <vfprintf+0xfa>
    1190:	16 fd       	sbrc	r17, 6
    1192:	60 c1       	rjmp	.+704    	; 0x1454 <vfprintf+0x3b6>
    1194:	10 64       	ori	r17, 0x40	; 64
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <vfprintf+0x106>
    1198:	8c 36       	cpi	r24, 0x6C	; 108
    119a:	11 f4       	brne	.+4      	; 0x11a0 <vfprintf+0x102>
    119c:	10 68       	ori	r17, 0x80	; 128
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <vfprintf+0x106>
    11a0:	88 36       	cpi	r24, 0x68	; 104
    11a2:	59 f4       	brne	.+22     	; 0x11ba <vfprintf+0x11c>
    11a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    11a6:	fd 85       	ldd	r31, Y+13	; 0x0d
    11a8:	93 fd       	sbrc	r25, 3
    11aa:	85 91       	lpm	r24, Z+
    11ac:	93 ff       	sbrs	r25, 3
    11ae:	81 91       	ld	r24, Z+
    11b0:	fd 87       	std	Y+13, r31	; 0x0d
    11b2:	ec 87       	std	Y+12, r30	; 0x0c
    11b4:	88 23       	and	r24, r24
    11b6:	09 f0       	breq	.+2      	; 0x11ba <vfprintf+0x11c>
    11b8:	b8 cf       	rjmp	.-144    	; 0x112a <vfprintf+0x8c>
    11ba:	98 2f       	mov	r25, r24
    11bc:	95 54       	subi	r25, 0x45	; 69
    11be:	93 30       	cpi	r25, 0x03	; 3
    11c0:	18 f0       	brcs	.+6      	; 0x11c8 <vfprintf+0x12a>
    11c2:	90 52       	subi	r25, 0x20	; 32
    11c4:	93 30       	cpi	r25, 0x03	; 3
    11c6:	38 f4       	brcc	.+14     	; 0x11d6 <vfprintf+0x138>
    11c8:	24 e0       	ldi	r18, 0x04	; 4
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	a2 0e       	add	r10, r18
    11ce:	b3 1e       	adc	r11, r19
    11d0:	3f e3       	ldi	r19, 0x3F	; 63
    11d2:	39 83       	std	Y+1, r19	; 0x01
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <vfprintf+0x156>
    11d6:	83 36       	cpi	r24, 0x63	; 99
    11d8:	31 f0       	breq	.+12     	; 0x11e6 <vfprintf+0x148>
    11da:	83 37       	cpi	r24, 0x73	; 115
    11dc:	81 f0       	breq	.+32     	; 0x11fe <vfprintf+0x160>
    11de:	83 35       	cpi	r24, 0x53	; 83
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <vfprintf+0x146>
    11e2:	56 c0       	rjmp	.+172    	; 0x1290 <vfprintf+0x1f2>
    11e4:	21 c0       	rjmp	.+66     	; 0x1228 <vfprintf+0x18a>
    11e6:	f5 01       	movw	r30, r10
    11e8:	80 81       	ld	r24, Z
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	22 e0       	ldi	r18, 0x02	; 2
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	a2 0e       	add	r10, r18
    11f2:	b3 1e       	adc	r11, r19
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	c2 2e       	mov	r12, r18
    11f8:	d1 2c       	mov	r13, r1
    11fa:	42 01       	movw	r8, r4
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <vfprintf+0x186>
    11fe:	92 e0       	ldi	r25, 0x02	; 2
    1200:	29 2e       	mov	r2, r25
    1202:	31 2c       	mov	r3, r1
    1204:	2a 0c       	add	r2, r10
    1206:	3b 1c       	adc	r3, r11
    1208:	f5 01       	movw	r30, r10
    120a:	80 80       	ld	r8, Z
    120c:	91 80       	ldd	r9, Z+1	; 0x01
    120e:	16 ff       	sbrs	r17, 6
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <vfprintf+0x17a>
    1212:	6f 2d       	mov	r22, r15
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	02 c0       	rjmp	.+4      	; 0x121c <vfprintf+0x17e>
    1218:	6f ef       	ldi	r22, 0xFF	; 255
    121a:	7f ef       	ldi	r23, 0xFF	; 255
    121c:	c4 01       	movw	r24, r8
    121e:	44 d1       	rcall	.+648    	; 0x14a8 <strnlen>
    1220:	6c 01       	movw	r12, r24
    1222:	51 01       	movw	r10, r2
    1224:	1f 77       	andi	r17, 0x7F	; 127
    1226:	14 c0       	rjmp	.+40     	; 0x1250 <vfprintf+0x1b2>
    1228:	82 e0       	ldi	r24, 0x02	; 2
    122a:	28 2e       	mov	r2, r24
    122c:	31 2c       	mov	r3, r1
    122e:	2a 0c       	add	r2, r10
    1230:	3b 1c       	adc	r3, r11
    1232:	f5 01       	movw	r30, r10
    1234:	80 80       	ld	r8, Z
    1236:	91 80       	ldd	r9, Z+1	; 0x01
    1238:	16 ff       	sbrs	r17, 6
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <vfprintf+0x1a4>
    123c:	6f 2d       	mov	r22, r15
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <vfprintf+0x1a8>
    1242:	6f ef       	ldi	r22, 0xFF	; 255
    1244:	7f ef       	ldi	r23, 0xFF	; 255
    1246:	c4 01       	movw	r24, r8
    1248:	24 d1       	rcall	.+584    	; 0x1492 <strnlen_P>
    124a:	6c 01       	movw	r12, r24
    124c:	10 68       	ori	r17, 0x80	; 128
    124e:	51 01       	movw	r10, r2
    1250:	13 fd       	sbrc	r17, 3
    1252:	1a c0       	rjmp	.+52     	; 0x1288 <vfprintf+0x1ea>
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <vfprintf+0x1c2>
    1256:	80 e2       	ldi	r24, 0x20	; 32
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	b3 01       	movw	r22, r6
    125c:	30 d1       	rcall	.+608    	; 0x14be <fputc>
    125e:	ea 94       	dec	r14
    1260:	8e 2d       	mov	r24, r14
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	c8 16       	cp	r12, r24
    1266:	d9 06       	cpc	r13, r25
    1268:	b0 f3       	brcs	.-20     	; 0x1256 <vfprintf+0x1b8>
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <vfprintf+0x1ea>
    126c:	f4 01       	movw	r30, r8
    126e:	17 fd       	sbrc	r17, 7
    1270:	85 91       	lpm	r24, Z+
    1272:	17 ff       	sbrs	r17, 7
    1274:	81 91       	ld	r24, Z+
    1276:	4f 01       	movw	r8, r30
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	b3 01       	movw	r22, r6
    127c:	20 d1       	rcall	.+576    	; 0x14be <fputc>
    127e:	e1 10       	cpse	r14, r1
    1280:	ea 94       	dec	r14
    1282:	08 94       	sec
    1284:	c1 08       	sbc	r12, r1
    1286:	d1 08       	sbc	r13, r1
    1288:	c1 14       	cp	r12, r1
    128a:	d1 04       	cpc	r13, r1
    128c:	79 f7       	brne	.-34     	; 0x126c <vfprintf+0x1ce>
    128e:	df c0       	rjmp	.+446    	; 0x144e <vfprintf+0x3b0>
    1290:	84 36       	cpi	r24, 0x64	; 100
    1292:	11 f0       	breq	.+4      	; 0x1298 <vfprintf+0x1fa>
    1294:	89 36       	cpi	r24, 0x69	; 105
    1296:	49 f5       	brne	.+82     	; 0x12ea <vfprintf+0x24c>
    1298:	f5 01       	movw	r30, r10
    129a:	17 ff       	sbrs	r17, 7
    129c:	07 c0       	rjmp	.+14     	; 0x12ac <vfprintf+0x20e>
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	a2 81       	ldd	r26, Z+2	; 0x02
    12a4:	b3 81       	ldd	r27, Z+3	; 0x03
    12a6:	24 e0       	ldi	r18, 0x04	; 4
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	08 c0       	rjmp	.+16     	; 0x12bc <vfprintf+0x21e>
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	aa 27       	eor	r26, r26
    12b2:	97 fd       	sbrc	r25, 7
    12b4:	a0 95       	com	r26
    12b6:	ba 2f       	mov	r27, r26
    12b8:	22 e0       	ldi	r18, 0x02	; 2
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	a2 0e       	add	r10, r18
    12be:	b3 1e       	adc	r11, r19
    12c0:	01 2f       	mov	r16, r17
    12c2:	0f 76       	andi	r16, 0x6F	; 111
    12c4:	b7 ff       	sbrs	r27, 7
    12c6:	08 c0       	rjmp	.+16     	; 0x12d8 <vfprintf+0x23a>
    12c8:	b0 95       	com	r27
    12ca:	a0 95       	com	r26
    12cc:	90 95       	com	r25
    12ce:	81 95       	neg	r24
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	af 4f       	sbci	r26, 0xFF	; 255
    12d4:	bf 4f       	sbci	r27, 0xFF	; 255
    12d6:	00 68       	ori	r16, 0x80	; 128
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	a2 01       	movw	r20, r4
    12de:	2a e0       	ldi	r18, 0x0A	; 10
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	19 d1       	rcall	.+562    	; 0x1516 <__ultoa_invert>
    12e4:	d8 2e       	mov	r13, r24
    12e6:	d4 18       	sub	r13, r4
    12e8:	3e c0       	rjmp	.+124    	; 0x1366 <vfprintf+0x2c8>
    12ea:	85 37       	cpi	r24, 0x75	; 117
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <vfprintf+0x258>
    12ee:	1f 7e       	andi	r17, 0xEF	; 239
    12f0:	2a e0       	ldi	r18, 0x0A	; 10
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	20 c0       	rjmp	.+64     	; 0x1336 <vfprintf+0x298>
    12f6:	19 7f       	andi	r17, 0xF9	; 249
    12f8:	8f 36       	cpi	r24, 0x6F	; 111
    12fa:	a9 f0       	breq	.+42     	; 0x1326 <vfprintf+0x288>
    12fc:	80 37       	cpi	r24, 0x70	; 112
    12fe:	20 f4       	brcc	.+8      	; 0x1308 <vfprintf+0x26a>
    1300:	88 35       	cpi	r24, 0x58	; 88
    1302:	09 f0       	breq	.+2      	; 0x1306 <vfprintf+0x268>
    1304:	a7 c0       	rjmp	.+334    	; 0x1454 <vfprintf+0x3b6>
    1306:	0b c0       	rjmp	.+22     	; 0x131e <vfprintf+0x280>
    1308:	80 37       	cpi	r24, 0x70	; 112
    130a:	21 f0       	breq	.+8      	; 0x1314 <vfprintf+0x276>
    130c:	88 37       	cpi	r24, 0x78	; 120
    130e:	09 f0       	breq	.+2      	; 0x1312 <vfprintf+0x274>
    1310:	a1 c0       	rjmp	.+322    	; 0x1454 <vfprintf+0x3b6>
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <vfprintf+0x278>
    1314:	10 61       	ori	r17, 0x10	; 16
    1316:	14 ff       	sbrs	r17, 4
    1318:	09 c0       	rjmp	.+18     	; 0x132c <vfprintf+0x28e>
    131a:	14 60       	ori	r17, 0x04	; 4
    131c:	07 c0       	rjmp	.+14     	; 0x132c <vfprintf+0x28e>
    131e:	14 ff       	sbrs	r17, 4
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <vfprintf+0x294>
    1322:	16 60       	ori	r17, 0x06	; 6
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <vfprintf+0x294>
    1326:	28 e0       	ldi	r18, 0x08	; 8
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <vfprintf+0x298>
    132c:	20 e1       	ldi	r18, 0x10	; 16
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0x298>
    1332:	20 e1       	ldi	r18, 0x10	; 16
    1334:	32 e0       	ldi	r19, 0x02	; 2
    1336:	f5 01       	movw	r30, r10
    1338:	17 ff       	sbrs	r17, 7
    133a:	07 c0       	rjmp	.+14     	; 0x134a <vfprintf+0x2ac>
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	44 e0       	ldi	r20, 0x04	; 4
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	06 c0       	rjmp	.+12     	; 0x1356 <vfprintf+0x2b8>
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	42 e0       	ldi	r20, 0x02	; 2
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	a4 0e       	add	r10, r20
    1358:	b5 1e       	adc	r11, r21
    135a:	a2 01       	movw	r20, r4
    135c:	dc d0       	rcall	.+440    	; 0x1516 <__ultoa_invert>
    135e:	d8 2e       	mov	r13, r24
    1360:	d4 18       	sub	r13, r4
    1362:	01 2f       	mov	r16, r17
    1364:	0f 77       	andi	r16, 0x7F	; 127
    1366:	06 ff       	sbrs	r16, 6
    1368:	09 c0       	rjmp	.+18     	; 0x137c <vfprintf+0x2de>
    136a:	0e 7f       	andi	r16, 0xFE	; 254
    136c:	df 14       	cp	r13, r15
    136e:	30 f4       	brcc	.+12     	; 0x137c <vfprintf+0x2de>
    1370:	04 ff       	sbrs	r16, 4
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <vfprintf+0x2e2>
    1374:	02 fd       	sbrc	r16, 2
    1376:	04 c0       	rjmp	.+8      	; 0x1380 <vfprintf+0x2e2>
    1378:	0f 7e       	andi	r16, 0xEF	; 239
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x2e2>
    137c:	1d 2d       	mov	r17, r13
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <vfprintf+0x2e4>
    1380:	1f 2d       	mov	r17, r15
    1382:	80 2f       	mov	r24, r16
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	04 ff       	sbrs	r16, 4
    1388:	0c c0       	rjmp	.+24     	; 0x13a2 <vfprintf+0x304>
    138a:	fe 01       	movw	r30, r28
    138c:	ed 0d       	add	r30, r13
    138e:	f1 1d       	adc	r31, r1
    1390:	20 81       	ld	r18, Z
    1392:	20 33       	cpi	r18, 0x30	; 48
    1394:	11 f4       	brne	.+4      	; 0x139a <vfprintf+0x2fc>
    1396:	09 7e       	andi	r16, 0xE9	; 233
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <vfprintf+0x30e>
    139a:	02 ff       	sbrs	r16, 2
    139c:	06 c0       	rjmp	.+12     	; 0x13aa <vfprintf+0x30c>
    139e:	1e 5f       	subi	r17, 0xFE	; 254
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <vfprintf+0x30e>
    13a2:	86 78       	andi	r24, 0x86	; 134
    13a4:	90 70       	andi	r25, 0x00	; 0
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	09 f0       	breq	.+2      	; 0x13ac <vfprintf+0x30e>
    13aa:	1f 5f       	subi	r17, 0xFF	; 255
    13ac:	80 2e       	mov	r8, r16
    13ae:	99 24       	eor	r9, r9
    13b0:	03 fd       	sbrc	r16, 3
    13b2:	11 c0       	rjmp	.+34     	; 0x13d6 <vfprintf+0x338>
    13b4:	00 ff       	sbrs	r16, 0
    13b6:	0c c0       	rjmp	.+24     	; 0x13d0 <vfprintf+0x332>
    13b8:	fd 2c       	mov	r15, r13
    13ba:	1e 15       	cp	r17, r14
    13bc:	48 f4       	brcc	.+18     	; 0x13d0 <vfprintf+0x332>
    13be:	fe 0c       	add	r15, r14
    13c0:	f1 1a       	sub	r15, r17
    13c2:	1e 2d       	mov	r17, r14
    13c4:	05 c0       	rjmp	.+10     	; 0x13d0 <vfprintf+0x332>
    13c6:	80 e2       	ldi	r24, 0x20	; 32
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	b3 01       	movw	r22, r6
    13cc:	78 d0       	rcall	.+240    	; 0x14be <fputc>
    13ce:	1f 5f       	subi	r17, 0xFF	; 255
    13d0:	1e 15       	cp	r17, r14
    13d2:	c8 f3       	brcs	.-14     	; 0x13c6 <vfprintf+0x328>
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <vfprintf+0x340>
    13d6:	1e 15       	cp	r17, r14
    13d8:	10 f4       	brcc	.+4      	; 0x13de <vfprintf+0x340>
    13da:	e1 1a       	sub	r14, r17
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <vfprintf+0x342>
    13de:	ee 24       	eor	r14, r14
    13e0:	84 fe       	sbrs	r8, 4
    13e2:	0e c0       	rjmp	.+28     	; 0x1400 <vfprintf+0x362>
    13e4:	80 e3       	ldi	r24, 0x30	; 48
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	b3 01       	movw	r22, r6
    13ea:	69 d0       	rcall	.+210    	; 0x14be <fputc>
    13ec:	82 fe       	sbrs	r8, 2
    13ee:	1d c0       	rjmp	.+58     	; 0x142a <vfprintf+0x38c>
    13f0:	81 fe       	sbrs	r8, 1
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <vfprintf+0x35c>
    13f4:	88 e5       	ldi	r24, 0x58	; 88
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	10 c0       	rjmp	.+32     	; 0x141a <vfprintf+0x37c>
    13fa:	88 e7       	ldi	r24, 0x78	; 120
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0d c0       	rjmp	.+26     	; 0x141a <vfprintf+0x37c>
    1400:	c4 01       	movw	r24, r8
    1402:	86 78       	andi	r24, 0x86	; 134
    1404:	90 70       	andi	r25, 0x00	; 0
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	81 f0       	breq	.+32     	; 0x142a <vfprintf+0x38c>
    140a:	81 fc       	sbrc	r8, 1
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <vfprintf+0x374>
    140e:	80 e2       	ldi	r24, 0x20	; 32
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <vfprintf+0x376>
    1412:	8b e2       	ldi	r24, 0x2B	; 43
    1414:	07 fd       	sbrc	r16, 7
    1416:	8d e2       	ldi	r24, 0x2D	; 45
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	b3 01       	movw	r22, r6
    141c:	50 d0       	rcall	.+160    	; 0x14be <fputc>
    141e:	05 c0       	rjmp	.+10     	; 0x142a <vfprintf+0x38c>
    1420:	80 e3       	ldi	r24, 0x30	; 48
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	b3 01       	movw	r22, r6
    1426:	4b d0       	rcall	.+150    	; 0x14be <fputc>
    1428:	fa 94       	dec	r15
    142a:	df 14       	cp	r13, r15
    142c:	c8 f3       	brcs	.-14     	; 0x1420 <vfprintf+0x382>
    142e:	da 94       	dec	r13
    1430:	f2 01       	movw	r30, r4
    1432:	ed 0d       	add	r30, r13
    1434:	f1 1d       	adc	r31, r1
    1436:	80 81       	ld	r24, Z
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	b3 01       	movw	r22, r6
    143c:	40 d0       	rcall	.+128    	; 0x14be <fputc>
    143e:	dd 20       	and	r13, r13
    1440:	b1 f7       	brne	.-20     	; 0x142e <vfprintf+0x390>
    1442:	05 c0       	rjmp	.+10     	; 0x144e <vfprintf+0x3b0>
    1444:	80 e2       	ldi	r24, 0x20	; 32
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	b3 01       	movw	r22, r6
    144a:	39 d0       	rcall	.+114    	; 0x14be <fputc>
    144c:	ea 94       	dec	r14
    144e:	ee 20       	and	r14, r14
    1450:	c9 f7       	brne	.-14     	; 0x1444 <vfprintf+0x3a6>
    1452:	4d ce       	rjmp	.-870    	; 0x10ee <vfprintf+0x50>
    1454:	f3 01       	movw	r30, r6
    1456:	86 81       	ldd	r24, Z+6	; 0x06
    1458:	97 81       	ldd	r25, Z+7	; 0x07
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <vfprintf+0x3c2>
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	9f ef       	ldi	r25, 0xFF	; 255
    1460:	2d 96       	adiw	r28, 0x0d	; 13
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	bf 90       	pop	r11
    147e:	af 90       	pop	r10
    1480:	9f 90       	pop	r9
    1482:	8f 90       	pop	r8
    1484:	7f 90       	pop	r7
    1486:	6f 90       	pop	r6
    1488:	5f 90       	pop	r5
    148a:	4f 90       	pop	r4
    148c:	3f 90       	pop	r3
    148e:	2f 90       	pop	r2
    1490:	08 95       	ret

00001492 <strnlen_P>:
    1492:	fc 01       	movw	r30, r24
    1494:	05 90       	lpm	r0, Z+
    1496:	61 50       	subi	r22, 0x01	; 1
    1498:	70 40       	sbci	r23, 0x00	; 0
    149a:	01 10       	cpse	r0, r1
    149c:	d8 f7       	brcc	.-10     	; 0x1494 <strnlen_P+0x2>
    149e:	80 95       	com	r24
    14a0:	90 95       	com	r25
    14a2:	8e 0f       	add	r24, r30
    14a4:	9f 1f       	adc	r25, r31
    14a6:	08 95       	ret

000014a8 <strnlen>:
    14a8:	fc 01       	movw	r30, r24
    14aa:	61 50       	subi	r22, 0x01	; 1
    14ac:	70 40       	sbci	r23, 0x00	; 0
    14ae:	01 90       	ld	r0, Z+
    14b0:	01 10       	cpse	r0, r1
    14b2:	d8 f7       	brcc	.-10     	; 0x14aa <strnlen+0x2>
    14b4:	80 95       	com	r24
    14b6:	90 95       	com	r25
    14b8:	8e 0f       	add	r24, r30
    14ba:	9f 1f       	adc	r25, r31
    14bc:	08 95       	ret

000014be <fputc>:
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	8c 01       	movw	r16, r24
    14c8:	eb 01       	movw	r28, r22
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	81 ff       	sbrs	r24, 1
    14ce:	1b c0       	rjmp	.+54     	; 0x1506 <fputc+0x48>
    14d0:	82 ff       	sbrs	r24, 2
    14d2:	0d c0       	rjmp	.+26     	; 0x14ee <fputc+0x30>
    14d4:	2e 81       	ldd	r18, Y+6	; 0x06
    14d6:	3f 81       	ldd	r19, Y+7	; 0x07
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	28 17       	cp	r18, r24
    14de:	39 07       	cpc	r19, r25
    14e0:	64 f4       	brge	.+24     	; 0x14fa <fputc+0x3c>
    14e2:	e8 81       	ld	r30, Y
    14e4:	f9 81       	ldd	r31, Y+1	; 0x01
    14e6:	01 93       	st	Z+, r16
    14e8:	f9 83       	std	Y+1, r31	; 0x01
    14ea:	e8 83       	st	Y, r30
    14ec:	06 c0       	rjmp	.+12     	; 0x14fa <fputc+0x3c>
    14ee:	e8 85       	ldd	r30, Y+8	; 0x08
    14f0:	f9 85       	ldd	r31, Y+9	; 0x09
    14f2:	80 2f       	mov	r24, r16
    14f4:	09 95       	icall
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	31 f4       	brne	.+12     	; 0x1506 <fputc+0x48>
    14fa:	8e 81       	ldd	r24, Y+6	; 0x06
    14fc:	9f 81       	ldd	r25, Y+7	; 0x07
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	9f 83       	std	Y+7, r25	; 0x07
    1502:	8e 83       	std	Y+6, r24	; 0x06
    1504:	02 c0       	rjmp	.+4      	; 0x150a <fputc+0x4c>
    1506:	0f ef       	ldi	r16, 0xFF	; 255
    1508:	1f ef       	ldi	r17, 0xFF	; 255
    150a:	c8 01       	movw	r24, r16
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <__ultoa_invert>:
    1516:	fa 01       	movw	r30, r20
    1518:	aa 27       	eor	r26, r26
    151a:	28 30       	cpi	r18, 0x08	; 8
    151c:	51 f1       	breq	.+84     	; 0x1572 <__ultoa_invert+0x5c>
    151e:	20 31       	cpi	r18, 0x10	; 16
    1520:	81 f1       	breq	.+96     	; 0x1582 <__ultoa_invert+0x6c>
    1522:	e8 94       	clt
    1524:	6f 93       	push	r22
    1526:	6e 7f       	andi	r22, 0xFE	; 254
    1528:	6e 5f       	subi	r22, 0xFE	; 254
    152a:	7f 4f       	sbci	r23, 0xFF	; 255
    152c:	8f 4f       	sbci	r24, 0xFF	; 255
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	af 4f       	sbci	r26, 0xFF	; 255
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	3e d0       	rcall	.+124    	; 0x15b2 <__ultoa_invert+0x9c>
    1536:	b4 e0       	ldi	r27, 0x04	; 4
    1538:	3c d0       	rcall	.+120    	; 0x15b2 <__ultoa_invert+0x9c>
    153a:	67 0f       	add	r22, r23
    153c:	78 1f       	adc	r23, r24
    153e:	89 1f       	adc	r24, r25
    1540:	9a 1f       	adc	r25, r26
    1542:	a1 1d       	adc	r26, r1
    1544:	68 0f       	add	r22, r24
    1546:	79 1f       	adc	r23, r25
    1548:	8a 1f       	adc	r24, r26
    154a:	91 1d       	adc	r25, r1
    154c:	a1 1d       	adc	r26, r1
    154e:	6a 0f       	add	r22, r26
    1550:	71 1d       	adc	r23, r1
    1552:	81 1d       	adc	r24, r1
    1554:	91 1d       	adc	r25, r1
    1556:	a1 1d       	adc	r26, r1
    1558:	20 d0       	rcall	.+64     	; 0x159a <__ultoa_invert+0x84>
    155a:	09 f4       	brne	.+2      	; 0x155e <__ultoa_invert+0x48>
    155c:	68 94       	set
    155e:	3f 91       	pop	r19
    1560:	2a e0       	ldi	r18, 0x0A	; 10
    1562:	26 9f       	mul	r18, r22
    1564:	11 24       	eor	r1, r1
    1566:	30 19       	sub	r19, r0
    1568:	30 5d       	subi	r19, 0xD0	; 208
    156a:	31 93       	st	Z+, r19
    156c:	de f6       	brtc	.-74     	; 0x1524 <__ultoa_invert+0xe>
    156e:	cf 01       	movw	r24, r30
    1570:	08 95       	ret
    1572:	46 2f       	mov	r20, r22
    1574:	47 70       	andi	r20, 0x07	; 7
    1576:	40 5d       	subi	r20, 0xD0	; 208
    1578:	41 93       	st	Z+, r20
    157a:	b3 e0       	ldi	r27, 0x03	; 3
    157c:	0f d0       	rcall	.+30     	; 0x159c <__ultoa_invert+0x86>
    157e:	c9 f7       	brne	.-14     	; 0x1572 <__ultoa_invert+0x5c>
    1580:	f6 cf       	rjmp	.-20     	; 0x156e <__ultoa_invert+0x58>
    1582:	46 2f       	mov	r20, r22
    1584:	4f 70       	andi	r20, 0x0F	; 15
    1586:	40 5d       	subi	r20, 0xD0	; 208
    1588:	4a 33       	cpi	r20, 0x3A	; 58
    158a:	18 f0       	brcs	.+6      	; 0x1592 <__ultoa_invert+0x7c>
    158c:	49 5d       	subi	r20, 0xD9	; 217
    158e:	31 fd       	sbrc	r19, 1
    1590:	40 52       	subi	r20, 0x20	; 32
    1592:	41 93       	st	Z+, r20
    1594:	02 d0       	rcall	.+4      	; 0x159a <__ultoa_invert+0x84>
    1596:	a9 f7       	brne	.-22     	; 0x1582 <__ultoa_invert+0x6c>
    1598:	ea cf       	rjmp	.-44     	; 0x156e <__ultoa_invert+0x58>
    159a:	b4 e0       	ldi	r27, 0x04	; 4
    159c:	a6 95       	lsr	r26
    159e:	97 95       	ror	r25
    15a0:	87 95       	ror	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	ba 95       	dec	r27
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__ultoa_invert+0x86>
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 05       	cpc	r22, r1
    15ae:	71 05       	cpc	r23, r1
    15b0:	08 95       	ret
    15b2:	9b 01       	movw	r18, r22
    15b4:	ac 01       	movw	r20, r24
    15b6:	0a 2e       	mov	r0, r26
    15b8:	06 94       	lsr	r0
    15ba:	57 95       	ror	r21
    15bc:	47 95       	ror	r20
    15be:	37 95       	ror	r19
    15c0:	27 95       	ror	r18
    15c2:	ba 95       	dec	r27
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__ultoa_invert+0xa2>
    15c6:	62 0f       	add	r22, r18
    15c8:	73 1f       	adc	r23, r19
    15ca:	84 1f       	adc	r24, r20
    15cc:	95 1f       	adc	r25, r21
    15ce:	a0 1d       	adc	r26, r0
    15d0:	08 95       	ret

000015d2 <_exit>:
    15d2:	f8 94       	cli

000015d4 <__stop_program>:
    15d4:	ff cf       	rjmp	.-2      	; 0x15d4 <__stop_program>
