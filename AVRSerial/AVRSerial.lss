
AVRSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  000018bc  00001950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000153  0080017a  0080017a  000019ca  2**0
                  ALLOC
  3 .stab         000011dc  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000047e  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000005d0  00000000  00000000  00003028  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009251  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002623  00000000  00000000  0000c849  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004062  00000000  00000000  0000ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f60  00000000  00000000  00012ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003ae2  00000000  00000000  00013e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a1c  00000000  00000000  00017912  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000708  00000000  00000000  0001d32e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
       2:	00 00       	nop
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	af c4       	rjmp	.+2398   	; 0x988 <__vector_10>
      2a:	00 00       	nop
      2c:	71 c5       	rjmp	.+2786   	; 0xb10 <__vector_11>
      2e:	00 00       	nop
      30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
      36:	00 00       	nop
      38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c1       	rjmp	.+830    	; 0x3a4 <__vector_25>
      66:	00 00       	nop
      68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
      92:	00 00       	nop
      94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
      96:	00 00       	nop
      98:	74 c0       	rjmp	.+232    	; 0x182 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	72 c0       	rjmp	.+228    	; 0x182 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	70 c0       	rjmp	.+224    	; 0x182 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6e c0       	rjmp	.+220    	; 0x182 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6c c0       	rjmp	.+216    	; 0x182 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
      bc:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
      cc:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     10a:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     11a:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12a:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000138 <DeviceDescriptor>:
     138:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     148:	dc 01                                               ..

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	da e0       	ldi	r29, 0x0A	; 10
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	ec eb       	ldi	r30, 0xBC	; 188
     15e:	f8 e1       	ldi	r31, 0x18	; 24
     160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x10>
     162:	05 90       	lpm	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	aa 37       	cpi	r26, 0x7A	; 122
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0xc>

0000016c <__do_clear_bss>:
     16c:	12 e0       	ldi	r17, 0x02	; 2
     16e:	aa e7       	ldi	r26, 0x7A	; 122
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	ad 3c       	cpi	r26, 0xCD	; 205
     178:	b1 07       	cpc	r27, r17
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	23 d0       	rcall	.+70     	; 0x1c4 <main>
     17e:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     184:	9b b1       	in	r25, 0x0b	; 11
     186:	9f 70       	andi	r25, 0x0F	; 15
     188:	98 2b       	or	r25, r24
     18a:	9b b9       	out	0x0b, r25	; 11
			}
     18c:	08 95       	ret

0000018e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     18e:	84 b7       	in	r24, 0x34	; 52
     190:	87 7f       	andi	r24, 0xF7	; 247
     192:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     194:	88 e1       	ldi	r24, 0x18	; 24
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	80 93 60 00 	sts	0x0060, r24
     19e:	10 92 60 00 	sts	0x0060, r1
     1a2:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	80 e8       	ldi	r24, 0x80	; 128
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	f8 94       	cli
     1ac:	80 93 61 00 	sts	0x0061, r24
     1b0:	90 93 61 00 	sts	0x0061, r25
     1b4:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1b6:	8a b1       	in	r24, 0x0a	; 10
     1b8:	80 6f       	ori	r24, 0xF0	; 240
     1ba:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1bc:	8b b1       	in	r24, 0x0b	; 11
     1be:	8f 70       	andi	r24, 0x0F	; 15
     1c0:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     1c2:	c5 c3       	rjmp	.+1930   	; 0x94e <USB_Init>

000001c4 <main>:
     1c4:	cf 93       	push	r28
}
     1c6:	df 93       	push	r29

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	a8 97       	sbiw	r28, 0x28	; 40
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
    #define STRING_LENGTH 30
    char string[STRING_LENGTH];
    char *str = (char *)&string;
    char i = 0;
    
	SetupHardware();
     1d8:	da df       	rcall	.-76     	; 0x18e <SetupHardware>
     1da:	ed e7       	ldi	r30, 0x7D	; 125
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	2f b7       	in	r18, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1e0:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1e2:	89 e8       	ldi	r24, 0x89	; 137

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	91 83       	std	Z+1, r25	; 0x01
     1e8:	80 83       	st	Z, r24
     1ea:	93 83       	std	Z+3, r25	; 0x03
			Buffer->Out    = DataPtr;
     1ec:	82 83       	std	Z+2, r24	; 0x02
     1ee:	95 83       	std	Z+5, r25	; 0x05
			Buffer->Start  = &DataPtr[0];
     1f0:	84 83       	std	Z+4, r24	; 0x04
     1f2:	89 e0       	ldi	r24, 0x09	; 9
			Buffer->End    = &DataPtr[Size];
     1f4:	92 e0       	ldi	r25, 0x02	; 2
     1f6:	97 83       	std	Z+7, r25	; 0x07
     1f8:	86 83       	std	Z+6, r24	; 0x06
     1fa:	80 e8       	ldi	r24, 0x80	; 128
			Buffer->Size   = Size;
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	91 87       	std	Z+9, r25	; 0x09
     200:	80 87       	std	Z+8, r24	; 0x08
     202:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     204:	12 86       	std	Z+10, r1	; 0x0a
     206:	2f bf       	out	0x3f, r18	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     208:	e9 e0       	ldi	r30, 0x09	; 9
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     20a:	f2 e0       	ldi	r31, 0x02	; 2
     20c:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     20e:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     210:	25 e1       	ldi	r18, 0x15	; 21

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     212:	32 e0       	ldi	r19, 0x02	; 2
     214:	31 83       	std	Z+1, r19	; 0x01
     216:	20 83       	st	Z, r18
     218:	33 83       	std	Z+3, r19	; 0x03
			Buffer->Out    = DataPtr;
     21a:	22 83       	std	Z+2, r18	; 0x02
     21c:	35 83       	std	Z+5, r19	; 0x05
			Buffer->Start  = &DataPtr[0];
     21e:	24 83       	std	Z+4, r18	; 0x04
     220:	25 e9       	ldi	r18, 0x95	; 149
			Buffer->End    = &DataPtr[Size];
     222:	32 e0       	ldi	r19, 0x02	; 2
     224:	37 83       	std	Z+7, r19	; 0x07
     226:	26 83       	std	Z+6, r18	; 0x06
     228:	91 87       	std	Z+9, r25	; 0x09
			Buffer->Size   = Size;
     22a:	80 87       	std	Z+8, r24	; 0x08
     22c:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     22e:	12 86       	std	Z+10, r1	; 0x0a
     230:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     232:	8d e4       	ldi	r24, 0x4D	; 77

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));
    
    CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	65 e9       	ldi	r22, 0x95	; 149
     238:	72 e0       	ldi	r23, 0x02	; 2
     23a:	0e 94 30 09 	call	0x1260	; 0x1260 <CDC_Device_CreateStream>
     23e:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     240:	a1 df       	rcall	.-190    	; 0x184 <LEDs_SetAllLEDs>
     242:	78 94       	sei
     244:	8b e0       	ldi	r24, 0x0B	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     246:	e8 2e       	mov	r14, r24
 */
int main(void)
{
    #define STRING_LENGTH 30
    char string[STRING_LENGTH];
    char *str = (char *)&string;
     248:	f1 2c       	mov	r15, r1
     24a:	ec 0e       	add	r14, r28
     24c:	fd 1e       	adc	r15, r29
     24e:	8e e1       	ldi	r24, 0x1E	; 30
     250:	f7 01       	movw	r30, r14
    CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
    
    memset(str, '\0', STRING_LENGTH);
     252:	11 92       	st	Z+, r1
     254:	8a 95       	dec	r24
     256:	e9 f7       	brne	.-6      	; 0x252 <main+0x8e>
     258:	8d e4       	ldi	r24, 0x4D	; 77
     25a:	91 e0       	ldi	r25, 0x01	; 1
    CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Ready\r\n");
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	71 e0       	ldi	r23, 0x01	; 1
     260:	e2 d6       	rcall	.+3524   	; 0x1026 <CDC_Device_SendString>
     262:	10 e0       	ldi	r17, 0x00	; 0
     264:	45 e9       	ldi	r20, 0x95	; 149
     266:	64 2e       	mov	r6, r20
int main(void)
{
    #define STRING_LENGTH 30
    char string[STRING_LENGTH];
    char *str = (char *)&string;
    char i = 0;
     268:	42 e0       	ldi	r20, 0x02	; 2
	{
        char compare[10];
        
        if(completeWord){
            completeWord = 0;
            fprintf(&USBSerialStream, "fprint: ");
     26a:	74 2e       	mov	r7, r20
     26c:	53 ea       	ldi	r21, 0xA3	; 163
     26e:	a5 2e       	mov	r10, r21
     270:	52 e0       	ldi	r21, 0x02	; 2
            fprintf(&USBSerialStream, intString);
     272:	b5 2e       	mov	r11, r21
     274:	ee e1       	ldi	r30, 0x1E	; 30
     276:	de 2e       	mov	r13, r30
     278:	47 01       	movw	r8, r14
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "CDC: ");
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, intString);
            memset(intString, '\0', 30);
     27a:	80 91 7a 01 	lds	r24, 0x017A
     27e:	88 23       	and	r24, r24

	for (;;)
	{
        char compare[10];
        
        if(completeWord){
     280:	09 f4       	brne	.+2      	; 0x284 <main+0xc0>
     282:	73 c0       	rjmp	.+230    	; 0x36a <main+0x1a6>
     284:	10 92 7a 01 	sts	0x017A, r1
     288:	88 e0       	ldi	r24, 0x08	; 8
            completeWord = 0;
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	65 e9       	ldi	r22, 0x95	; 149
            fprintf(&USBSerialStream, "fprint: ");
     28e:	72 e0       	ldi	r23, 0x02	; 2
     290:	0e 94 93 09 	call	0x1326	; 0x1326 <fputs>
     294:	00 d0       	rcall	.+0      	; 0x296 <main+0xd2>
     296:	00 d0       	rcall	.+0      	; 0x298 <main+0xd4>
     298:	ed b7       	in	r30, 0x3d	; 61
            fprintf(&USBSerialStream, intString);
     29a:	fe b7       	in	r31, 0x3e	; 62
     29c:	72 82       	std	Z+2, r7	; 0x02
     29e:	61 82       	std	Z+1, r6	; 0x01
     2a0:	b4 82       	std	Z+4, r11	; 0x04
     2a2:	a3 82       	std	Z+3, r10	; 0x03
     2a4:	0e 94 83 09 	call	0x1306	; 0x1306 <fprintf>
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "CDC: ");
     2ae:	0f 90       	pop	r0
     2b0:	8d e4       	ldi	r24, 0x4D	; 77
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	61 e1       	ldi	r22, 0x11	; 17
     2b6:	71 e0       	ldi	r23, 0x01	; 1
     2b8:	b6 d6       	rcall	.+3436   	; 0x1026 <CDC_Device_SendString>
     2ba:	8d e4       	ldi	r24, 0x4D	; 77
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	63 ea       	ldi	r22, 0xA3	; 163
     2c0:	72 e0       	ldi	r23, 0x02	; 2
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, intString);
     2c2:	b1 d6       	rcall	.+3426   	; 0x1026 <CDC_Device_SendString>
     2c4:	f5 01       	movw	r30, r10
     2c6:	2d 2d       	mov	r18, r13
     2c8:	11 92       	st	Z+, r1
     2ca:	2a 95       	dec	r18
     2cc:	e9 f7       	brne	.-6      	; 0x2c8 <main+0x104>
            memset(intString, '\0', 30);
     2ce:	10 92 7c 01 	sts	0x017C, r1
     2d2:	10 92 7b 01 	sts	0x017B, r1
     2d6:	49 c0       	rjmp	.+146    	; 0x36a <main+0x1a6>
            intIndex = 0;
     2d8:	8d e4       	ldi	r24, 0x4D	; 77
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	7a d7       	rcall	.+3828   	; 0x11d2 <CDC_Device_ReceiveByte>
     2de:	08 2f       	mov	r16, r24
     2e0:	8d 30       	cpi	r24, 0x0D	; 13
        
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        while (CDC_Device_BytesReceived
               (&VirtualSerial_CDC_Interface))
        {
            char byte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     2e2:	89 f5       	brne	.+98     	; 0x346 <main+0x182>
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	b7 01       	movw	r22, r14
     2ea:	43 e0       	ldi	r20, 0x03	; 3
            
            if(byte == '\r'){
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	fc d7       	rcall	.+4088   	; 0x12e8 <strncpy>
                strncpy(compare, str, 3);
     2f0:	81 2f       	mov	r24, r17
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	f7 01       	movw	r30, r14
     2f6:	e8 0f       	add	r30, r24
     2f8:	f9 1f       	adc	r31, r25
     2fa:	00 83       	st	Z, r16
     2fc:	ec e0       	ldi	r30, 0x0C	; 12
                
                string[i] = '\r';
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ec 0f       	add	r30, r28
     302:	fd 1f       	adc	r31, r29
     304:	8e 0f       	add	r24, r30
     306:	9f 1f       	adc	r25, r31
     308:	2a e0       	ldi	r18, 0x0A	; 10
                string[i+1] = '\n';
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
     30e:	8d e4       	ldi	r24, 0x4D	; 77
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	b7 01       	movw	r22, r14
     314:	88 d6       	rcall	.+3344   	; 0x1026 <CDC_Device_SendString>
     316:	f7 01       	movw	r30, r14
     318:	2d 2d       	mov	r18, r13
     31a:	11 92       	st	Z+, r1
                CDC_Device_SendString(&VirtualSerial_CDC_Interface, string);
     31c:	2a 95       	dec	r18
     31e:	e9 f7       	brne	.-6      	; 0x31a <main+0x156>
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	67 e1       	ldi	r22, 0x17	; 23
                i = 0;
                memset(str, '\0', STRING_LENGTH);
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	43 e0       	ldi	r20, 0x03	; 3
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	cf d7       	rcall	.+3998   	; 0x12cc <strncmp>
     32e:	00 97       	sbiw	r24, 0x00	; 0
                if(strncmp(compare, "led", 3) == 0){
     330:	19 f5       	brne	.+70     	; 0x378 <main+0x1b4>
     332:	8b e1       	ldi	r24, 0x1B	; 27
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	65 e9       	ldi	r22, 0x95	; 149
     338:	72 e0       	ldi	r23, 0x02	; 2
     33a:	f5 d7       	rcall	.+4074   	; 0x1326 <fputs>
     33c:	8b b1       	in	r24, 0x0b	; 11
     33e:	90 e1       	ldi	r25, 0x10	; 16
     340:	89 27       	eor	r24, r25
     342:	8b b9       	out	0x0b, r24	; 11
                    //CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Set LED\r\n");
                    fprintf(&USBSerialStream, "Set LED\r\n");
     344:	19 c0       	rjmp	.+50     	; 0x378 <main+0x1b4>
     346:	f4 01       	movw	r30, r8
     348:	e1 0f       	add	r30, r17
     34a:	f1 1d       	adc	r31, r1
     34c:	80 83       	st	Z, r24
     34e:	1f 5f       	subi	r17, 0xFF	; 255
                    PORTD ^= 1<<4;
     350:	1a 31       	cpi	r17, 0x1A	; 26
     352:	58 f0       	brcs	.+22     	; 0x36a <main+0x1a6>
     354:	8d e4       	ldi	r24, 0x4D	; 77
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	65 e2       	ldi	r22, 0x25	; 37
                }
                //strcpy(str, "echo: ");
                break;
            }
            string[i] = byte;
     35a:	71 e0       	ldi	r23, 0x01	; 1
     35c:	64 d6       	rcall	.+3272   	; 0x1026 <CDC_Device_SendString>
     35e:	f4 01       	movw	r30, r8
     360:	2d 2d       	mov	r18, r13
            i++;
     362:	11 92       	st	Z+, r1
            if(i >= STRING_LENGTH - 4){
     364:	2a 95       	dec	r18
     366:	e9 f7       	brne	.-6      	; 0x362 <main+0x19e>
                CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Overflow\r\n");
     368:	10 e0       	ldi	r17, 0x00	; 0
     36a:	8d e4       	ldi	r24, 0x4D	; 77
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	fb d6       	rcall	.+3574   	; 0x1166 <CDC_Device_BytesReceived>
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	09 f0       	breq	.+2      	; 0x376 <main+0x1b2>
                i = 0;
                memset(str, '\0', STRING_LENGTH);
     374:	b1 cf       	rjmp	.-158    	; 0x2d8 <main+0x114>
     376:	01 c0       	rjmp	.+2      	; 0x37a <main+0x1b6>
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	8d e4       	ldi	r24, 0x4D	; 77
     37c:	91 e0       	ldi	r25, 0x01	; 1
            }
            string[i] = byte;
            i++;
            if(i >= STRING_LENGTH - 4){
                CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Overflow\r\n");
                i = 0;
     37e:	dc d6       	rcall	.+3512   	; 0x1138 <CDC_Device_USBTask>
            intIndex = 0;
        }
        
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        while (CDC_Device_BytesReceived
               (&VirtualSerial_CDC_Interface))
     380:	67 d5       	rcall	.+2766   	; 0xe50 <USB_USBTask>
     382:	7b cf       	rjmp	.-266    	; 0x27a <main+0xb6>

00000384 <EVENT_USB_Device_Connect>:
     384:	80 ea       	ldi	r24, 0xA0	; 160
     386:	fe ce       	rjmp	.-516    	; 0x184 <LEDs_SetAllLEDs>

00000388 <EVENT_USB_Device_Disconnect>:
            memset(intString, '\0', 30);
            intIndex = 0;
        }
        
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        while (CDC_Device_BytesReceived
     388:	80 e1       	ldi	r24, 0x10	; 16
     38a:	fc ce       	rjmp	.-520    	; 0x184 <LEDs_SetAllLEDs>

0000038c <EVENT_USB_Device_ConfigurationChanged>:
     38c:	8d e4       	ldi	r24, 0x4D	; 77
     38e:	91 e0       	ldi	r25, 0x01	; 1
                strncpy(compare, str, 3);
                
                string[i] = '\r';
                string[i+1] = '\n';
                CDC_Device_SendString(&VirtualSerial_CDC_Interface, string);
                i = 0;
     390:	26 d6       	rcall	.+3148   	; 0xfde <CDC_Device_ConfigureEndpoints>
        /*
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
        */

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     392:	88 23       	and	r24, r24
     394:	11 f0       	breq	.+4      	; 0x39a <EVENT_USB_Device_ConfigurationChanged+0xe>
     396:	80 e6       	ldi	r24, 0x60	; 96
     398:	01 c0       	rjmp	.+2      	; 0x39c <EVENT_USB_Device_ConfigurationChanged+0x10>
		USB_USBTask();
     39a:	80 e9       	ldi	r24, 0x90	; 144
     39c:	f3 ce       	rjmp	.-538    	; 0x184 <LEDs_SetAllLEDs>

0000039e <EVENT_USB_Device_ControlRequest>:
	}
     39e:	8d e4       	ldi	r24, 0x4D	; 77
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     3a0:	91 e0       	ldi	r25, 0x01	; 1
}
     3a2:	71 c5       	rjmp	.+2786   	; 0xe86 <CDC_Device_ProcessControlRequest>

000003a4 <__vector_25>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     3a4:	1f 92       	push	r1
}
     3a6:	0f 92       	push	r0
    }
}
 */

ISR(USART1_RX_vect, ISR_BLOCK)
{
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	0f 92       	push	r0
     3ac:	11 24       	eor	r1, r1
     3ae:	2f 93       	push	r18
     3b0:	3f 93       	push	r19
     3b2:	4f 93       	push	r20
     3b4:	5f 93       	push	r21
     3b6:	6f 93       	push	r22
     3b8:	7f 93       	push	r23
     3ba:	8f 93       	push	r24
     3bc:	9f 93       	push	r25
     3be:	af 93       	push	r26
     3c0:	bf 93       	push	r27
     3c2:	cf 93       	push	r28
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
	char ReceivedByte = UDR1;
     3c8:	c0 91 ce 00 	lds	r28, 0x00CE
    fprintf(&USBSerialStream, "interrupt\r\n");
     3cc:	80 e3       	ldi	r24, 0x30	; 48
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	65 e9       	ldi	r22, 0x95	; 149
     3d2:	72 e0       	ldi	r23, 0x02	; 2
     3d4:	a8 d7       	rcall	.+3920   	; 0x1326 <fputs>
     3d6:	8e b3       	in	r24, 0x1e	; 30
    
	if (USB_DeviceState == DEVICE_STATE_Configured){
     3d8:	84 30       	cpi	r24, 0x04	; 4
     3da:	09 f5       	brne	.+66     	; 0x41e <__vector_25+0x7a>
     3dc:	80 91 7b 01 	lds	r24, 0x017B
        if(intIndex == 30){
     3e0:	90 91 7c 01 	lds	r25, 0x017C
     3e4:	8e 31       	cpi	r24, 0x1E	; 30
     3e6:	91 05       	cpc	r25, r1
     3e8:	89 f4       	brne	.+34     	; 0x40c <__vector_25+0x68>
     3ea:	8c e3       	ldi	r24, 0x3C	; 60
            fprintf(&USBSerialStream, "Overflow Error\r\n");
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	65 e9       	ldi	r22, 0x95	; 149
     3f0:	72 e0       	ldi	r23, 0x02	; 2
     3f2:	99 d7       	rcall	.+3890   	; 0x1326 <fputs>
     3f4:	10 92 7c 01 	sts	0x017C, r1
            intIndex = 0;
     3f8:	10 92 7b 01 	sts	0x017B, r1
     3fc:	8e e1       	ldi	r24, 0x1E	; 30
     3fe:	e3 ea       	ldi	r30, 0xA3	; 163
            memset(intString, '\0', 30);
     400:	f2 e0       	ldi	r31, 0x02	; 2
     402:	df 01       	movw	r26, r30
     404:	1d 92       	st	X+, r1
     406:	8a 95       	dec	r24
     408:	e9 f7       	brne	.-6      	; 0x404 <__vector_25+0x60>
     40a:	10 c0       	rjmp	.+32     	; 0x42c <__vector_25+0x88>
     40c:	fc 01       	movw	r30, r24
            return;
     40e:	ed 55       	subi	r30, 0x5D	; 93
        }
        intString[intIndex] = ReceivedByte;
     410:	fd 4f       	sbci	r31, 0xFD	; 253
     412:	c0 83       	st	Z, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	90 93 7c 01 	sts	0x017C, r25
        intIndex++;
     41a:	80 93 7b 01 	sts	0x017B, r24
     41e:	cd 30       	cpi	r28, 0x0D	; 13
     420:	11 f0       	breq	.+4      	; 0x426 <__vector_25+0x82>
    }
    
    if(ReceivedByte == '\r' || ReceivedByte == '\n'){
     422:	ca 30       	cpi	r28, 0x0A	; 10
     424:	19 f4       	brne	.+6      	; 0x42c <__vector_25+0x88>
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 7a 01 	sts	0x017A, r24
        completeWord = 1;
     42c:	ff 91       	pop	r31
     42e:	ef 91       	pop	r30
    }
}
     430:	cf 91       	pop	r28
     432:	bf 91       	pop	r27
     434:	af 91       	pop	r26
     436:	9f 91       	pop	r25
     438:	8f 91       	pop	r24
     43a:	7f 91       	pop	r23
     43c:	6f 91       	pop	r22
     43e:	5f 91       	pop	r21
     440:	4f 91       	pop	r20
     442:	3f 91       	pop	r19
     444:	2f 91       	pop	r18
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <EVENT_CDC_Device_LineEncodingChanged>:
     450:	cf 93       	push	r28
     452:	fc 01       	movw	r30, r24
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     454:	a1 8d       	ldd	r26, Z+25	; 0x19
     456:	a1 50       	subi	r26, 0x01	; 1
     458:	a2 30       	cpi	r26, 0x02	; 2
     45a:	28 f4       	brcc	.+10     	; 0x466 <EVENT_CDC_Device_LineEncodingChanged+0x16>
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	a8 59       	subi	r26, 0x98	; 152
     460:	be 4f       	sbci	r27, 0xFE	; 254
     462:	cc 91       	ld	r28, X
     464:	01 c0       	rjmp	.+2      	; 0x468 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     466:	c0 e0       	ldi	r28, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     468:	80 8d       	ldd	r24, Z+24	; 0x18
     46a:	82 30       	cpi	r24, 0x02	; 2
     46c:	09 f4       	brne	.+2      	; 0x470 <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
     46e:	c8 60       	ori	r28, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     470:	82 8d       	ldd	r24, Z+26	; 0x1a
     472:	87 30       	cpi	r24, 0x07	; 7
     474:	31 f0       	breq	.+12     	; 0x482 <EVENT_CDC_Device_LineEncodingChanged+0x32>
     476:	88 30       	cpi	r24, 0x08	; 8
     478:	31 f0       	breq	.+12     	; 0x486 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     47a:	86 30       	cpi	r24, 0x06	; 6
     47c:	29 f4       	brne	.+10     	; 0x488 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     47e:	c2 60       	ori	r28, 0x02	; 2
			break;
     480:	03 c0       	rjmp	.+6      	; 0x488 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     482:	c4 60       	ori	r28, 0x04	; 4
			break;
     484:	01 c0       	rjmp	.+2      	; 0x488 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     486:	c6 60       	ori	r28, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     488:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     48c:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     490:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     494:	24 89       	ldd	r18, Z+20	; 0x14
     496:	35 89       	ldd	r19, Z+21	; 0x15
     498:	46 89       	ldd	r20, Z+22	; 0x16
     49a:	57 89       	ldd	r21, Z+23	; 0x17
     49c:	da 01       	movw	r26, r20
     49e:	c9 01       	movw	r24, r18
     4a0:	b6 95       	lsr	r27
     4a2:	a7 95       	ror	r26
     4a4:	97 95       	ror	r25
     4a6:	87 95       	ror	r24
     4a8:	80 58       	subi	r24, 0x80	; 128
     4aa:	9b 47       	sbci	r25, 0x7B	; 123
     4ac:	a1 4e       	sbci	r26, 0xE1	; 225
     4ae:	bf 4f       	sbci	r27, 0xFF	; 255
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	e9 d6       	rcall	.+3538   	; 0x1288 <__udivmodsi4>
     4b6:	21 50       	subi	r18, 0x01	; 1
     4b8:	30 40       	sbci	r19, 0x00	; 0
     4ba:	30 93 cd 00 	sts	0x00CD, r19
     4be:	20 93 cc 00 	sts	0x00CC, r18
     4c2:	c0 93 ca 00 	sts	0x00CA, r28

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     4c6:	82 e0       	ldi	r24, 0x02	; 2
	UCSR1A = (1 << U2X1);
     4c8:	80 93 c8 00 	sts	0x00C8, r24
     4cc:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     4ce:	80 93 c9 00 	sts	0x00C9, r24
     4d2:	cf 91       	pop	r28
}
     4d4:	08 95       	ret

000004d6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4d6:	92 30       	cpi	r25, 0x02	; 2
     4d8:	29 f0       	breq	.+10     	; 0x4e4 <CALLBACK_USB_GetDescriptor+0xe>
     4da:	93 30       	cpi	r25, 0x03	; 3
     4dc:	41 f0       	breq	.+16     	; 0x4ee <CALLBACK_USB_GetDescriptor+0x18>
     4de:	91 30       	cpi	r25, 0x01	; 1
     4e0:	e9 f4       	brne	.+58     	; 0x51c <CALLBACK_USB_GetDescriptor+0x46>
     4e2:	17 c0       	rjmp	.+46     	; 0x512 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     4e4:	8e e3       	ldi	r24, 0x3E	; 62
     4e6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     4e8:	ea ef       	ldi	r30, 0xFA	; 250
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     4ec:	1b c0       	rjmp	.+54     	; 0x524 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	41 f0       	breq	.+16     	; 0x502 <CALLBACK_USB_GetDescriptor+0x2c>
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	18 f0       	brcs	.+6      	; 0x4fc <CALLBACK_USB_GetDescriptor+0x26>
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	89 f4       	brne	.+34     	; 0x51c <CALLBACK_USB_GetDescriptor+0x46>
     4fa:	06 c0       	rjmp	.+12     	; 0x508 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4fc:	e6 ef       	ldi	r30, 0xF6	; 246
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	05 c0       	rjmp	.+10     	; 0x50c <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     502:	ec ed       	ldi	r30, 0xDC	; 220
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	02 c0       	rjmp	.+4      	; 0x50c <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     508:	ec ea       	ldi	r30, 0xAC	; 172
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	84 91       	lpm	r24, Z
     50e:	90 e0       	ldi	r25, 0x00	; 0
					break;
     510:	09 c0       	rjmp	.+18     	; 0x524 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     512:	82 e1       	ldi	r24, 0x12	; 18
     514:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     516:	e8 e3       	ldi	r30, 0x38	; 56
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	04 c0       	rjmp	.+8      	; 0x524 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     520:	e0 e0       	ldi	r30, 0x00	; 0
     522:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     524:	da 01       	movw	r26, r20
     526:	11 96       	adiw	r26, 0x01	; 1
     528:	fc 93       	st	X, r31
     52a:	ee 93       	st	-X, r30
	return Size;
}
     52c:	08 95       	ret

0000052e <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     52e:	af 92       	push	r10
     530:	bf 92       	push	r11
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	ec 01       	movw	r28, r24
     542:	7b 01       	movw	r14, r22
     544:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     546:	92 d1       	rcall	.+804    	; 0x86c <Endpoint_WaitUntilReady>
     548:	18 2f       	mov	r17, r24
     54a:	88 23       	and	r24, r24
     54c:	a1 f5       	brne	.+104    	; 0x5b6 <Endpoint_Write_Stream_LE+0x88>
     54e:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     550:	d1 04       	cpc	r13, r1
     552:	39 f0       	breq	.+14     	; 0x562 <Endpoint_Write_Stream_LE+0x34>
     554:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     556:	20 81       	ld	r18, Z
     558:	31 81       	ldd	r19, Z+1	; 0x01
     55a:	e2 1a       	sub	r14, r18
     55c:	f3 0a       	sbc	r15, r19
     55e:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     560:	d3 1f       	adc	r29, r19
     562:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     564:	bb 24       	eor	r11, r11
     566:	22 c0       	rjmp	.+68     	; 0x5ac <Endpoint_Write_Stream_LE+0x7e>
     568:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     56c:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     56e:	15 c0       	rjmp	.+42     	; 0x59a <Endpoint_Write_Stream_LE+0x6c>
     570:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     574:	8e 77       	andi	r24, 0x7E	; 126
     576:	80 93 e8 00 	sts	0x00E8, r24
     57a:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     57c:	d1 04       	cpc	r13, r1
     57e:	49 f0       	breq	.+18     	; 0x592 <Endpoint_Write_Stream_LE+0x64>
     580:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     582:	80 81       	ld	r24, Z
     584:	91 81       	ldd	r25, Z+1	; 0x01
     586:	8a 0d       	add	r24, r10
     588:	9b 1d       	adc	r25, r11
     58a:	91 83       	std	Z+1, r25	; 0x01
     58c:	80 83       	st	Z, r24
     58e:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     590:	12 c0       	rjmp	.+36     	; 0x5b6 <Endpoint_Write_Stream_LE+0x88>
     592:	6c d1       	rcall	.+728    	; 0x86c <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     594:	88 23       	and	r24, r24
     596:	51 f0       	breq	.+20     	; 0x5ac <Endpoint_Write_Stream_LE+0x7e>
     598:	0d c0       	rjmp	.+26     	; 0x5b4 <Endpoint_Write_Stream_LE+0x86>
     59a:	89 91       	ld	r24, Y+
     59c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5a0:	08 94       	sec
     5a2:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     5a4:	f1 08       	sbc	r15, r1
     5a6:	08 94       	sec
     5a8:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     5aa:	b1 1c       	adc	r11, r1
     5ac:	e1 14       	cp	r14, r1
     5ae:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     5b0:	d9 f6       	brne	.-74     	; 0x568 <Endpoint_Write_Stream_LE+0x3a>
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <Endpoint_Write_Stream_LE+0x88>
     5b4:	18 2f       	mov	r17, r24
     5b6:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     5b8:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	08 95       	ret

000005cc <Endpoint_Write_Control_Stream_LE>:
     5cc:	40 91 cb 02 	lds	r20, 0x02CB
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5d0:	50 91 cc 02 	lds	r21, 0x02CC
     5d4:	46 17       	cp	r20, r22
     5d6:	57 07       	cpc	r21, r23
     5d8:	20 f4       	brcc	.+8      	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0x16>
     5da:	ba 01       	movw	r22, r20
     5dc:	fc 01       	movw	r30, r24
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	3b c0       	rjmp	.+118    	; 0x658 <Endpoint_Write_Control_Stream_LE+0x8c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5e2:	61 15       	cp	r22, r1
     5e4:	71 05       	cpc	r23, r1
     5e6:	d1 f7       	brne	.-12     	; 0x5dc <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5e8:	40 91 e8 00 	lds	r20, 0x00E8
     5ec:	4e 77       	andi	r20, 0x7E	; 126
     5ee:	40 93 e8 00 	sts	0x00E8, r20
     5f2:	f4 cf       	rjmp	.-24     	; 0x5dc <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5f4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5f6:	88 23       	and	r24, r24
     5f8:	09 f4       	brne	.+2      	; 0x5fc <Endpoint_Write_Control_Stream_LE+0x30>
     5fa:	43 c0       	rjmp	.+134    	; 0x682 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5fc:	85 30       	cpi	r24, 0x05	; 5
     5fe:	e9 f1       	breq	.+122    	; 0x67a <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     600:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     604:	83 fd       	sbrc	r24, 3
     606:	3b c0       	rjmp	.+118    	; 0x67e <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     608:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     60c:	82 fd       	sbrc	r24, 2
     60e:	2f c0       	rjmp	.+94     	; 0x66e <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     610:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     614:	80 ff       	sbrs	r24, 0
     616:	20 c0       	rjmp	.+64     	; 0x658 <Endpoint_Write_Control_Stream_LE+0x8c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     618:	90 91 f3 00 	lds	r25, 0x00F3
     61c:	80 91 f2 00 	lds	r24, 0x00F2
     620:	39 2f       	mov	r19, r25
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	82 2b       	or	r24, r18
     628:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     62a:	06 c0       	rjmp	.+12     	; 0x638 <Endpoint_Write_Control_Stream_LE+0x6c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     62c:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     62e:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     632:	61 50       	subi	r22, 0x01	; 1
     634:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     636:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     638:	61 15       	cp	r22, r1
     63a:	71 05       	cpc	r23, r1
     63c:	19 f0       	breq	.+6      	; 0x644 <Endpoint_Write_Control_Stream_LE+0x78>
     63e:	88 30       	cpi	r24, 0x08	; 8
     640:	91 05       	cpc	r25, r1
     642:	a0 f3       	brcs	.-24     	; 0x62c <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	88 30       	cpi	r24, 0x08	; 8
     648:	91 05       	cpc	r25, r1
     64a:	09 f0       	breq	.+2      	; 0x64e <Endpoint_Write_Control_Stream_LE+0x82>
     64c:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     64e:	80 91 e8 00 	lds	r24, 0x00E8
     652:	8e 77       	andi	r24, 0x7E	; 126
     654:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     658:	61 15       	cp	r22, r1
     65a:	71 05       	cpc	r23, r1
     65c:	59 f6       	brne	.-106    	; 0x5f4 <Endpoint_Write_Control_Stream_LE+0x28>
     65e:	44 23       	and	r20, r20
     660:	49 f6       	brne	.-110    	; 0x5f4 <Endpoint_Write_Control_Stream_LE+0x28>
     662:	05 c0       	rjmp	.+10     	; 0x66e <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     664:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     666:	88 23       	and	r24, r24
     668:	61 f0       	breq	.+24     	; 0x682 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     66a:	85 30       	cpi	r24, 0x05	; 5
     66c:	61 f0       	breq	.+24     	; 0x686 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     66e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     672:	82 ff       	sbrs	r24, 2
     674:	f7 cf       	rjmp	.-18     	; 0x664 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     686:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     688:	08 95       	ret

0000068a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     68a:	40 91 cb 02 	lds	r20, 0x02CB
     68e:	50 91 cc 02 	lds	r21, 0x02CC
     692:	46 17       	cp	r20, r22
     694:	57 07       	cpc	r21, r23
     696:	20 f4       	brcc	.+8      	; 0x6a0 <Endpoint_Write_Control_PStream_LE+0x16>
     698:	ba 01       	movw	r22, r20
     69a:	fc 01       	movw	r30, r24
     69c:	40 e0       	ldi	r20, 0x00	; 0
     69e:	3d c0       	rjmp	.+122    	; 0x71a <Endpoint_Write_Control_PStream_LE+0x90>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     6a0:	61 15       	cp	r22, r1
     6a2:	71 05       	cpc	r23, r1
     6a4:	d1 f7       	brne	.-12     	; 0x69a <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6a6:	40 91 e8 00 	lds	r20, 0x00E8
     6aa:	4e 77       	andi	r20, 0x7E	; 126
     6ac:	40 93 e8 00 	sts	0x00E8, r20
     6b0:	f4 cf       	rjmp	.-24     	; 0x69a <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6b2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6b4:	88 23       	and	r24, r24
     6b6:	09 f4       	brne	.+2      	; 0x6ba <Endpoint_Write_Control_PStream_LE+0x30>
     6b8:	45 c0       	rjmp	.+138    	; 0x744 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6ba:	85 30       	cpi	r24, 0x05	; 5
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <Endpoint_Write_Control_PStream_LE+0x36>
     6be:	3e c0       	rjmp	.+124    	; 0x73c <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     6c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     6c4:	83 fd       	sbrc	r24, 3
     6c6:	3c c0       	rjmp	.+120    	; 0x740 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6c8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     6cc:	82 fd       	sbrc	r24, 2
     6ce:	30 c0       	rjmp	.+96     	; 0x730 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6d0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     6d4:	80 ff       	sbrs	r24, 0
     6d6:	21 c0       	rjmp	.+66     	; 0x71a <Endpoint_Write_Control_PStream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     6d8:	90 91 f3 00 	lds	r25, 0x00F3
     6dc:	80 91 f2 00 	lds	r24, 0x00F2
     6e0:	39 2f       	mov	r19, r25
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	82 2b       	or	r24, r18
     6e8:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6ea:	07 c0       	rjmp	.+14     	; 0x6fa <Endpoint_Write_Control_PStream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6ec:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6ee:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     6f2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     6f4:	61 50       	subi	r22, 0x01	; 1
     6f6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     6f8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6fa:	61 15       	cp	r22, r1
     6fc:	71 05       	cpc	r23, r1
     6fe:	19 f0       	breq	.+6      	; 0x706 <Endpoint_Write_Control_PStream_LE+0x7c>
     700:	88 30       	cpi	r24, 0x08	; 8
     702:	91 05       	cpc	r25, r1
     704:	98 f3       	brcs	.-26     	; 0x6ec <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	88 30       	cpi	r24, 0x08	; 8
     70a:	91 05       	cpc	r25, r1
     70c:	09 f0       	breq	.+2      	; 0x710 <Endpoint_Write_Control_PStream_LE+0x86>
     70e:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     710:	80 91 e8 00 	lds	r24, 0x00E8
     714:	8e 77       	andi	r24, 0x7E	; 126
     716:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     71a:	61 15       	cp	r22, r1
     71c:	71 05       	cpc	r23, r1
     71e:	49 f6       	brne	.-110    	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0x28>
     720:	44 23       	and	r20, r20
     722:	39 f6       	brne	.-114    	; 0x6b2 <Endpoint_Write_Control_PStream_LE+0x28>
     724:	05 c0       	rjmp	.+10     	; 0x730 <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     726:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     728:	88 23       	and	r24, r24
     72a:	61 f0       	breq	.+24     	; 0x744 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     72c:	85 30       	cpi	r24, 0x05	; 5
     72e:	61 f0       	breq	.+24     	; 0x748 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     730:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     734:	82 ff       	sbrs	r24, 2
     736:	f7 cf       	rjmp	.-18     	; 0x726 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     748:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     74a:	08 95       	ret

0000074c <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     74c:	98 2f       	mov	r25, r24
     74e:	2a c0       	rjmp	.+84     	; 0x7a4 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     750:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     754:	98 17       	cp	r25, r24
     756:	39 f0       	breq	.+14     	; 0x766 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     758:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     75c:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     760:	50 91 f0 00 	lds	r21, 0x00F0
     764:	03 c0       	rjmp	.+6      	; 0x76c <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     766:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     768:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     76a:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     76c:	21 ff       	sbrs	r18, 1
     76e:	19 c0       	rjmp	.+50     	; 0x7a2 <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     770:	30 91 eb 00 	lds	r19, 0x00EB
     774:	3e 7f       	andi	r19, 0xFE	; 254
     776:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     77a:	30 91 ed 00 	lds	r19, 0x00ED
     77e:	3d 7f       	andi	r19, 0xFD	; 253
     780:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     784:	30 91 eb 00 	lds	r19, 0x00EB
     788:	31 60       	ori	r19, 0x01	; 1
     78a:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     78e:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     792:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     796:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     79a:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     79e:	27 ff       	sbrs	r18, 7
     7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     7a2:	9f 5f       	subi	r25, 0xFF	; 255
     7a4:	97 30       	cpi	r25, 0x07	; 7
     7a6:	a0 f2       	brcs	.-88     	; 0x750 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7a8:	8f 70       	andi	r24, 0x0F	; 15
     7aa:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     7b2:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     7b4:	08 95       	ret

000007b6 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     7c0:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	2a c0       	rjmp	.+84     	; 0x81a <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     7c6:	98 81       	ld	r25, Y
     7c8:	99 23       	and	r25, r25
     7ca:	29 f1       	breq	.+74     	; 0x816 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     7cc:	6b 81       	ldd	r22, Y+3	; 0x03
     7ce:	e9 81       	ldd	r30, Y+1	; 0x01
     7d0:	fa 81       	ldd	r31, Y+2	; 0x02
     7d2:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     7d4:	89 2f       	mov	r24, r25
     7d6:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     7d8:	87 30       	cpi	r24, 0x07	; 7
     7da:	18 f5       	brcc	.+70     	; 0x822 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     7dc:	62 95       	swap	r22
     7de:	66 0f       	add	r22, r22
     7e0:	66 0f       	add	r22, r22
     7e2:	60 7c       	andi	r22, 0xC0	; 192
     7e4:	99 1f       	adc	r25, r25
     7e6:	99 27       	eor	r25, r25
     7e8:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7ea:	69 2b       	or	r22, r25
     7ec:	22 30       	cpi	r18, 0x02	; 2
     7ee:	10 f0       	brcs	.+4      	; 0x7f4 <Endpoint_ConfigureEndpointTable+0x3e>
     7f0:	96 e0       	ldi	r25, 0x06	; 6
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <Endpoint_ConfigureEndpointTable+0x40>
     7f4:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     7f6:	28 e0       	ldi	r18, 0x08	; 8
     7f8:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     7fe:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     800:	22 0f       	add	r18, r18
     802:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     804:	2e 17       	cp	r18, r30
     806:	3f 07       	cpc	r19, r31
     808:	d0 f3       	brcs	.-12     	; 0x7fe <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     80a:	42 95       	swap	r20
     80c:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     80e:	49 2b       	or	r20, r25
     810:	9d df       	rcall	.-198    	; 0x74c <Endpoint_ConfigureEndpoint_Prv>
     812:	88 23       	and	r24, r24
     814:	31 f0       	breq	.+12     	; 0x822 <Endpoint_ConfigureEndpointTable+0x6c>
     816:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     818:	25 96       	adiw	r28, 0x05	; 5
     81a:	01 17       	cp	r16, r17
     81c:	a1 f6       	brne	.-88     	; 0x7c6 <Endpoint_ConfigureEndpointTable+0x10>
     81e:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     820:	01 c0       	rjmp	.+2      	; 0x824 <Endpoint_ConfigureEndpointTable+0x6e>
     822:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     824:	df 91       	pop	r29
	}
	
	return true;
}
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	08 95       	ret

0000082e <Endpoint_ClearStatusStage>:
     82e:	80 91 c5 02 	lds	r24, 0x02C5
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     832:	87 ff       	sbrs	r24, 7
     834:	11 c0       	rjmp	.+34     	; 0x858 <Endpoint_ClearStatusStage+0x2a>
     836:	03 c0       	rjmp	.+6      	; 0x83e <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     838:	8e b3       	in	r24, 0x1e	; 30
     83a:	88 23       	and	r24, r24
     83c:	b1 f0       	breq	.+44     	; 0x86a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     83e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     842:	82 ff       	sbrs	r24, 2
     844:	f9 cf       	rjmp	.-14     	; 0x838 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     846:	80 91 e8 00 	lds	r24, 0x00E8
     84a:	8b 77       	andi	r24, 0x7B	; 123
     84c:	80 93 e8 00 	sts	0x00E8, r24
     850:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     852:	8e b3       	in	r24, 0x1e	; 30
     854:	88 23       	and	r24, r24
     856:	49 f0       	breq	.+18     	; 0x86a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     858:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     85c:	80 ff       	sbrs	r24, 0
     85e:	f9 cf       	rjmp	.-14     	; 0x852 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     860:	80 91 e8 00 	lds	r24, 0x00E8
     864:	8e 77       	andi	r24, 0x7E	; 126
     866:	80 93 e8 00 	sts	0x00E8, r24
     86a:	08 95       	ret

0000086c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     86c:	80 91 e4 00 	lds	r24, 0x00E4
     870:	90 91 e5 00 	lds	r25, 0x00E5
     874:	45 e6       	ldi	r20, 0x65	; 101
     876:	01 c0       	rjmp	.+2      	; 0x87a <Endpoint_WaitUntilReady+0xe>
     878:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     87a:	20 91 ec 00 	lds	r18, 0x00EC
     87e:	20 ff       	sbrs	r18, 0
     880:	22 c0       	rjmp	.+68     	; 0x8c6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     882:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     886:	20 fd       	sbrc	r18, 0
     888:	14 c0       	rjmp	.+40     	; 0x8b2 <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     88a:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     88c:	22 23       	and	r18, r18
     88e:	99 f0       	breq	.+38     	; 0x8b6 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     890:	25 30       	cpi	r18, 0x05	; 5
     892:	99 f0       	breq	.+38     	; 0x8ba <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     894:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     898:	25 fd       	sbrc	r18, 5
     89a:	11 c0       	rjmp	.+34     	; 0x8be <Endpoint_WaitUntilReady+0x52>
     89c:	20 91 e4 00 	lds	r18, 0x00E4
     8a0:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     8a4:	28 17       	cp	r18, r24
     8a6:	39 07       	cpc	r19, r25
     8a8:	41 f3       	breq	.-48     	; 0x87a <Endpoint_WaitUntilReady+0xe>
     8aa:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     8ac:	29 f7       	brne	.-54     	; 0x878 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     8ae:	84 e0       	ldi	r24, 0x04	; 4
     8b0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     8b6:	82 e0       	ldi	r24, 0x02	; 2
     8b8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     8c2:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     8c4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8c6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     8ca:	22 ff       	sbrs	r18, 2
     8cc:	de cf       	rjmp	.-68     	; 0x88a <Endpoint_WaitUntilReady+0x1e>
     8ce:	f9 cf       	rjmp	.-14     	; 0x8c2 <Endpoint_WaitUntilReady+0x56>

000008d0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     8d8:	4a d0       	rcall	.+148    	; 0x96e <USB_INT_DisableAllInterrupts>
     8da:	51 d0       	rcall	.+162    	; 0x97e <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     8dc:	c8 ed       	ldi	r28, 0xD8	; 216
     8de:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     8e0:	88 81       	ld	r24, Y
     8e2:	8f 77       	andi	r24, 0x7F	; 127
     8e4:	88 83       	st	Y, r24
     8e6:	88 81       	ld	r24, Y
     8e8:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     8ea:	88 83       	st	Y, r24
     8ec:	88 81       	ld	r24, Y
     8ee:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8f0:	88 83       	st	Y, r24
     8f2:	19 bc       	out	0x29, r1	; 41
     8f4:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8f6:	10 92 c1 02 	sts	0x02C1, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     8fa:	10 92 c3 02 	sts	0x02C3, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     8fe:	10 92 c2 02 	sts	0x02C2, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     902:	00 ee       	ldi	r16, 0xE0	; 224
     904:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     906:	f8 01       	movw	r30, r16
     908:	80 81       	ld	r24, Z
     90a:	8b 7f       	andi	r24, 0xFB	; 251
     90c:	80 83       	st	Z, r24
     90e:	88 81       	ld	r24, Y
     910:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     912:	88 83       	st	Y, r24
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     918:	42 e0       	ldi	r20, 0x02	; 2
     91a:	18 df       	rcall	.-464    	; 0x74c <Endpoint_ConfigureEndpoint_Prv>
     91c:	e1 ee       	ldi	r30, 0xE1	; 225
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     922:	8e 7f       	andi	r24, 0xFE	; 254
     924:	80 83       	st	Z, r24
     926:	e2 ee       	ldi	r30, 0xE2	; 226
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     92c:	81 60       	ori	r24, 0x01	; 1
     92e:	80 83       	st	Z, r24
     930:	80 81       	ld	r24, Z
     932:	88 60       	ori	r24, 0x08	; 8
     934:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     936:	f8 01       	movw	r30, r16
     938:	80 81       	ld	r24, Z
     93a:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     93c:	80 83       	st	Z, r24
     93e:	88 81       	ld	r24, Y
     940:	80 61       	ori	r24, 0x10	; 16
     942:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <USB_Init>:
     94e:	e8 ed       	ldi	r30, 0xD8	; 216
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     954:	8f 7e       	andi	r24, 0xEF	; 239
     956:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     958:	e7 ed       	ldi	r30, 0xD7	; 215
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	81 60       	ori	r24, 0x01	; 1
     960:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 c4 02 	sts	0x02C4, r24

	USB_ResetInterface();
     96c:	b1 cf       	rjmp	.-158    	; 0x8d0 <USB_ResetInterface>

0000096e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     96e:	e8 ed       	ldi	r30, 0xD8	; 216
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	80 81       	ld	r24, Z
     974:	8e 7f       	andi	r24, 0xFE	; 254
     976:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     978:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     97c:	08 95       	ret

0000097e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     97e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     982:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     986:	08 95       	ret

00000988 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     988:	1f 92       	push	r1
     98a:	0f 92       	push	r0
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	0f 92       	push	r0
     990:	11 24       	eor	r1, r1
     992:	2f 93       	push	r18
     994:	3f 93       	push	r19
     996:	4f 93       	push	r20
     998:	5f 93       	push	r21
     99a:	6f 93       	push	r22
     99c:	7f 93       	push	r23
     99e:	8f 93       	push	r24
     9a0:	9f 93       	push	r25
     9a2:	af 93       	push	r26
     9a4:	bf 93       	push	r27
     9a6:	ef 93       	push	r30
     9a8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     9aa:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     9ae:	82 ff       	sbrs	r24, 2
     9b0:	0a c0       	rjmp	.+20     	; 0x9c6 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     9b2:	80 91 e2 00 	lds	r24, 0x00E2
     9b6:	82 ff       	sbrs	r24, 2
     9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     9ba:	80 91 e1 00 	lds	r24, 0x00E1
     9be:	8b 7f       	andi	r24, 0xFB	; 251
     9c0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     9c4:	44 d2       	rcall	.+1160   	; 0xe4e <USB_Event_Stub>
     9c6:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     9ca:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     9cc:	1b c0       	rjmp	.+54     	; 0xa04 <__vector_10+0x7c>
     9ce:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     9d2:	80 ff       	sbrs	r24, 0
     9d4:	17 c0       	rjmp	.+46     	; 0xa04 <__vector_10+0x7c>
     9d6:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	80 93 da 00 	sts	0x00DA, r24
     9e0:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     9e4:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     9e6:	0b c0       	rjmp	.+22     	; 0x9fe <__vector_10+0x76>
     9e8:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9ea:	89 bd       	out	0x29, r24	; 41
     9ec:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9ee:	89 bd       	out	0x29, r24	; 41
     9f0:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     9f2:	00 fe       	sbrs	r0, 0
     9f4:	fd cf       	rjmp	.-6      	; 0x9f0 <__vector_10+0x68>
     9f6:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     9f8:	8e bb       	out	0x1e, r24	; 30
     9fa:	c4 dc       	rcall	.-1656   	; 0x384 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     9fc:	03 c0       	rjmp	.+6      	; 0xa04 <__vector_10+0x7c>
     9fe:	19 bc       	out	0x29, r1	; 41
     a00:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a02:	c2 dc       	rcall	.-1660   	; 0x388 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     a04:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     a08:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     a0a:	17 c0       	rjmp	.+46     	; 0xa3a <__vector_10+0xb2>
     a0c:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     a10:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     a12:	13 c0       	rjmp	.+38     	; 0xa3a <__vector_10+0xb2>
     a14:	80 91 e2 00 	lds	r24, 0x00E2
     a18:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a1a:	80 93 e2 00 	sts	0x00E2, r24
     a1e:	80 91 e2 00 	lds	r24, 0x00E2
     a22:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a24:	80 93 e2 00 	sts	0x00E2, r24
     a28:	80 91 d8 00 	lds	r24, 0x00D8
     a2c:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     a2e:	80 93 d8 00 	sts	0x00D8, r24
     a32:	19 bc       	out	0x29, r1	; 41
     a34:	85 e0       	ldi	r24, 0x05	; 5
     a36:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a38:	0a d2       	rcall	.+1044   	; 0xe4e <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     a3a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     a3e:	84 ff       	sbrs	r24, 4
     a40:	2c c0       	rjmp	.+88     	; 0xa9a <__vector_10+0x112>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     a42:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     a46:	84 ff       	sbrs	r24, 4
     a48:	28 c0       	rjmp	.+80     	; 0xa9a <__vector_10+0x112>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     a4a:	80 e1       	ldi	r24, 0x10	; 16
     a4c:	89 bd       	out	0x29, r24	; 41
     a4e:	82 e1       	ldi	r24, 0x12	; 18
     a50:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a52:	09 b4       	in	r0, 0x29	; 41
     a54:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a56:	fd cf       	rjmp	.-6      	; 0xa52 <__vector_10+0xca>
     a58:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a5c:	8f 7d       	andi	r24, 0xDF	; 223
     a5e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a62:	80 91 e1 00 	lds	r24, 0x00E1
     a66:	8f 7e       	andi	r24, 0xEF	; 239
     a68:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a6c:	80 91 e2 00 	lds	r24, 0x00E2
     a70:	8f 7e       	andi	r24, 0xEF	; 239
     a72:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a76:	80 91 e2 00 	lds	r24, 0x00E2
     a7a:	81 60       	ori	r24, 0x01	; 1
     a7c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a80:	80 91 c1 02 	lds	r24, 0x02C1
     a84:	88 23       	and	r24, r24
     a86:	21 f4       	brne	.+8      	; 0xa90 <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a88:	80 91 e3 00 	lds	r24, 0x00E3
     a8c:	87 ff       	sbrs	r24, 7
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a90:	84 e0       	ldi	r24, 0x04	; 4
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	8e bb       	out	0x1e, r24	; 30
     a98:	da d1       	rcall	.+948    	; 0xe4e <USB_Event_Stub>
     a9a:	80 91 e1 00 	lds	r24, 0x00E1
     a9e:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     aa0:	26 c0       	rjmp	.+76     	; 0xaee <__vector_10+0x166>
     aa2:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     aa6:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     aa8:	22 c0       	rjmp	.+68     	; 0xaee <__vector_10+0x166>
     aaa:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     aae:	87 7f       	andi	r24, 0xF7	; 247
     ab0:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	8e bb       	out	0x1e, r24	; 30
     ab8:	10 92 c1 02 	sts	0x02C1, r1
     abc:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     ac0:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     ac2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ac6:	80 91 e2 00 	lds	r24, 0x00E2
     aca:	8e 7f       	andi	r24, 0xFE	; 254
     acc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ad0:	80 91 e2 00 	lds	r24, 0x00E2
     ad4:	80 61       	ori	r24, 0x10	; 16
     ad6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	42 e0       	ldi	r20, 0x02	; 2
     ae0:	35 de       	rcall	.-918    	; 0x74c <Endpoint_ConfigureEndpoint_Prv>
     ae2:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ae6:	88 60       	ori	r24, 0x08	; 8
     ae8:	80 93 f0 00 	sts	0x00F0, r24
     aec:	b0 d1       	rcall	.+864    	; 0xe4e <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     aee:	ff 91       	pop	r31
     af0:	ef 91       	pop	r30
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     af8:	8f 91       	pop	r24
     afa:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     afc:	6f 91       	pop	r22
     afe:	5f 91       	pop	r21
     b00:	4f 91       	pop	r20
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_11>:
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	2f 93       	push	r18
     b1c:	3f 93       	push	r19

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     b1e:	4f 93       	push	r20
     b20:	5f 93       	push	r21
     b22:	6f 93       	push	r22
     b24:	7f 93       	push	r23
     b26:	8f 93       	push	r24
     b28:	9f 93       	push	r25
     b2a:	af 93       	push	r26
     b2c:	bf 93       	push	r27
     b2e:	cf 93       	push	r28
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b34:	c0 91 e9 00 	lds	r28, 0x00E9
     b38:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b3a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b3e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     b42:	80 91 f0 00 	lds	r24, 0x00F0
     b46:	87 7f       	andi	r24, 0xF7	; 247
     b48:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     b4c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     b4e:	1b d0       	rcall	.+54     	; 0xb86 <USB_Device_ProcessControlRequest>
     b50:	10 92 e9 00 	sts	0x00E9, r1
     b54:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	80 93 f0 00 	sts	0x00F0, r24
     b5e:	c0 93 e9 00 	sts	0x00E9, r28
     b62:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     b64:	ef 91       	pop	r30
     b66:	cf 91       	pop	r28
     b68:	bf 91       	pop	r27
     b6a:	af 91       	pop	r26
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	7f 91       	pop	r23
     b72:	6f 91       	pop	r22
     b74:	5f 91       	pop	r21
     b76:	4f 91       	pop	r20
     b78:	3f 91       	pop	r19
     b7a:	2f 91       	pop	r18
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	ac 97       	sbiw	r28, 0x2c	; 44
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b9c:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     b9e:	e5 ec       	ldi	r30, 0xC5	; 197
     ba0:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     ba2:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     ba6:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     ba8:	8f 5f       	subi	r24, 0xFF	; 255
     baa:	88 30       	cpi	r24, 0x08	; 8
     bac:	d1 f7       	brne	.-12     	; 0xba2 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     bae:	f7 db       	rcall	.-2066   	; 0x39e <EVENT_USB_Device_ControlRequest>
     bb0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bb4:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     bb6:	33 c1       	rjmp	.+614    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     bb8:	80 91 c5 02 	lds	r24, 0x02C5
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     bbc:	20 91 c6 02 	lds	r18, 0x02C6

		switch (USB_ControlRequest.bRequest)
     bc0:	25 30       	cpi	r18, 0x05	; 5
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <USB_Device_ProcessControlRequest+0x40>
     bc4:	84 c0       	rjmp	.+264    	; 0xcce <USB_Device_ProcessControlRequest+0x148>
     bc6:	26 30       	cpi	r18, 0x06	; 6
     bc8:	40 f4       	brcc	.+16     	; 0xbda <USB_Device_ProcessControlRequest+0x54>
     bca:	21 30       	cpi	r18, 0x01	; 1
     bcc:	a1 f1       	breq	.+104    	; 0xc36 <USB_Device_ProcessControlRequest+0xb0>
     bce:	21 30       	cpi	r18, 0x01	; 1
     bd0:	70 f0       	brcs	.+28     	; 0xbee <USB_Device_ProcessControlRequest+0x68>
     bd2:	23 30       	cpi	r18, 0x03	; 3
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <USB_Device_ProcessControlRequest+0x52>
     bd6:	23 c1       	rjmp	.+582    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     bd8:	2e c0       	rjmp	.+92     	; 0xc36 <USB_Device_ProcessControlRequest+0xb0>
     bda:	28 30       	cpi	r18, 0x08	; 8
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0x5a>
     bde:	f2 c0       	rjmp	.+484    	; 0xdc4 <USB_Device_ProcessControlRequest+0x23e>
     be0:	29 30       	cpi	r18, 0x09	; 9
     be2:	09 f4       	brne	.+2      	; 0xbe6 <USB_Device_ProcessControlRequest+0x60>
     be4:	01 c1       	rjmp	.+514    	; 0xde8 <USB_Device_ProcessControlRequest+0x262>
     be6:	26 30       	cpi	r18, 0x06	; 6
     be8:	09 f0       	breq	.+2      	; 0xbec <USB_Device_ProcessControlRequest+0x66>
     bea:	19 c1       	rjmp	.+562    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     bec:	92 c0       	rjmp	.+292    	; 0xd12 <USB_Device_ProcessControlRequest+0x18c>
     bee:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bf0:	21 f0       	breq	.+8      	; 0xbfa <USB_Device_ProcessControlRequest+0x74>
     bf2:	82 38       	cpi	r24, 0x82	; 130
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <USB_Device_ProcessControlRequest+0x72>
     bf6:	13 c1       	rjmp	.+550    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     bf8:	08 c0       	rjmp	.+16     	; 0xc0a <USB_Device_ProcessControlRequest+0x84>
     bfa:	80 91 c2 02 	lds	r24, 0x02C2
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     bfe:	90 91 c3 02 	lds	r25, 0x02C3
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c02:	99 23       	and	r25, r25
     c04:	71 f0       	breq	.+28     	; 0xc22 <USB_Device_ProcessControlRequest+0x9c>
     c06:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     c08:	0c c0       	rjmp	.+24     	; 0xc22 <USB_Device_ProcessControlRequest+0x9c>
     c0a:	80 91 c9 02 	lds	r24, 0x02C9
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c0e:	8f 70       	andi	r24, 0x0F	; 15
     c10:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c14:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c18:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     c1a:	95 ff       	sbrs	r25, 5
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c22:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c26:	97 7f       	andi	r25, 0xF7	; 247
     c28:	90 93 e8 00 	sts	0x00E8, r25
     c2c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c30:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     c34:	d2 c0       	rjmp	.+420    	; 0xdda <USB_Device_ProcessControlRequest+0x254>
     c36:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c38:	19 f0       	breq	.+6      	; 0xc40 <USB_Device_ProcessControlRequest+0xba>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	09 f0       	breq	.+2      	; 0xc40 <USB_Device_ProcessControlRequest+0xba>
     c3e:	ef c0       	rjmp	.+478    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     c40:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c42:	8f 71       	andi	r24, 0x1F	; 31
     c44:	90 70       	andi	r25, 0x00	; 0
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	29 f0       	breq	.+10     	; 0xc54 <USB_Device_ProcessControlRequest+0xce>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	91 05       	cpc	r25, r1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <USB_Device_ProcessControlRequest+0xcc>
     c50:	e6 c0       	rjmp	.+460    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <USB_Device_ProcessControlRequest+0xe4>
     c54:	80 91 c7 02 	lds	r24, 0x02C7
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	09 f0       	breq	.+2      	; 0xc5e <USB_Device_ProcessControlRequest+0xd8>
     c5c:	e0 c0       	rjmp	.+448    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     c5e:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c60:	09 f0       	breq	.+2      	; 0xc64 <USB_Device_ProcessControlRequest+0xde>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	80 93 c3 02 	sts	0x02C3, r24
     c68:	2c c0       	rjmp	.+88     	; 0xcc2 <USB_Device_ProcessControlRequest+0x13c>
     c6a:	80 91 c7 02 	lds	r24, 0x02C7

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c6e:	88 23       	and	r24, r24
     c70:	41 f5       	brne	.+80     	; 0xcc2 <USB_Device_ProcessControlRequest+0x13c>
     c72:	20 91 c9 02 	lds	r18, 0x02C9
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c76:	2f 70       	andi	r18, 0x0F	; 15
     c78:	09 f4       	brne	.+2      	; 0xc7c <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c7a:	d1 c0       	rjmp	.+418    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     c7c:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c80:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c84:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c86:	1d c0       	rjmp	.+58     	; 0xcc2 <USB_Device_ProcessControlRequest+0x13c>
     c88:	80 91 c6 02 	lds	r24, 0x02C6
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c8c:	83 30       	cpi	r24, 0x03	; 3
     c8e:	21 f4       	brne	.+8      	; 0xc98 <USB_Device_ProcessControlRequest+0x112>
     c90:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c94:	80 62       	ori	r24, 0x20	; 32
     c96:	13 c0       	rjmp	.+38     	; 0xcbe <USB_Device_ProcessControlRequest+0x138>
     c98:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c9c:	80 61       	ori	r24, 0x10	; 16
     c9e:	80 93 eb 00 	sts	0x00EB, r24
     ca2:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <USB_Device_ProcessControlRequest+0x126>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	2a 95       	dec	r18
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <USB_Device_ProcessControlRequest+0x122>
     cb0:	80 93 ea 00 	sts	0x00EA, r24
     cb4:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     cb8:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cbc:	88 60       	ori	r24, 0x08	; 8
     cbe:	80 93 eb 00 	sts	0x00EB, r24
     cc2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cc6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	89 c0       	rjmp	.+274    	; 0xde0 <USB_Device_ProcessControlRequest+0x25a>
     cce:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <USB_Device_ProcessControlRequest+0x14e>
     cd2:	a5 c0       	rjmp	.+330    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     cd4:	10 91 c7 02 	lds	r17, 0x02C7
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     cd8:	1f 77       	andi	r17, 0x7F	; 127
     cda:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     cde:	80 78       	andi	r24, 0x80	; 128
     ce0:	81 2b       	or	r24, r17
     ce2:	80 93 e3 00 	sts	0x00E3, r24
     ce6:	80 91 e8 00 	lds	r24, 0x00E8
     cea:	87 7f       	andi	r24, 0xF7	; 247
     cec:	80 93 e8 00 	sts	0x00E8, r24
     cf0:	9e dd       	rcall	.-1220   	; 0x82e <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     cf2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cf6:	80 ff       	sbrs	r24, 0
     cf8:	fc cf       	rjmp	.-8      	; 0xcf2 <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     cfa:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	80 93 e3 00 	sts	0x00E3, r24
     d04:	11 23       	and	r17, r17
     d06:	11 f0       	breq	.+4      	; 0xd0c <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d08:	83 e0       	ldi	r24, 0x03	; 3
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <USB_Device_ProcessControlRequest+0x188>
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	8e bb       	out	0x1e, r24	; 30
     d10:	86 c0       	rjmp	.+268    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     d12:	80 58       	subi	r24, 0x80	; 128
     d14:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d16:	08 f0       	brcs	.+2      	; 0xd1a <USB_Device_ProcessControlRequest+0x194>
     d18:	82 c0       	rjmp	.+260    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     d1a:	80 91 c7 02 	lds	r24, 0x02C7
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d1e:	90 91 c8 02 	lds	r25, 0x02C8
     d22:	23 e0       	ldi	r18, 0x03	; 3
     d24:	8c 3d       	cpi	r24, 0xDC	; 220
     d26:	92 07       	cpc	r25, r18
     d28:	a9 f5       	brne	.+106    	; 0xd94 <USB_Device_ProcessControlRequest+0x20e>
     d2a:	83 e0       	ldi	r24, 0x03	; 3
     d2c:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d2e:	8a e2       	ldi	r24, 0x2A	; 42
     d30:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d32:	5f b7       	in	r21, 0x3f	; 63
     d34:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d36:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d38:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	4e e0       	ldi	r20, 0x0E	; 14
     d40:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d42:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	60 93 57 00 	sts	0x0057, r22
     d4a:	e4 91       	lpm	r30, Z
     d4c:	80 ff       	sbrs	r24, 0
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <USB_Device_ProcessControlRequest+0x1d0>

					if (SerialCharNum & 0x01)
     d50:	e2 95       	swap	r30
     d52:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     d54:	4f 5f       	subi	r20, 0xFF	; 255
     d56:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     d58:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	ea 30       	cpi	r30, 0x0A	; 10
     d5e:	18 f0       	brcs	.+6      	; 0xd66 <USB_Device_ProcessControlRequest+0x1e0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d60:	29 5c       	subi	r18, 0xC9	; 201
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <USB_Device_ProcessControlRequest+0x1e4>
     d66:	20 5d       	subi	r18, 0xD0	; 208
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	13 96       	adiw	r26, 0x03	; 3
     d6c:	3c 93       	st	X, r19
     d6e:	2e 93       	st	-X, r18
     d70:	12 97       	sbiw	r26, 0x02	; 2
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	12 96       	adiw	r26, 0x02	; 2
     d76:	84 31       	cpi	r24, 0x14	; 20
     d78:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d7a:	19 f7       	brne	.-58     	; 0xd42 <USB_Device_ProcessControlRequest+0x1bc>
     d7c:	5f bf       	out	0x3f, r21	; 63
     d7e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	80 93 e8 00 	sts	0x00E8, r24
     d88:	ce 01       	movw	r24, r28
     d8a:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d8c:	6a e2       	ldi	r22, 0x2A	; 42
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	1d dc       	rcall	.-1990   	; 0x5cc <Endpoint_Write_Control_Stream_LE>
     d92:	12 c0       	rjmp	.+36     	; 0xdb8 <USB_Device_ProcessControlRequest+0x232>
     d94:	60 91 c9 02 	lds	r22, 0x02C9
     d98:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d9a:	4f 5f       	subi	r20, 0xFF	; 255
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	9b db       	rcall	.-2250   	; 0x4d6 <CALLBACK_USB_GetDescriptor>
     da0:	bc 01       	movw	r22, r24
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	09 f4       	brne	.+2      	; 0xda8 <USB_Device_ProcessControlRequest+0x222>
     da6:	3b c0       	rjmp	.+118    	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     da8:	80 91 e8 00 	lds	r24, 0x00E8
     dac:	87 7f       	andi	r24, 0xF7	; 247
     dae:	80 93 e8 00 	sts	0x00E8, r24
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	69 dc       	rcall	.-1838   	; 0x68a <Endpoint_Write_Control_PStream_LE>
     db8:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     dbc:	8b 77       	andi	r24, 0x7B	; 123
     dbe:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dc2:	2d c0       	rjmp	.+90     	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     dc4:	80 38       	cpi	r24, 0x80	; 128
     dc6:	59 f5       	brne	.+86     	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     dc8:	80 91 e8 00 	lds	r24, 0x00E8
     dcc:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     dce:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dd2:	80 91 c1 02 	lds	r24, 0x02C1
     dd6:	80 93 f1 00 	sts	0x00F1, r24
     dda:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     dde:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     de0:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     de4:	24 dd       	rcall	.-1464   	; 0x82e <Endpoint_ClearStatusStage>
     de6:	1b c0       	rjmp	.+54     	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     de8:	88 23       	and	r24, r24
     dea:	c9 f4       	brne	.+50     	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
     dec:	90 91 c7 02 	lds	r25, 0x02C7
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     df0:	92 30       	cpi	r25, 0x02	; 2
     df2:	a8 f4       	brcc	.+42     	; 0xe1e <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     df4:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     df8:	87 7f       	andi	r24, 0xF7	; 247
     dfa:	80 93 e8 00 	sts	0x00E8, r24
     dfe:	90 93 c1 02 	sts	0x02C1, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e02:	15 dd       	rcall	.-1494   	; 0x82e <Endpoint_ClearStatusStage>
     e04:	80 91 c1 02 	lds	r24, 0x02C1
     e08:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e0a:	21 f4       	brne	.+8      	; 0xe14 <USB_Device_ProcessControlRequest+0x28e>
     e0c:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     e10:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <USB_Device_ProcessControlRequest+0x292>
     e14:	84 e0       	ldi	r24, 0x04	; 4
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <USB_Device_ProcessControlRequest+0x294>
     e18:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e1a:	8e bb       	out	0x1e, r24	; 30
     e1c:	b7 da       	rcall	.-2706   	; 0x38c <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e1e:	80 91 e8 00 	lds	r24, 0x00E8
     e22:	83 ff       	sbrs	r24, 3
     e24:	0a c0       	rjmp	.+20     	; 0xe3a <USB_Device_ProcessControlRequest+0x2b4>
     e26:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     e2a:	87 7f       	andi	r24, 0xF7	; 247
     e2c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e30:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e34:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e36:	80 93 eb 00 	sts	0x00EB, r24
     e3a:	ac 96       	adiw	r28, 0x2c	; 44
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     e4a:	1f 91       	pop	r17
     e4c:	08 95       	ret

00000e4e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e4e:	08 95       	ret

00000e50 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e50:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e52:	8e b3       	in	r24, 0x1e	; 30
     e54:	88 23       	and	r24, r24
     e56:	a9 f0       	breq	.+42     	; 0xe82 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e58:	80 91 e9 00 	lds	r24, 0x00E9
     e5c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e5e:	90 91 ec 00 	lds	r25, 0x00EC
     e62:	90 ff       	sbrs	r25, 0
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <USB_USBTask+0x1a>
     e66:	c0 e8       	ldi	r28, 0x80	; 128
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <USB_USBTask+0x1c>
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e6c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e6e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e72:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e76:	83 ff       	sbrs	r24, 3
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     e7a:	85 de       	rcall	.-758    	; 0xb86 <USB_Device_ProcessControlRequest>
     e7c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e7e:	c0 93 e9 00 	sts	0x00E9, r28
     e82:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e84:	08 95       	ret

00000e86 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e8c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e90:	83 ff       	sbrs	r24, 3
     e92:	a2 c0       	rjmp	.+324    	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e94:	88 81       	ld	r24, Y
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	20 91 c9 02 	lds	r18, 0x02C9
     e9c:	30 91 ca 02 	lds	r19, 0x02CA
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	09 f0       	breq	.+2      	; 0xea8 <CDC_Device_ProcessControlRequest+0x22>
     ea6:	98 c0       	rjmp	.+304    	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     ea8:	80 91 c6 02 	lds	r24, 0x02C6
     eac:	81 32       	cpi	r24, 0x21	; 33
     eae:	69 f0       	breq	.+26     	; 0xeca <CDC_Device_ProcessControlRequest+0x44>
     eb0:	82 32       	cpi	r24, 0x22	; 34
     eb2:	20 f4       	brcc	.+8      	; 0xebc <CDC_Device_ProcessControlRequest+0x36>
     eb4:	80 32       	cpi	r24, 0x20	; 32
     eb6:	09 f0       	breq	.+2      	; 0xeba <CDC_Device_ProcessControlRequest+0x34>
     eb8:	8f c0       	rjmp	.+286    	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
     eba:	3c c0       	rjmp	.+120    	; 0xf34 <CDC_Device_ProcessControlRequest+0xae>
     ebc:	82 32       	cpi	r24, 0x22	; 34
     ebe:	09 f4       	brne	.+2      	; 0xec2 <CDC_Device_ProcessControlRequest+0x3c>
     ec0:	6a c0       	rjmp	.+212    	; 0xf96 <CDC_Device_ProcessControlRequest+0x110>
     ec2:	83 32       	cpi	r24, 0x23	; 35
     ec4:	09 f0       	breq	.+2      	; 0xec8 <CDC_Device_ProcessControlRequest+0x42>
     ec6:	88 c0       	rjmp	.+272    	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
     ec8:	79 c0       	rjmp	.+242    	; 0xfbc <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     eca:	80 91 c5 02 	lds	r24, 0x02C5
     ece:	81 3a       	cpi	r24, 0xA1	; 161
     ed0:	09 f0       	breq	.+2      	; 0xed4 <CDC_Device_ProcessControlRequest+0x4e>
     ed2:	82 c0       	rjmp	.+260    	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ed4:	80 91 e8 00 	lds	r24, 0x00E8
     ed8:	87 7f       	andi	r24, 0xF7	; 247
     eda:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ede:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     ee2:	80 ff       	sbrs	r24, 0
     ee4:	fc cf       	rjmp	.-8      	; 0xede <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     ee6:	8c 89       	ldd	r24, Y+20	; 0x14
     ee8:	9d 89       	ldd	r25, Y+21	; 0x15
     eea:	ae 89       	ldd	r26, Y+22	; 0x16
     eec:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     eee:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ef2:	49 2f       	mov	r20, r25
     ef4:	5a 2f       	mov	r21, r26
     ef6:	6b 2f       	mov	r22, r27
     ef8:	77 27       	eor	r23, r23
     efa:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
     efe:	ad 01       	movw	r20, r26
     f00:	66 27       	eor	r22, r22
     f02:	77 27       	eor	r23, r23
     f04:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
     f08:	8b 2f       	mov	r24, r27
     f0a:	99 27       	eor	r25, r25
     f0c:	aa 27       	eor	r26, r26
     f0e:	bb 27       	eor	r27, r27
     f10:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     f14:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f16:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     f1a:	89 8d       	ldd	r24, Y+25	; 0x19
     f1c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     f20:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f22:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f26:	80 91 e8 00 	lds	r24, 0x00E8
     f2a:	8e 77       	andi	r24, 0x7E	; 126
     f2c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f30:	7e dc       	rcall	.-1796   	; 0x82e <Endpoint_ClearStatusStage>
     f32:	52 c0       	rjmp	.+164    	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
     f34:	80 91 c5 02 	lds	r24, 0x02C5
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f38:	81 32       	cpi	r24, 0x21	; 33
     f3a:	09 f0       	breq	.+2      	; 0xf3e <CDC_Device_ProcessControlRequest+0xb8>
     f3c:	4d c0       	rjmp	.+154    	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
     f3e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f42:	87 7f       	andi	r24, 0xF7	; 247
     f44:	80 93 e8 00 	sts	0x00E8, r24
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <CDC_Device_ProcessControlRequest+0xcc>
     f4a:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     f4c:	88 23       	and	r24, r24
     f4e:	09 f4       	brne	.+2      	; 0xf52 <CDC_Device_ProcessControlRequest+0xcc>
     f50:	43 c0       	rjmp	.+134    	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
     f52:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f56:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     f58:	f8 cf       	rjmp	.-16     	; 0xf4a <CDC_Device_ProcessControlRequest+0xc4>
     f5a:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     f5e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     f62:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     f66:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     f6a:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f6c:	2d 8b       	std	Y+21, r18	; 0x15
     f6e:	9e 8b       	std	Y+22, r25	; 0x16
     f70:	8f 8b       	std	Y+23, r24	; 0x17
     f72:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f76:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f78:	80 91 f1 00 	lds	r24, 0x00F1
     f7c:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f7e:	80 91 f1 00 	lds	r24, 0x00F1
     f82:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f84:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f88:	8b 77       	andi	r24, 0x7B	; 123
     f8a:	80 93 e8 00 	sts	0x00E8, r24
     f8e:	4f dc       	rcall	.-1890   	; 0x82e <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f90:	ce 01       	movw	r24, r28
     f92:	5e da       	rcall	.-2884   	; 0x450 <EVENT_CDC_Device_LineEncodingChanged>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f94:	21 c0       	rjmp	.+66     	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
     f96:	80 91 c5 02 	lds	r24, 0x02C5
     f9a:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f9c:	e9 f4       	brne	.+58     	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
     f9e:	80 91 e8 00 	lds	r24, 0x00E8
     fa2:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fa4:	80 93 e8 00 	sts	0x00E8, r24
     fa8:	42 dc       	rcall	.-1916   	; 0x82e <Endpoint_ClearStatusStage>
     faa:	80 91 c7 02 	lds	r24, 0x02C7
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fae:	90 91 c8 02 	lds	r25, 0x02C8

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     fb2:	99 8b       	std	Y+17, r25	; 0x11
     fb4:	88 8b       	std	Y+16, r24	; 0x10
     fb6:	ce 01       	movw	r24, r28
     fb8:	66 d1       	rcall	.+716    	; 0x1286 <CDC_Device_Event_Stub>
     fba:	0e c0       	rjmp	.+28     	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
     fbc:	80 91 c5 02 	lds	r24, 0x02C5

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     fc0:	81 32       	cpi	r24, 0x21	; 33
     fc2:	51 f4       	brne	.+20     	; 0xfd8 <CDC_Device_ProcessControlRequest+0x152>
     fc4:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fc8:	87 7f       	andi	r24, 0xF7	; 247
     fca:	80 93 e8 00 	sts	0x00E8, r24
     fce:	2f dc       	rcall	.-1954   	; 0x82e <Endpoint_ClearStatusStage>
     fd0:	ce 01       	movw	r24, r28
     fd2:	60 91 c7 02 	lds	r22, 0x02C7
     fd6:	57 d1       	rcall	.+686    	; 0x1286 <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     fdc:	08 95       	ret

00000fde <CDC_Device_ConfigureEndpoints>:
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	ec 01       	movw	r28, r24
     fe4:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
     fe6:	fc 01       	movw	r30, r24
     fe8:	8b e0       	ldi	r24, 0x0B	; 11
     fea:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     fec:	1d 92       	st	X+, r1
     fee:	8a 95       	dec	r24
     ff0:	e9 f7       	brne	.-6      	; 0xfec <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     ff6:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	d9 db       	rcall	.-2126   	; 0x7b6 <Endpoint_ConfigureEndpointTable>
    1004:	88 23       	and	r24, r24
    1006:	59 f0       	breq	.+22     	; 0x101e <CDC_Device_ConfigureEndpoints+0x40>
    1008:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    100a:	06 96       	adiw	r24, 0x06	; 6
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	d3 db       	rcall	.-2138   	; 0x7b6 <Endpoint_ConfigureEndpointTable>
    1010:	88 23       	and	r24, r24
    1012:	29 f0       	breq	.+10     	; 0x101e <CDC_Device_ConfigureEndpoints+0x40>
    1014:	ce 01       	movw	r24, r28
    1016:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	cd db       	rcall	.-2150   	; 0x7b6 <Endpoint_ConfigureEndpointTable>
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <CDC_Device_ConfigureEndpoints+0x42>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    1024:	08 95       	ret

00001026 <CDC_Device_SendString>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    1026:	fc 01       	movw	r30, r24
    1028:	cb 01       	movw	r24, r22
    102a:	2e b3       	in	r18, 0x1e	; 30
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    102c:	24 30       	cpi	r18, 0x04	; 4
    102e:	c1 f4       	brne	.+48     	; 0x1060 <CDC_Device_SendString+0x3a>
    1030:	44 89       	ldd	r20, Z+20	; 0x14
    1032:	55 89       	ldd	r21, Z+21	; 0x15
    1034:	66 89       	ldd	r22, Z+22	; 0x16
    1036:	77 89       	ldd	r23, Z+23	; 0x17
    1038:	41 15       	cp	r20, r1
    103a:	51 05       	cpc	r21, r1
    103c:	61 05       	cpc	r22, r1
    103e:	71 05       	cpc	r23, r1
    1040:	89 f0       	breq	.+34     	; 0x1064 <CDC_Device_SendString+0x3e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1042:	21 81       	ldd	r18, Z+1	; 0x01
    1044:	2f 70       	andi	r18, 0x0F	; 15
    1046:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
    104a:	fc 01       	movw	r30, r24
    104c:	01 90       	ld	r0, Z+
    104e:	00 20       	and	r0, r0
    1050:	e9 f7       	brne	.-6      	; 0x104c <CDC_Device_SendString+0x26>
    1052:	31 97       	sbiw	r30, 0x01	; 1
    1054:	e8 1b       	sub	r30, r24
    1056:	f9 0b       	sbc	r31, r25
    1058:	bf 01       	movw	r22, r30
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	67 ca       	rjmp	.-2866   	; 0x52e <Endpoint_Write_Stream_LE>
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	08 95       	ret

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	08 95       	ret

00001068 <CDC_Device_SendByte>:
    1068:	cf 93       	push	r28

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
}
    106a:	fc 01       	movw	r30, r24
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    106c:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    106e:	8e b3       	in	r24, 0x1e	; 30
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	e9 f4       	brne	.+58     	; 0x10ae <CDC_Device_SendByte+0x46>
    1074:	44 89       	ldd	r20, Z+20	; 0x14
    1076:	55 89       	ldd	r21, Z+21	; 0x15
    1078:	66 89       	ldd	r22, Z+22	; 0x16
    107a:	77 89       	ldd	r23, Z+23	; 0x17
    107c:	41 15       	cp	r20, r1
    107e:	51 05       	cpc	r21, r1
    1080:	61 05       	cpc	r22, r1
    1082:	71 05       	cpc	r23, r1
    1084:	a1 f0       	breq	.+40     	; 0x10ae <CDC_Device_SendByte+0x46>
    1086:	81 81       	ldd	r24, Z+1	; 0x01
    1088:	8f 70       	andi	r24, 0x0F	; 15
    108a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    108e:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    1092:	85 fd       	sbrc	r24, 5
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1096:	80 91 e8 00 	lds	r24, 0x00E8
    109a:	8e 77       	andi	r24, 0x7E	; 126
    109c:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    10a0:	e5 db       	rcall	.-2102   	; 0x86c <Endpoint_WaitUntilReady>
    10a2:	88 23       	and	r24, r24
    10a4:	29 f4       	brne	.+10     	; 0x10b0 <CDC_Device_SendByte+0x48>
    10a6:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10aa:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <CDC_Device_SendByte+0x48>
    10ae:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    10b0:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    10b2:	08 95       	ret

000010b4 <CDC_Device_putchar>:
    10b4:	28 2f       	mov	r18, r24
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    10b6:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    10b8:	84 85       	ldd	r24, Z+12	; 0x0c
    10ba:	95 85       	ldd	r25, Z+13	; 0x0d
    10bc:	62 2f       	mov	r22, r18
    10be:	d4 df       	rcall	.-88     	; 0x1068 <CDC_Device_SendByte>
    10c0:	88 23       	and	r24, r24
    10c2:	19 f0       	breq	.+6      	; 0x10ca <CDC_Device_putchar+0x16>
    10c4:	8f ef       	ldi	r24, 0xFF	; 255
    10c6:	9f ef       	ldi	r25, 0xFF	; 255
    10c8:	08 95       	ret
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	08 95       	ret

000010d0 <CDC_Device_Flush>:
}
    10d0:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10d2:	8e b3       	in	r24, 0x1e	; 30
    10d4:	84 30       	cpi	r24, 0x04	; 4
    10d6:	51 f5       	brne	.+84     	; 0x112c <CDC_Device_Flush+0x5c>
    10d8:	44 89       	ldd	r20, Z+20	; 0x14
    10da:	55 89       	ldd	r21, Z+21	; 0x15
    10dc:	66 89       	ldd	r22, Z+22	; 0x16
    10de:	77 89       	ldd	r23, Z+23	; 0x17
    10e0:	41 15       	cp	r20, r1
    10e2:	51 05       	cpc	r21, r1
    10e4:	61 05       	cpc	r22, r1
    10e6:	71 05       	cpc	r23, r1
    10e8:	09 f1       	breq	.+66     	; 0x112c <CDC_Device_Flush+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10ea:	81 81       	ldd	r24, Z+1	; 0x01
    10ec:	8f 70       	andi	r24, 0x0F	; 15
    10ee:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    10f2:	90 91 f3 00 	lds	r25, 0x00F3
    10f6:	80 91 f2 00 	lds	r24, 0x00F2
    10fa:	39 2f       	mov	r19, r25
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	82 2b       	or	r24, r18
    1102:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	a1 f0       	breq	.+40     	; 0x1130 <CDC_Device_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1108:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    110c:	80 91 e8 00 	lds	r24, 0x00E8
    1110:	8e 77       	andi	r24, 0x7E	; 126
    1112:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1116:	95 fd       	sbrc	r25, 5
    1118:	0d c0       	rjmp	.+26     	; 0x1134 <CDC_Device_Flush+0x64>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    111a:	a8 db       	rcall	.-2224   	; 0x86c <Endpoint_WaitUntilReady>
    111c:	88 23       	and	r24, r24
    111e:	59 f4       	brne	.+22     	; 0x1136 <CDC_Device_Flush+0x66>
    1120:	90 91 e8 00 	lds	r25, 0x00E8
    1124:	9e 77       	andi	r25, 0x7E	; 126
    1126:	90 93 e8 00 	sts	0x00E8, r25
    112a:	08 95       	ret
    112c:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    112e:	08 95       	ret
    1130:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    1132:	08 95       	ret
    1134:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    1136:	08 95       	ret

00001138 <CDC_Device_USBTask>:
}
    1138:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    113a:	24 30       	cpi	r18, 0x04	; 4
    113c:	99 f4       	brne	.+38     	; 0x1164 <CDC_Device_USBTask+0x2c>
    113e:	fc 01       	movw	r30, r24
    1140:	44 89       	ldd	r20, Z+20	; 0x14
    1142:	55 89       	ldd	r21, Z+21	; 0x15
    1144:	66 89       	ldd	r22, Z+22	; 0x16
    1146:	77 89       	ldd	r23, Z+23	; 0x17
    1148:	41 15       	cp	r20, r1
    114a:	51 05       	cpc	r21, r1
    114c:	61 05       	cpc	r22, r1
    114e:	71 05       	cpc	r23, r1
    1150:	49 f0       	breq	.+18     	; 0x1164 <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1152:	21 81       	ldd	r18, Z+1	; 0x01
    1154:	2f 70       	andi	r18, 0x0F	; 15
    1156:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    115a:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    115e:	20 ff       	sbrs	r18, 0
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
    1162:	b6 cf       	rjmp	.-148    	; 0x10d0 <CDC_Device_Flush>
    1164:	08 95       	ret

00001166 <CDC_Device_BytesReceived>:
    1166:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1168:	8e b3       	in	r24, 0x1e	; 30
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	61 f5       	brne	.+88     	; 0x11c6 <CDC_Device_BytesReceived+0x60>
    116e:	44 89       	ldd	r20, Z+20	; 0x14
    1170:	55 89       	ldd	r21, Z+21	; 0x15
    1172:	66 89       	ldd	r22, Z+22	; 0x16
    1174:	77 89       	ldd	r23, Z+23	; 0x17
    1176:	41 15       	cp	r20, r1
    1178:	51 05       	cpc	r21, r1
    117a:	61 05       	cpc	r22, r1
    117c:	71 05       	cpc	r23, r1
    117e:	19 f1       	breq	.+70     	; 0x11c6 <CDC_Device_BytesReceived+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1180:	86 81       	ldd	r24, Z+6	; 0x06
    1182:	8f 70       	andi	r24, 0x0F	; 15
    1184:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1188:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    118c:	82 ff       	sbrs	r24, 2
    118e:	1e c0       	rjmp	.+60     	; 0x11cc <CDC_Device_BytesReceived+0x66>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1190:	90 91 f3 00 	lds	r25, 0x00F3
    1194:	80 91 f2 00 	lds	r24, 0x00F2
    1198:	39 2f       	mov	r19, r25
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	82 2b       	or	r24, r18
    11a0:	93 2b       	or	r25, r19
	{
		if (!(Endpoint_BytesInEndpoint()))
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <CDC_Device_BytesReceived+0x4c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11a6:	80 91 e8 00 	lds	r24, 0x00E8
    11aa:	8b 77       	andi	r24, 0x7B	; 123
    11ac:	80 93 e8 00 	sts	0x00E8, r24
    11b0:	0a c0       	rjmp	.+20     	; 0x11c6 <CDC_Device_BytesReceived+0x60>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    11b2:	90 91 f3 00 	lds	r25, 0x00F3
    11b6:	80 91 f2 00 	lds	r24, 0x00F2
    11ba:	39 2f       	mov	r19, r25
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	82 2b       	or	r24, r18
    11c2:	93 2b       	or	r25, r19
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
    11c4:	08 95       	ret
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return 0;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	08 95       	ret
			return Endpoint_BytesInEndpoint();
		}
	}
	else
	{
		return 0;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    11d0:	08 95       	ret

000011d2 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11d2:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    11d4:	8e b3       	in	r24, 0x1e	; 30
    11d6:	84 30       	cpi	r24, 0x04	; 4
    11d8:	a1 f5       	brne	.+104    	; 0x1242 <CDC_Device_ReceiveByte+0x70>
    11da:	44 89       	ldd	r20, Z+20	; 0x14
    11dc:	55 89       	ldd	r21, Z+21	; 0x15
    11de:	66 89       	ldd	r22, Z+22	; 0x16
    11e0:	77 89       	ldd	r23, Z+23	; 0x17
    11e2:	41 15       	cp	r20, r1
    11e4:	51 05       	cpc	r21, r1
    11e6:	61 05       	cpc	r22, r1
    11e8:	71 05       	cpc	r23, r1
    11ea:	59 f1       	breq	.+86     	; 0x1242 <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11ec:	86 81       	ldd	r24, Z+6	; 0x06
    11ee:	8f 70       	andi	r24, 0x0F	; 15
    11f0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11f4:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    11f8:	82 ff       	sbrs	r24, 2
    11fa:	26 c0       	rjmp	.+76     	; 0x1248 <CDC_Device_ReceiveByte+0x76>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    11fc:	90 91 f3 00 	lds	r25, 0x00F3
    1200:	80 91 f2 00 	lds	r24, 0x00F2
    1204:	39 2f       	mov	r19, r25
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	82 2b       	or	r24, r18
    120c:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	21 f0       	breq	.+8      	; 0x121a <CDC_Device_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1212:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <CDC_Device_ReceiveByte+0x4c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	9f ef       	ldi	r25, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    121e:	30 91 f3 00 	lds	r19, 0x00F3
    1222:	20 91 f2 00 	lds	r18, 0x00F2
    1226:	53 2f       	mov	r21, r19
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	24 2b       	or	r18, r20
    122e:	35 2b       	or	r19, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1230:	21 15       	cp	r18, r1
    1232:	31 05       	cpc	r19, r1
    1234:	59 f4       	brne	.+22     	; 0x124c <CDC_Device_ReceiveByte+0x7a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1236:	20 91 e8 00 	lds	r18, 0x00E8
    123a:	2b 77       	andi	r18, 0x7B	; 123
    123c:	20 93 e8 00 	sts	0x00E8, r18
    1240:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	9f ef       	ldi	r25, 0xFF	; 255
    1246:	08 95       	ret

	int16_t ReceivedByte = -1;
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    124c:	08 95       	ret

0000124e <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    124e:	fc 01       	movw	r30, r24
    1250:	84 85       	ldd	r24, Z+12	; 0x0c
    1252:	95 85       	ldd	r25, Z+13	; 0x0d
    1254:	be df       	rcall	.-132    	; 0x11d2 <CDC_Device_ReceiveByte>
    1256:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
    1258:	02 c0       	rjmp	.+4      	; 0x125e <CDC_Device_getchar+0x10>
    125a:	8e ef       	ldi	r24, 0xFE	; 254
	  return _FDEV_EOF;
    125c:	9f ef       	ldi	r25, 0xFF	; 255
    125e:	08 95       	ret

00001260 <CDC_Device_CreateStream>:

	return ReceivedByte;
}
    1260:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    1262:	2e e0       	ldi	r18, 0x0E	; 14
    1264:	db 01       	movw	r26, r22
    1266:	1d 92       	st	X+, r1
    1268:	2a 95       	dec	r18
    126a:	e9 f7       	brne	.-6      	; 0x1266 <CDC_Device_CreateStream+0x6>
    126c:	23 e0       	ldi	r18, 0x03	; 3
    126e:	23 83       	std	Z+3, r18	; 0x03
    1270:	2a e5       	ldi	r18, 0x5A	; 90
    1272:	38 e0       	ldi	r19, 0x08	; 8
    1274:	31 87       	std	Z+9, r19	; 0x09
    1276:	20 87       	std	Z+8, r18	; 0x08
    1278:	27 e2       	ldi	r18, 0x27	; 39
    127a:	39 e0       	ldi	r19, 0x09	; 9
    127c:	33 87       	std	Z+11, r19	; 0x0b
    127e:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1280:	95 87       	std	Z+13, r25	; 0x0d
    1282:	84 87       	std	Z+12, r24	; 0x0c
}
    1284:	08 95       	ret

00001286 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1286:	08 95       	ret

00001288 <__udivmodsi4>:
    1288:	a1 e2       	ldi	r26, 0x21	; 33
    128a:	1a 2e       	mov	r1, r26
    128c:	aa 1b       	sub	r26, r26
    128e:	bb 1b       	sub	r27, r27
    1290:	fd 01       	movw	r30, r26
    1292:	0d c0       	rjmp	.+26     	; 0x12ae <__udivmodsi4_ep>

00001294 <__udivmodsi4_loop>:
    1294:	aa 1f       	adc	r26, r26
    1296:	bb 1f       	adc	r27, r27
    1298:	ee 1f       	adc	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	a2 17       	cp	r26, r18
    129e:	b3 07       	cpc	r27, r19
    12a0:	e4 07       	cpc	r30, r20
    12a2:	f5 07       	cpc	r31, r21
    12a4:	20 f0       	brcs	.+8      	; 0x12ae <__udivmodsi4_ep>
    12a6:	a2 1b       	sub	r26, r18
    12a8:	b3 0b       	sbc	r27, r19
    12aa:	e4 0b       	sbc	r30, r20
    12ac:	f5 0b       	sbc	r31, r21

000012ae <__udivmodsi4_ep>:
    12ae:	66 1f       	adc	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	88 1f       	adc	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	1a 94       	dec	r1
    12b8:	69 f7       	brne	.-38     	; 0x1294 <__udivmodsi4_loop>
    12ba:	60 95       	com	r22
    12bc:	70 95       	com	r23
    12be:	80 95       	com	r24
    12c0:	90 95       	com	r25
    12c2:	9b 01       	movw	r18, r22
    12c4:	ac 01       	movw	r20, r24
    12c6:	bd 01       	movw	r22, r26
    12c8:	cf 01       	movw	r24, r30
    12ca:	08 95       	ret

000012cc <strncmp>:
    12cc:	fb 01       	movw	r30, r22
    12ce:	dc 01       	movw	r26, r24
    12d0:	41 50       	subi	r20, 0x01	; 1
    12d2:	50 40       	sbci	r21, 0x00	; 0
    12d4:	30 f0       	brcs	.+12     	; 0x12e2 <strncmp+0x16>
    12d6:	8d 91       	ld	r24, X+
    12d8:	01 90       	ld	r0, Z+
    12da:	80 19       	sub	r24, r0
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <strncmp+0x18>
    12de:	00 20       	and	r0, r0
    12e0:	b9 f7       	brne	.-18     	; 0x12d0 <strncmp+0x4>
    12e2:	88 1b       	sub	r24, r24
    12e4:	99 0b       	sbc	r25, r25
    12e6:	08 95       	ret

000012e8 <strncpy>:
    12e8:	fb 01       	movw	r30, r22
    12ea:	dc 01       	movw	r26, r24
    12ec:	41 50       	subi	r20, 0x01	; 1
    12ee:	50 40       	sbci	r21, 0x00	; 0
    12f0:	48 f0       	brcs	.+18     	; 0x1304 <strncpy+0x1c>
    12f2:	01 90       	ld	r0, Z+
    12f4:	0d 92       	st	X+, r0
    12f6:	00 20       	and	r0, r0
    12f8:	c9 f7       	brne	.-14     	; 0x12ec <strncpy+0x4>
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <strncpy+0x16>
    12fc:	1d 92       	st	X+, r1
    12fe:	41 50       	subi	r20, 0x01	; 1
    1300:	50 40       	sbci	r21, 0x00	; 0
    1302:	e0 f7       	brcc	.-8      	; 0x12fc <strncpy+0x14>
    1304:	08 95       	ret

00001306 <fprintf>:
    1306:	a0 e0       	ldi	r26, 0x00	; 0
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e8 e8       	ldi	r30, 0x88	; 136
    130c:	f9 e0       	ldi	r31, 0x09	; 9
    130e:	ad c2       	rjmp	.+1370   	; 0x186a <__prologue_saves__+0x20>
    1310:	ae 01       	movw	r20, r28
    1312:	47 5f       	subi	r20, 0xF7	; 247
    1314:	5f 4f       	sbci	r21, 0xFF	; 255
    1316:	8d 81       	ldd	r24, Y+5	; 0x05
    1318:	9e 81       	ldd	r25, Y+6	; 0x06
    131a:	6f 81       	ldd	r22, Y+7	; 0x07
    131c:	78 85       	ldd	r23, Y+8	; 0x08
    131e:	26 d0       	rcall	.+76     	; 0x136c <vfprintf>
    1320:	20 96       	adiw	r28, 0x00	; 0
    1322:	e2 e0       	ldi	r30, 0x02	; 2
    1324:	be c2       	rjmp	.+1404   	; 0x18a2 <__epilogue_restores__+0x20>

00001326 <fputs>:
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	7c 01       	movw	r14, r24
    1334:	eb 01       	movw	r28, r22
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	81 ff       	sbrs	r24, 1
    133a:	11 c0       	rjmp	.+34     	; 0x135e <fputs+0x38>
    133c:	00 e0       	ldi	r16, 0x00	; 0
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	08 c0       	rjmp	.+16     	; 0x1352 <fputs+0x2c>
    1342:	e8 85       	ldd	r30, Y+8	; 0x08
    1344:	f9 85       	ldd	r31, Y+9	; 0x09
    1346:	be 01       	movw	r22, r28
    1348:	09 95       	icall
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	11 f0       	breq	.+4      	; 0x1352 <fputs+0x2c>
    134e:	0f ef       	ldi	r16, 0xFF	; 255
    1350:	1f ef       	ldi	r17, 0xFF	; 255
    1352:	f7 01       	movw	r30, r14
    1354:	81 91       	ld	r24, Z+
    1356:	7f 01       	movw	r14, r30
    1358:	88 23       	and	r24, r24
    135a:	99 f7       	brne	.-26     	; 0x1342 <fputs+0x1c>
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <fputs+0x3c>
    135e:	0f ef       	ldi	r16, 0xFF	; 255
    1360:	1f ef       	ldi	r17, 0xFF	; 255
    1362:	c8 01       	movw	r24, r16
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	e6 e0       	ldi	r30, 0x06	; 6
    136a:	97 c2       	rjmp	.+1326   	; 0x189a <__epilogue_restores__+0x18>

0000136c <vfprintf>:
    136c:	ad e0       	ldi	r26, 0x0D	; 13
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	eb eb       	ldi	r30, 0xBB	; 187
    1372:	f9 e0       	ldi	r31, 0x09	; 9
    1374:	6a c2       	rjmp	.+1236   	; 0x184a <__prologue_saves__>
    1376:	3c 01       	movw	r6, r24
    1378:	7d 87       	std	Y+13, r23	; 0x0d
    137a:	6c 87       	std	Y+12, r22	; 0x0c
    137c:	5a 01       	movw	r10, r20
    137e:	fc 01       	movw	r30, r24
    1380:	17 82       	std	Z+7, r1	; 0x07
    1382:	16 82       	std	Z+6, r1	; 0x06
    1384:	83 81       	ldd	r24, Z+3	; 0x03
    1386:	81 ff       	sbrs	r24, 1
    1388:	bb c1       	rjmp	.+886    	; 0x1700 <vfprintf+0x394>
    138a:	2e 01       	movw	r4, r28
    138c:	08 94       	sec
    138e:	41 1c       	adc	r4, r1
    1390:	51 1c       	adc	r5, r1
    1392:	f3 01       	movw	r30, r6
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	ec 85       	ldd	r30, Y+12	; 0x0c
    1398:	fd 85       	ldd	r31, Y+13	; 0x0d
    139a:	93 fd       	sbrc	r25, 3
    139c:	85 91       	lpm	r24, Z+
    139e:	93 ff       	sbrs	r25, 3
    13a0:	81 91       	ld	r24, Z+
    13a2:	fd 87       	std	Y+13, r31	; 0x0d
    13a4:	ec 87       	std	Y+12, r30	; 0x0c
    13a6:	88 23       	and	r24, r24
    13a8:	09 f4       	brne	.+2      	; 0x13ac <vfprintf+0x40>
    13aa:	a6 c1       	rjmp	.+844    	; 0x16f8 <vfprintf+0x38c>
    13ac:	85 32       	cpi	r24, 0x25	; 37
    13ae:	41 f4       	brne	.+16     	; 0x13c0 <vfprintf+0x54>
    13b0:	93 fd       	sbrc	r25, 3
    13b2:	85 91       	lpm	r24, Z+
    13b4:	93 ff       	sbrs	r25, 3
    13b6:	81 91       	ld	r24, Z+
    13b8:	fd 87       	std	Y+13, r31	; 0x0d
    13ba:	ec 87       	std	Y+12, r30	; 0x0c
    13bc:	85 32       	cpi	r24, 0x25	; 37
    13be:	21 f4       	brne	.+8      	; 0x13c8 <vfprintf+0x5c>
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	b3 01       	movw	r22, r6
    13c4:	b8 d1       	rcall	.+880    	; 0x1736 <fputc>
    13c6:	e5 cf       	rjmp	.-54     	; 0x1392 <vfprintf+0x26>
    13c8:	ff 24       	eor	r15, r15
    13ca:	ee 24       	eor	r14, r14
    13cc:	10 e0       	ldi	r17, 0x00	; 0
    13ce:	10 32       	cpi	r17, 0x20	; 32
    13d0:	b0 f4       	brcc	.+44     	; 0x13fe <vfprintf+0x92>
    13d2:	8b 32       	cpi	r24, 0x2B	; 43
    13d4:	69 f0       	breq	.+26     	; 0x13f0 <vfprintf+0x84>
    13d6:	8c 32       	cpi	r24, 0x2C	; 44
    13d8:	28 f4       	brcc	.+10     	; 0x13e4 <vfprintf+0x78>
    13da:	80 32       	cpi	r24, 0x20	; 32
    13dc:	51 f0       	breq	.+20     	; 0x13f2 <vfprintf+0x86>
    13de:	83 32       	cpi	r24, 0x23	; 35
    13e0:	71 f4       	brne	.+28     	; 0x13fe <vfprintf+0x92>
    13e2:	0b c0       	rjmp	.+22     	; 0x13fa <vfprintf+0x8e>
    13e4:	8d 32       	cpi	r24, 0x2D	; 45
    13e6:	39 f0       	breq	.+14     	; 0x13f6 <vfprintf+0x8a>
    13e8:	80 33       	cpi	r24, 0x30	; 48
    13ea:	49 f4       	brne	.+18     	; 0x13fe <vfprintf+0x92>
    13ec:	11 60       	ori	r17, 0x01	; 1
    13ee:	2c c0       	rjmp	.+88     	; 0x1448 <vfprintf+0xdc>
    13f0:	12 60       	ori	r17, 0x02	; 2
    13f2:	14 60       	ori	r17, 0x04	; 4
    13f4:	29 c0       	rjmp	.+82     	; 0x1448 <vfprintf+0xdc>
    13f6:	18 60       	ori	r17, 0x08	; 8
    13f8:	27 c0       	rjmp	.+78     	; 0x1448 <vfprintf+0xdc>
    13fa:	10 61       	ori	r17, 0x10	; 16
    13fc:	25 c0       	rjmp	.+74     	; 0x1448 <vfprintf+0xdc>
    13fe:	17 fd       	sbrc	r17, 7
    1400:	2e c0       	rjmp	.+92     	; 0x145e <vfprintf+0xf2>
    1402:	28 2f       	mov	r18, r24
    1404:	20 53       	subi	r18, 0x30	; 48
    1406:	2a 30       	cpi	r18, 0x0A	; 10
    1408:	98 f4       	brcc	.+38     	; 0x1430 <vfprintf+0xc4>
    140a:	16 ff       	sbrs	r17, 6
    140c:	08 c0       	rjmp	.+16     	; 0x141e <vfprintf+0xb2>
    140e:	8f 2d       	mov	r24, r15
    1410:	88 0f       	add	r24, r24
    1412:	f8 2e       	mov	r15, r24
    1414:	ff 0c       	add	r15, r15
    1416:	ff 0c       	add	r15, r15
    1418:	f8 0e       	add	r15, r24
    141a:	f2 0e       	add	r15, r18
    141c:	15 c0       	rjmp	.+42     	; 0x1448 <vfprintf+0xdc>
    141e:	8e 2d       	mov	r24, r14
    1420:	88 0f       	add	r24, r24
    1422:	e8 2e       	mov	r14, r24
    1424:	ee 0c       	add	r14, r14
    1426:	ee 0c       	add	r14, r14
    1428:	e8 0e       	add	r14, r24
    142a:	e2 0e       	add	r14, r18
    142c:	10 62       	ori	r17, 0x20	; 32
    142e:	0c c0       	rjmp	.+24     	; 0x1448 <vfprintf+0xdc>
    1430:	8e 32       	cpi	r24, 0x2E	; 46
    1432:	21 f4       	brne	.+8      	; 0x143c <vfprintf+0xd0>
    1434:	16 fd       	sbrc	r17, 6
    1436:	60 c1       	rjmp	.+704    	; 0x16f8 <vfprintf+0x38c>
    1438:	10 64       	ori	r17, 0x40	; 64
    143a:	06 c0       	rjmp	.+12     	; 0x1448 <vfprintf+0xdc>
    143c:	8c 36       	cpi	r24, 0x6C	; 108
    143e:	11 f4       	brne	.+4      	; 0x1444 <vfprintf+0xd8>
    1440:	10 68       	ori	r17, 0x80	; 128
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <vfprintf+0xdc>
    1444:	88 36       	cpi	r24, 0x68	; 104
    1446:	59 f4       	brne	.+22     	; 0x145e <vfprintf+0xf2>
    1448:	ec 85       	ldd	r30, Y+12	; 0x0c
    144a:	fd 85       	ldd	r31, Y+13	; 0x0d
    144c:	93 fd       	sbrc	r25, 3
    144e:	85 91       	lpm	r24, Z+
    1450:	93 ff       	sbrs	r25, 3
    1452:	81 91       	ld	r24, Z+
    1454:	fd 87       	std	Y+13, r31	; 0x0d
    1456:	ec 87       	std	Y+12, r30	; 0x0c
    1458:	88 23       	and	r24, r24
    145a:	09 f0       	breq	.+2      	; 0x145e <vfprintf+0xf2>
    145c:	b8 cf       	rjmp	.-144    	; 0x13ce <vfprintf+0x62>
    145e:	98 2f       	mov	r25, r24
    1460:	95 54       	subi	r25, 0x45	; 69
    1462:	93 30       	cpi	r25, 0x03	; 3
    1464:	18 f0       	brcs	.+6      	; 0x146c <vfprintf+0x100>
    1466:	90 52       	subi	r25, 0x20	; 32
    1468:	93 30       	cpi	r25, 0x03	; 3
    146a:	38 f4       	brcc	.+14     	; 0x147a <vfprintf+0x10e>
    146c:	24 e0       	ldi	r18, 0x04	; 4
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	a2 0e       	add	r10, r18
    1472:	b3 1e       	adc	r11, r19
    1474:	3f e3       	ldi	r19, 0x3F	; 63
    1476:	39 83       	std	Y+1, r19	; 0x01
    1478:	0f c0       	rjmp	.+30     	; 0x1498 <vfprintf+0x12c>
    147a:	83 36       	cpi	r24, 0x63	; 99
    147c:	31 f0       	breq	.+12     	; 0x148a <vfprintf+0x11e>
    147e:	83 37       	cpi	r24, 0x73	; 115
    1480:	81 f0       	breq	.+32     	; 0x14a2 <vfprintf+0x136>
    1482:	83 35       	cpi	r24, 0x53	; 83
    1484:	09 f0       	breq	.+2      	; 0x1488 <vfprintf+0x11c>
    1486:	56 c0       	rjmp	.+172    	; 0x1534 <vfprintf+0x1c8>
    1488:	21 c0       	rjmp	.+66     	; 0x14cc <vfprintf+0x160>
    148a:	f5 01       	movw	r30, r10
    148c:	80 81       	ld	r24, Z
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	22 e0       	ldi	r18, 0x02	; 2
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	a2 0e       	add	r10, r18
    1496:	b3 1e       	adc	r11, r19
    1498:	21 e0       	ldi	r18, 0x01	; 1
    149a:	c2 2e       	mov	r12, r18
    149c:	d1 2c       	mov	r13, r1
    149e:	42 01       	movw	r8, r4
    14a0:	13 c0       	rjmp	.+38     	; 0x14c8 <vfprintf+0x15c>
    14a2:	92 e0       	ldi	r25, 0x02	; 2
    14a4:	29 2e       	mov	r2, r25
    14a6:	31 2c       	mov	r3, r1
    14a8:	2a 0c       	add	r2, r10
    14aa:	3b 1c       	adc	r3, r11
    14ac:	f5 01       	movw	r30, r10
    14ae:	80 80       	ld	r8, Z
    14b0:	91 80       	ldd	r9, Z+1	; 0x01
    14b2:	16 ff       	sbrs	r17, 6
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <vfprintf+0x150>
    14b6:	6f 2d       	mov	r22, r15
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <vfprintf+0x154>
    14bc:	6f ef       	ldi	r22, 0xFF	; 255
    14be:	7f ef       	ldi	r23, 0xFF	; 255
    14c0:	c4 01       	movw	r24, r8
    14c2:	2e d1       	rcall	.+604    	; 0x1720 <strnlen>
    14c4:	6c 01       	movw	r12, r24
    14c6:	51 01       	movw	r10, r2
    14c8:	1f 77       	andi	r17, 0x7F	; 127
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <vfprintf+0x188>
    14cc:	82 e0       	ldi	r24, 0x02	; 2
    14ce:	28 2e       	mov	r2, r24
    14d0:	31 2c       	mov	r3, r1
    14d2:	2a 0c       	add	r2, r10
    14d4:	3b 1c       	adc	r3, r11
    14d6:	f5 01       	movw	r30, r10
    14d8:	80 80       	ld	r8, Z
    14da:	91 80       	ldd	r9, Z+1	; 0x01
    14dc:	16 ff       	sbrs	r17, 6
    14de:	03 c0       	rjmp	.+6      	; 0x14e6 <vfprintf+0x17a>
    14e0:	6f 2d       	mov	r22, r15
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <vfprintf+0x17e>
    14e6:	6f ef       	ldi	r22, 0xFF	; 255
    14e8:	7f ef       	ldi	r23, 0xFF	; 255
    14ea:	c4 01       	movw	r24, r8
    14ec:	0e d1       	rcall	.+540    	; 0x170a <strnlen_P>
    14ee:	6c 01       	movw	r12, r24
    14f0:	10 68       	ori	r17, 0x80	; 128
    14f2:	51 01       	movw	r10, r2
    14f4:	13 fd       	sbrc	r17, 3
    14f6:	1a c0       	rjmp	.+52     	; 0x152c <vfprintf+0x1c0>
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <vfprintf+0x198>
    14fa:	80 e2       	ldi	r24, 0x20	; 32
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	b3 01       	movw	r22, r6
    1500:	1a d1       	rcall	.+564    	; 0x1736 <fputc>
    1502:	ea 94       	dec	r14
    1504:	8e 2d       	mov	r24, r14
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	c8 16       	cp	r12, r24
    150a:	d9 06       	cpc	r13, r25
    150c:	b0 f3       	brcs	.-20     	; 0x14fa <vfprintf+0x18e>
    150e:	0e c0       	rjmp	.+28     	; 0x152c <vfprintf+0x1c0>
    1510:	f4 01       	movw	r30, r8
    1512:	17 fd       	sbrc	r17, 7
    1514:	85 91       	lpm	r24, Z+
    1516:	17 ff       	sbrs	r17, 7
    1518:	81 91       	ld	r24, Z+
    151a:	4f 01       	movw	r8, r30
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	b3 01       	movw	r22, r6
    1520:	0a d1       	rcall	.+532    	; 0x1736 <fputc>
    1522:	e1 10       	cpse	r14, r1
    1524:	ea 94       	dec	r14
    1526:	08 94       	sec
    1528:	c1 08       	sbc	r12, r1
    152a:	d1 08       	sbc	r13, r1
    152c:	c1 14       	cp	r12, r1
    152e:	d1 04       	cpc	r13, r1
    1530:	79 f7       	brne	.-34     	; 0x1510 <vfprintf+0x1a4>
    1532:	df c0       	rjmp	.+446    	; 0x16f2 <vfprintf+0x386>
    1534:	84 36       	cpi	r24, 0x64	; 100
    1536:	11 f0       	breq	.+4      	; 0x153c <vfprintf+0x1d0>
    1538:	89 36       	cpi	r24, 0x69	; 105
    153a:	49 f5       	brne	.+82     	; 0x158e <vfprintf+0x222>
    153c:	f5 01       	movw	r30, r10
    153e:	17 ff       	sbrs	r17, 7
    1540:	07 c0       	rjmp	.+14     	; 0x1550 <vfprintf+0x1e4>
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	a2 81       	ldd	r26, Z+2	; 0x02
    1548:	b3 81       	ldd	r27, Z+3	; 0x03
    154a:	24 e0       	ldi	r18, 0x04	; 4
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	08 c0       	rjmp	.+16     	; 0x1560 <vfprintf+0x1f4>
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	aa 27       	eor	r26, r26
    1556:	97 fd       	sbrc	r25, 7
    1558:	a0 95       	com	r26
    155a:	ba 2f       	mov	r27, r26
    155c:	22 e0       	ldi	r18, 0x02	; 2
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	a2 0e       	add	r10, r18
    1562:	b3 1e       	adc	r11, r19
    1564:	01 2f       	mov	r16, r17
    1566:	0f 76       	andi	r16, 0x6F	; 111
    1568:	b7 ff       	sbrs	r27, 7
    156a:	08 c0       	rjmp	.+16     	; 0x157c <vfprintf+0x210>
    156c:	b0 95       	com	r27
    156e:	a0 95       	com	r26
    1570:	90 95       	com	r25
    1572:	81 95       	neg	r24
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	af 4f       	sbci	r26, 0xFF	; 255
    1578:	bf 4f       	sbci	r27, 0xFF	; 255
    157a:	00 68       	ori	r16, 0x80	; 128
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	a2 01       	movw	r20, r4
    1582:	2a e0       	ldi	r18, 0x0A	; 10
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	03 d1       	rcall	.+518    	; 0x178e <__ultoa_invert>
    1588:	d8 2e       	mov	r13, r24
    158a:	d4 18       	sub	r13, r4
    158c:	3e c0       	rjmp	.+124    	; 0x160a <vfprintf+0x29e>
    158e:	85 37       	cpi	r24, 0x75	; 117
    1590:	21 f4       	brne	.+8      	; 0x159a <vfprintf+0x22e>
    1592:	1f 7e       	andi	r17, 0xEF	; 239
    1594:	2a e0       	ldi	r18, 0x0A	; 10
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	20 c0       	rjmp	.+64     	; 0x15da <vfprintf+0x26e>
    159a:	19 7f       	andi	r17, 0xF9	; 249
    159c:	8f 36       	cpi	r24, 0x6F	; 111
    159e:	a9 f0       	breq	.+42     	; 0x15ca <vfprintf+0x25e>
    15a0:	80 37       	cpi	r24, 0x70	; 112
    15a2:	20 f4       	brcc	.+8      	; 0x15ac <vfprintf+0x240>
    15a4:	88 35       	cpi	r24, 0x58	; 88
    15a6:	09 f0       	breq	.+2      	; 0x15aa <vfprintf+0x23e>
    15a8:	a7 c0       	rjmp	.+334    	; 0x16f8 <vfprintf+0x38c>
    15aa:	0b c0       	rjmp	.+22     	; 0x15c2 <vfprintf+0x256>
    15ac:	80 37       	cpi	r24, 0x70	; 112
    15ae:	21 f0       	breq	.+8      	; 0x15b8 <vfprintf+0x24c>
    15b0:	88 37       	cpi	r24, 0x78	; 120
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <vfprintf+0x24a>
    15b4:	a1 c0       	rjmp	.+322    	; 0x16f8 <vfprintf+0x38c>
    15b6:	01 c0       	rjmp	.+2      	; 0x15ba <vfprintf+0x24e>
    15b8:	10 61       	ori	r17, 0x10	; 16
    15ba:	14 ff       	sbrs	r17, 4
    15bc:	09 c0       	rjmp	.+18     	; 0x15d0 <vfprintf+0x264>
    15be:	14 60       	ori	r17, 0x04	; 4
    15c0:	07 c0       	rjmp	.+14     	; 0x15d0 <vfprintf+0x264>
    15c2:	14 ff       	sbrs	r17, 4
    15c4:	08 c0       	rjmp	.+16     	; 0x15d6 <vfprintf+0x26a>
    15c6:	16 60       	ori	r17, 0x06	; 6
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <vfprintf+0x26a>
    15ca:	28 e0       	ldi	r18, 0x08	; 8
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <vfprintf+0x26e>
    15d0:	20 e1       	ldi	r18, 0x10	; 16
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <vfprintf+0x26e>
    15d6:	20 e1       	ldi	r18, 0x10	; 16
    15d8:	32 e0       	ldi	r19, 0x02	; 2
    15da:	f5 01       	movw	r30, r10
    15dc:	17 ff       	sbrs	r17, 7
    15de:	07 c0       	rjmp	.+14     	; 0x15ee <vfprintf+0x282>
    15e0:	60 81       	ld	r22, Z
    15e2:	71 81       	ldd	r23, Z+1	; 0x01
    15e4:	82 81       	ldd	r24, Z+2	; 0x02
    15e6:	93 81       	ldd	r25, Z+3	; 0x03
    15e8:	44 e0       	ldi	r20, 0x04	; 4
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <vfprintf+0x28e>
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	42 e0       	ldi	r20, 0x02	; 2
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	a4 0e       	add	r10, r20
    15fc:	b5 1e       	adc	r11, r21
    15fe:	a2 01       	movw	r20, r4
    1600:	c6 d0       	rcall	.+396    	; 0x178e <__ultoa_invert>
    1602:	d8 2e       	mov	r13, r24
    1604:	d4 18       	sub	r13, r4
    1606:	01 2f       	mov	r16, r17
    1608:	0f 77       	andi	r16, 0x7F	; 127
    160a:	06 ff       	sbrs	r16, 6
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <vfprintf+0x2b4>
    160e:	0e 7f       	andi	r16, 0xFE	; 254
    1610:	df 14       	cp	r13, r15
    1612:	30 f4       	brcc	.+12     	; 0x1620 <vfprintf+0x2b4>
    1614:	04 ff       	sbrs	r16, 4
    1616:	06 c0       	rjmp	.+12     	; 0x1624 <vfprintf+0x2b8>
    1618:	02 fd       	sbrc	r16, 2
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <vfprintf+0x2b8>
    161c:	0f 7e       	andi	r16, 0xEF	; 239
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <vfprintf+0x2b8>
    1620:	1d 2d       	mov	r17, r13
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <vfprintf+0x2ba>
    1624:	1f 2d       	mov	r17, r15
    1626:	80 2f       	mov	r24, r16
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	04 ff       	sbrs	r16, 4
    162c:	0c c0       	rjmp	.+24     	; 0x1646 <vfprintf+0x2da>
    162e:	fe 01       	movw	r30, r28
    1630:	ed 0d       	add	r30, r13
    1632:	f1 1d       	adc	r31, r1
    1634:	20 81       	ld	r18, Z
    1636:	20 33       	cpi	r18, 0x30	; 48
    1638:	11 f4       	brne	.+4      	; 0x163e <vfprintf+0x2d2>
    163a:	09 7e       	andi	r16, 0xE9	; 233
    163c:	09 c0       	rjmp	.+18     	; 0x1650 <vfprintf+0x2e4>
    163e:	02 ff       	sbrs	r16, 2
    1640:	06 c0       	rjmp	.+12     	; 0x164e <vfprintf+0x2e2>
    1642:	1e 5f       	subi	r17, 0xFE	; 254
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <vfprintf+0x2e4>
    1646:	86 78       	andi	r24, 0x86	; 134
    1648:	90 70       	andi	r25, 0x00	; 0
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	09 f0       	breq	.+2      	; 0x1650 <vfprintf+0x2e4>
    164e:	1f 5f       	subi	r17, 0xFF	; 255
    1650:	80 2e       	mov	r8, r16
    1652:	99 24       	eor	r9, r9
    1654:	03 fd       	sbrc	r16, 3
    1656:	11 c0       	rjmp	.+34     	; 0x167a <vfprintf+0x30e>
    1658:	00 ff       	sbrs	r16, 0
    165a:	0c c0       	rjmp	.+24     	; 0x1674 <vfprintf+0x308>
    165c:	fd 2c       	mov	r15, r13
    165e:	1e 15       	cp	r17, r14
    1660:	48 f4       	brcc	.+18     	; 0x1674 <vfprintf+0x308>
    1662:	fe 0c       	add	r15, r14
    1664:	f1 1a       	sub	r15, r17
    1666:	1e 2d       	mov	r17, r14
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <vfprintf+0x308>
    166a:	80 e2       	ldi	r24, 0x20	; 32
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	b3 01       	movw	r22, r6
    1670:	62 d0       	rcall	.+196    	; 0x1736 <fputc>
    1672:	1f 5f       	subi	r17, 0xFF	; 255
    1674:	1e 15       	cp	r17, r14
    1676:	c8 f3       	brcs	.-14     	; 0x166a <vfprintf+0x2fe>
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <vfprintf+0x316>
    167a:	1e 15       	cp	r17, r14
    167c:	10 f4       	brcc	.+4      	; 0x1682 <vfprintf+0x316>
    167e:	e1 1a       	sub	r14, r17
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <vfprintf+0x318>
    1682:	ee 24       	eor	r14, r14
    1684:	84 fe       	sbrs	r8, 4
    1686:	0e c0       	rjmp	.+28     	; 0x16a4 <vfprintf+0x338>
    1688:	80 e3       	ldi	r24, 0x30	; 48
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	b3 01       	movw	r22, r6
    168e:	53 d0       	rcall	.+166    	; 0x1736 <fputc>
    1690:	82 fe       	sbrs	r8, 2
    1692:	1d c0       	rjmp	.+58     	; 0x16ce <vfprintf+0x362>
    1694:	81 fe       	sbrs	r8, 1
    1696:	03 c0       	rjmp	.+6      	; 0x169e <vfprintf+0x332>
    1698:	88 e5       	ldi	r24, 0x58	; 88
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	10 c0       	rjmp	.+32     	; 0x16be <vfprintf+0x352>
    169e:	88 e7       	ldi	r24, 0x78	; 120
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0d c0       	rjmp	.+26     	; 0x16be <vfprintf+0x352>
    16a4:	c4 01       	movw	r24, r8
    16a6:	86 78       	andi	r24, 0x86	; 134
    16a8:	90 70       	andi	r25, 0x00	; 0
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	81 f0       	breq	.+32     	; 0x16ce <vfprintf+0x362>
    16ae:	81 fc       	sbrc	r8, 1
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <vfprintf+0x34a>
    16b2:	80 e2       	ldi	r24, 0x20	; 32
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <vfprintf+0x34c>
    16b6:	8b e2       	ldi	r24, 0x2B	; 43
    16b8:	07 fd       	sbrc	r16, 7
    16ba:	8d e2       	ldi	r24, 0x2D	; 45
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	b3 01       	movw	r22, r6
    16c0:	3a d0       	rcall	.+116    	; 0x1736 <fputc>
    16c2:	05 c0       	rjmp	.+10     	; 0x16ce <vfprintf+0x362>
    16c4:	80 e3       	ldi	r24, 0x30	; 48
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	b3 01       	movw	r22, r6
    16ca:	35 d0       	rcall	.+106    	; 0x1736 <fputc>
    16cc:	fa 94       	dec	r15
    16ce:	df 14       	cp	r13, r15
    16d0:	c8 f3       	brcs	.-14     	; 0x16c4 <vfprintf+0x358>
    16d2:	da 94       	dec	r13
    16d4:	f2 01       	movw	r30, r4
    16d6:	ed 0d       	add	r30, r13
    16d8:	f1 1d       	adc	r31, r1
    16da:	80 81       	ld	r24, Z
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	b3 01       	movw	r22, r6
    16e0:	2a d0       	rcall	.+84     	; 0x1736 <fputc>
    16e2:	dd 20       	and	r13, r13
    16e4:	b1 f7       	brne	.-20     	; 0x16d2 <vfprintf+0x366>
    16e6:	05 c0       	rjmp	.+10     	; 0x16f2 <vfprintf+0x386>
    16e8:	80 e2       	ldi	r24, 0x20	; 32
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	b3 01       	movw	r22, r6
    16ee:	23 d0       	rcall	.+70     	; 0x1736 <fputc>
    16f0:	ea 94       	dec	r14
    16f2:	ee 20       	and	r14, r14
    16f4:	c9 f7       	brne	.-14     	; 0x16e8 <vfprintf+0x37c>
    16f6:	4d ce       	rjmp	.-870    	; 0x1392 <vfprintf+0x26>
    16f8:	f3 01       	movw	r30, r6
    16fa:	86 81       	ldd	r24, Z+6	; 0x06
    16fc:	97 81       	ldd	r25, Z+7	; 0x07
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <vfprintf+0x398>
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	9f ef       	ldi	r25, 0xFF	; 255
    1704:	2d 96       	adiw	r28, 0x0d	; 13
    1706:	e2 e1       	ldi	r30, 0x12	; 18
    1708:	bc c0       	rjmp	.+376    	; 0x1882 <__epilogue_restores__>

0000170a <strnlen_P>:
    170a:	fc 01       	movw	r30, r24
    170c:	05 90       	lpm	r0, Z+
    170e:	61 50       	subi	r22, 0x01	; 1
    1710:	70 40       	sbci	r23, 0x00	; 0
    1712:	01 10       	cpse	r0, r1
    1714:	d8 f7       	brcc	.-10     	; 0x170c <strnlen_P+0x2>
    1716:	80 95       	com	r24
    1718:	90 95       	com	r25
    171a:	8e 0f       	add	r24, r30
    171c:	9f 1f       	adc	r25, r31
    171e:	08 95       	ret

00001720 <strnlen>:
    1720:	fc 01       	movw	r30, r24
    1722:	61 50       	subi	r22, 0x01	; 1
    1724:	70 40       	sbci	r23, 0x00	; 0
    1726:	01 90       	ld	r0, Z+
    1728:	01 10       	cpse	r0, r1
    172a:	d8 f7       	brcc	.-10     	; 0x1722 <strnlen+0x2>
    172c:	80 95       	com	r24
    172e:	90 95       	com	r25
    1730:	8e 0f       	add	r24, r30
    1732:	9f 1f       	adc	r25, r31
    1734:	08 95       	ret

00001736 <fputc>:
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	8c 01       	movw	r16, r24
    1740:	eb 01       	movw	r28, r22
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	81 ff       	sbrs	r24, 1
    1746:	1b c0       	rjmp	.+54     	; 0x177e <fputc+0x48>
    1748:	82 ff       	sbrs	r24, 2
    174a:	0d c0       	rjmp	.+26     	; 0x1766 <fputc+0x30>
    174c:	2e 81       	ldd	r18, Y+6	; 0x06
    174e:	3f 81       	ldd	r19, Y+7	; 0x07
    1750:	8c 81       	ldd	r24, Y+4	; 0x04
    1752:	9d 81       	ldd	r25, Y+5	; 0x05
    1754:	28 17       	cp	r18, r24
    1756:	39 07       	cpc	r19, r25
    1758:	64 f4       	brge	.+24     	; 0x1772 <fputc+0x3c>
    175a:	e8 81       	ld	r30, Y
    175c:	f9 81       	ldd	r31, Y+1	; 0x01
    175e:	01 93       	st	Z+, r16
    1760:	f9 83       	std	Y+1, r31	; 0x01
    1762:	e8 83       	st	Y, r30
    1764:	06 c0       	rjmp	.+12     	; 0x1772 <fputc+0x3c>
    1766:	e8 85       	ldd	r30, Y+8	; 0x08
    1768:	f9 85       	ldd	r31, Y+9	; 0x09
    176a:	80 2f       	mov	r24, r16
    176c:	09 95       	icall
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	31 f4       	brne	.+12     	; 0x177e <fputc+0x48>
    1772:	8e 81       	ldd	r24, Y+6	; 0x06
    1774:	9f 81       	ldd	r25, Y+7	; 0x07
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	9f 83       	std	Y+7, r25	; 0x07
    177a:	8e 83       	std	Y+6, r24	; 0x06
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <fputc+0x4c>
    177e:	0f ef       	ldi	r16, 0xFF	; 255
    1780:	1f ef       	ldi	r17, 0xFF	; 255
    1782:	c8 01       	movw	r24, r16
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	08 95       	ret

0000178e <__ultoa_invert>:
    178e:	fa 01       	movw	r30, r20
    1790:	aa 27       	eor	r26, r26
    1792:	28 30       	cpi	r18, 0x08	; 8
    1794:	51 f1       	breq	.+84     	; 0x17ea <__ultoa_invert+0x5c>
    1796:	20 31       	cpi	r18, 0x10	; 16
    1798:	81 f1       	breq	.+96     	; 0x17fa <__ultoa_invert+0x6c>
    179a:	e8 94       	clt
    179c:	6f 93       	push	r22
    179e:	6e 7f       	andi	r22, 0xFE	; 254
    17a0:	6e 5f       	subi	r22, 0xFE	; 254
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	8f 4f       	sbci	r24, 0xFF	; 255
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	af 4f       	sbci	r26, 0xFF	; 255
    17aa:	b1 e0       	ldi	r27, 0x01	; 1
    17ac:	3e d0       	rcall	.+124    	; 0x182a <__ultoa_invert+0x9c>
    17ae:	b4 e0       	ldi	r27, 0x04	; 4
    17b0:	3c d0       	rcall	.+120    	; 0x182a <__ultoa_invert+0x9c>
    17b2:	67 0f       	add	r22, r23
    17b4:	78 1f       	adc	r23, r24
    17b6:	89 1f       	adc	r24, r25
    17b8:	9a 1f       	adc	r25, r26
    17ba:	a1 1d       	adc	r26, r1
    17bc:	68 0f       	add	r22, r24
    17be:	79 1f       	adc	r23, r25
    17c0:	8a 1f       	adc	r24, r26
    17c2:	91 1d       	adc	r25, r1
    17c4:	a1 1d       	adc	r26, r1
    17c6:	6a 0f       	add	r22, r26
    17c8:	71 1d       	adc	r23, r1
    17ca:	81 1d       	adc	r24, r1
    17cc:	91 1d       	adc	r25, r1
    17ce:	a1 1d       	adc	r26, r1
    17d0:	20 d0       	rcall	.+64     	; 0x1812 <__ultoa_invert+0x84>
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <__ultoa_invert+0x48>
    17d4:	68 94       	set
    17d6:	3f 91       	pop	r19
    17d8:	2a e0       	ldi	r18, 0x0A	; 10
    17da:	26 9f       	mul	r18, r22
    17dc:	11 24       	eor	r1, r1
    17de:	30 19       	sub	r19, r0
    17e0:	30 5d       	subi	r19, 0xD0	; 208
    17e2:	31 93       	st	Z+, r19
    17e4:	de f6       	brtc	.-74     	; 0x179c <__ultoa_invert+0xe>
    17e6:	cf 01       	movw	r24, r30
    17e8:	08 95       	ret
    17ea:	46 2f       	mov	r20, r22
    17ec:	47 70       	andi	r20, 0x07	; 7
    17ee:	40 5d       	subi	r20, 0xD0	; 208
    17f0:	41 93       	st	Z+, r20
    17f2:	b3 e0       	ldi	r27, 0x03	; 3
    17f4:	0f d0       	rcall	.+30     	; 0x1814 <__ultoa_invert+0x86>
    17f6:	c9 f7       	brne	.-14     	; 0x17ea <__ultoa_invert+0x5c>
    17f8:	f6 cf       	rjmp	.-20     	; 0x17e6 <__ultoa_invert+0x58>
    17fa:	46 2f       	mov	r20, r22
    17fc:	4f 70       	andi	r20, 0x0F	; 15
    17fe:	40 5d       	subi	r20, 0xD0	; 208
    1800:	4a 33       	cpi	r20, 0x3A	; 58
    1802:	18 f0       	brcs	.+6      	; 0x180a <__ultoa_invert+0x7c>
    1804:	49 5d       	subi	r20, 0xD9	; 217
    1806:	31 fd       	sbrc	r19, 1
    1808:	40 52       	subi	r20, 0x20	; 32
    180a:	41 93       	st	Z+, r20
    180c:	02 d0       	rcall	.+4      	; 0x1812 <__ultoa_invert+0x84>
    180e:	a9 f7       	brne	.-22     	; 0x17fa <__ultoa_invert+0x6c>
    1810:	ea cf       	rjmp	.-44     	; 0x17e6 <__ultoa_invert+0x58>
    1812:	b4 e0       	ldi	r27, 0x04	; 4
    1814:	a6 95       	lsr	r26
    1816:	97 95       	ror	r25
    1818:	87 95       	ror	r24
    181a:	77 95       	ror	r23
    181c:	67 95       	ror	r22
    181e:	ba 95       	dec	r27
    1820:	c9 f7       	brne	.-14     	; 0x1814 <__ultoa_invert+0x86>
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	61 05       	cpc	r22, r1
    1826:	71 05       	cpc	r23, r1
    1828:	08 95       	ret
    182a:	9b 01       	movw	r18, r22
    182c:	ac 01       	movw	r20, r24
    182e:	0a 2e       	mov	r0, r26
    1830:	06 94       	lsr	r0
    1832:	57 95       	ror	r21
    1834:	47 95       	ror	r20
    1836:	37 95       	ror	r19
    1838:	27 95       	ror	r18
    183a:	ba 95       	dec	r27
    183c:	c9 f7       	brne	.-14     	; 0x1830 <__ultoa_invert+0xa2>
    183e:	62 0f       	add	r22, r18
    1840:	73 1f       	adc	r23, r19
    1842:	84 1f       	adc	r24, r20
    1844:	95 1f       	adc	r25, r21
    1846:	a0 1d       	adc	r26, r0
    1848:	08 95       	ret

0000184a <__prologue_saves__>:
    184a:	2f 92       	push	r2
    184c:	3f 92       	push	r3
    184e:	4f 92       	push	r4
    1850:	5f 92       	push	r5
    1852:	6f 92       	push	r6
    1854:	7f 92       	push	r7
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	ca 1b       	sub	r28, r26
    1874:	db 0b       	sbc	r29, r27
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	09 94       	ijmp

00001882 <__epilogue_restores__>:
    1882:	2a 88       	ldd	r2, Y+18	; 0x12
    1884:	39 88       	ldd	r3, Y+17	; 0x11
    1886:	48 88       	ldd	r4, Y+16	; 0x10
    1888:	5f 84       	ldd	r5, Y+15	; 0x0f
    188a:	6e 84       	ldd	r6, Y+14	; 0x0e
    188c:	7d 84       	ldd	r7, Y+13	; 0x0d
    188e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1890:	9b 84       	ldd	r9, Y+11	; 0x0b
    1892:	aa 84       	ldd	r10, Y+10	; 0x0a
    1894:	b9 84       	ldd	r11, Y+9	; 0x09
    1896:	c8 84       	ldd	r12, Y+8	; 0x08
    1898:	df 80       	ldd	r13, Y+7	; 0x07
    189a:	ee 80       	ldd	r14, Y+6	; 0x06
    189c:	fd 80       	ldd	r15, Y+5	; 0x05
    189e:	0c 81       	ldd	r16, Y+4	; 0x04
    18a0:	1b 81       	ldd	r17, Y+3	; 0x03
    18a2:	aa 81       	ldd	r26, Y+2	; 0x02
    18a4:	b9 81       	ldd	r27, Y+1	; 0x01
    18a6:	ce 0f       	add	r28, r30
    18a8:	d1 1d       	adc	r29, r1
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	ed 01       	movw	r28, r26
    18b6:	08 95       	ret

000018b8 <_exit>:
    18b8:	f8 94       	cli

000018ba <__stop_program>:
    18ba:	ff cf       	rjmp	.-2      	; 0x18ba <__stop_program>
