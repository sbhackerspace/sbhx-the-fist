
AVRSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  000018d6  0000196a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000154  0080015e  0080015e  000019c8  2**0
                  ALLOC
  3 .stab         000011dc  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000047e  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000005d8  00000000  00000000  00003028  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009242  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000264d  00000000  00000000  0000c842  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004065  00000000  00000000  0000ee8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f78  00000000  00000000  00012ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b03  00000000  00000000  00013e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a16  00000000  00000000  0001796f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  0001d385  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
       2:	00 00       	nop
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	bc c4       	rjmp	.+2424   	; 0x9a2 <__vector_10>
      2a:	00 00       	nop
      2c:	7e c5       	rjmp	.+2812   	; 0xb2a <__vector_11>
      2e:	00 00       	nop
      30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
      36:	00 00       	nop
      38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ca c1       	rjmp	.+916    	; 0x3e6 <__vector_20>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
      62:	00 00       	nop
      64:	8e c0       	rjmp	.+284    	; 0x182 <__bad_interrupt>
      66:	00 00       	nop
      68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
      92:	00 00       	nop
      94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
      96:	00 00       	nop
      98:	74 c0       	rjmp	.+232    	; 0x182 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	72 c0       	rjmp	.+228    	; 0x182 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	70 c0       	rjmp	.+224    	; 0x182 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6e c0       	rjmp	.+220    	; 0x182 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6c c0       	rjmp	.+216    	; 0x182 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
      bc:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
      cc:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     10a:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     11a:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12a:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000138 <DeviceDescriptor>:
     138:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     148:	dc 01                                               ..

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	da e0       	ldi	r29, 0x0A	; 10
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	e6 ed       	ldi	r30, 0xD6	; 214
     15e:	f8 e1       	ldi	r31, 0x18	; 24
     160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x10>
     162:	05 90       	lpm	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	ae 35       	cpi	r26, 0x5E	; 94
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0xc>

0000016c <__do_clear_bss>:
     16c:	12 e0       	ldi	r17, 0x02	; 2
     16e:	ae e5       	ldi	r26, 0x5E	; 94
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	a2 3b       	cpi	r26, 0xB2	; 178
     178:	b1 07       	cpc	r27, r17
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	3b d0       	rcall	.+118    	; 0x1f4 <main>
     17e:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     184:	9b b1       	in	r25, 0x0b	; 11
     186:	9f 70       	andi	r25, 0x0F	; 15
     188:	98 2b       	or	r25, r24
     18a:	9b b9       	out	0x0b, r25	; 11
			}
     18c:	08 95       	ret

0000018e <timerInit>:
    timerInit();
}

void timerInit()
{
    cli();
     18e:	f8 94       	cli
    
    TCCR1A = 0;
     190:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = 0xC;
     194:	8c e0       	ldi	r24, 0x0C	; 12
     196:	80 93 81 00 	sts	0x0081, r24
    TCCR1C = 0;
     19a:	10 92 82 00 	sts	0x0082, r1
    TCNT1= 0;
     19e:	10 92 85 00 	sts	0x0085, r1
     1a2:	10 92 84 00 	sts	0x0084, r1
    
    OCR1A = 0xF440;
     1a6:	80 e4       	ldi	r24, 0x40	; 64
     1a8:	94 ef       	ldi	r25, 0xF4	; 244
     1aa:	90 93 89 00 	sts	0x0089, r25
     1ae:	80 93 88 00 	sts	0x0088, r24
    
    TIMSK1 = 1;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 6f 00 	sts	0x006F, r24
    
    sei();
     1b8:	78 94       	sei
}
     1ba:	08 95       	ret

000001bc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1bc:	84 b7       	in	r24, 0x34	; 52
     1be:	87 7f       	andi	r24, 0xF7	; 247
     1c0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1c2:	88 e1       	ldi	r24, 0x18	; 24
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	80 93 60 00 	sts	0x0060, r24
     1cc:	10 92 60 00 	sts	0x0060, r1
     1d0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	80 e8       	ldi	r24, 0x80	; 128
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	f8 94       	cli
     1da:	80 93 61 00 	sts	0x0061, r24
     1de:	90 93 61 00 	sts	0x0061, r25
     1e2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1e4:	8a b1       	in	r24, 0x0a	; 10
     1e6:	80 6f       	ori	r24, 0xF0	; 240
     1e8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	8f 70       	andi	r24, 0x0F	; 15
     1ee:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     1f0:	bb d3       	rcall	.+1910   	; 0x968 <USB_Init>
     1f2:	cd cf       	rjmp	.-102    	; 0x18e <timerInit>

000001f4 <main>:
    timerInit();
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
}
     1f8:	cd b7       	in	r28, 0x3d	; 61

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	a8 97       	sbiw	r28, 0x28	; 40
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
    #define STRING_LENGTH 30
    char string[STRING_LENGTH];
    char *str = (char *)&string;
    char i = 0;
    
	SetupHardware();
     208:	d9 df       	rcall	.-78     	; 0x1bc <SetupHardware>
     20a:	e2 e6       	ldi	r30, 0x62	; 98
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	2f b7       	in	r18, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     210:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     212:	8e e6       	ldi	r24, 0x6E	; 110

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	91 83       	std	Z+1, r25	; 0x01
     218:	80 83       	st	Z, r24
     21a:	93 83       	std	Z+3, r25	; 0x03
			Buffer->Out    = DataPtr;
     21c:	82 83       	std	Z+2, r24	; 0x02
     21e:	95 83       	std	Z+5, r25	; 0x05
			Buffer->Start  = &DataPtr[0];
     220:	84 83       	std	Z+4, r24	; 0x04
     222:	8e ee       	ldi	r24, 0xEE	; 238
			Buffer->End    = &DataPtr[Size];
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	97 83       	std	Z+7, r25	; 0x07
     228:	86 83       	std	Z+6, r24	; 0x06
     22a:	80 e8       	ldi	r24, 0x80	; 128
			Buffer->Size   = Size;
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	91 87       	std	Z+9, r25	; 0x09
     230:	80 87       	std	Z+8, r24	; 0x08
     232:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     234:	12 86       	std	Z+10, r1	; 0x0a
     236:	2f bf       	out	0x3f, r18	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     238:	ee ee       	ldi	r30, 0xEE	; 238
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     23a:	f1 e0       	ldi	r31, 0x01	; 1
     23c:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     23e:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     240:	2a ef       	ldi	r18, 0xFA	; 250

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     242:	31 e0       	ldi	r19, 0x01	; 1
     244:	31 83       	std	Z+1, r19	; 0x01
     246:	20 83       	st	Z, r18
     248:	33 83       	std	Z+3, r19	; 0x03
			Buffer->Out    = DataPtr;
     24a:	22 83       	std	Z+2, r18	; 0x02
     24c:	35 83       	std	Z+5, r19	; 0x05
			Buffer->Start  = &DataPtr[0];
     24e:	24 83       	std	Z+4, r18	; 0x04
     250:	2a e7       	ldi	r18, 0x7A	; 122
			Buffer->End    = &DataPtr[Size];
     252:	32 e0       	ldi	r19, 0x02	; 2
     254:	37 83       	std	Z+7, r19	; 0x07
     256:	26 83       	std	Z+6, r18	; 0x06
     258:	91 87       	std	Z+9, r25	; 0x09
			Buffer->Size   = Size;
     25a:	80 87       	std	Z+8, r24	; 0x08
     25c:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     25e:	12 86       	std	Z+10, r1	; 0x0a
     260:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     262:	80 e3       	ldi	r24, 0x30	; 48

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));
    
    CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	6a e7       	ldi	r22, 0x7A	; 122
     268:	72 e0       	ldi	r23, 0x02	; 2
     26a:	0e 94 3d 09 	call	0x127a	; 0x127a <CDC_Device_CreateStream>
     26e:	80 e1       	ldi	r24, 0x10	; 16

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     270:	89 df       	rcall	.-238    	; 0x184 <LEDs_SetAllLEDs>
     272:	78 94       	sei
     274:	8b e0       	ldi	r24, 0x0B	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     276:	e8 2e       	mov	r14, r24
 */
int main(void)
{
    #define STRING_LENGTH 30
    char string[STRING_LENGTH];
    char *str = (char *)&string;
     278:	f1 2c       	mov	r15, r1
     27a:	ec 0e       	add	r14, r28
     27c:	fd 1e       	adc	r15, r29
     27e:	8e e1       	ldi	r24, 0x1E	; 30
     280:	f7 01       	movw	r30, r14
    CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
    
    memset(str, '\0', STRING_LENGTH);
     282:	11 92       	st	Z+, r1
     284:	8a 95       	dec	r24
     286:	e9 f7       	brne	.-6      	; 0x282 <main+0x8e>
     288:	80 e3       	ldi	r24, 0x30	; 48
     28a:	91 e0       	ldi	r25, 0x01	; 1
    CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Ready\r\n");
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	71 e0       	ldi	r23, 0x01	; 1
     290:	d7 d6       	rcall	.+3502   	; 0x1040 <CDC_Device_SendString>
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	4a e7       	ldi	r20, 0x7A	; 122
     296:	a4 2e       	mov	r10, r20
int main(void)
{
    #define STRING_LENGTH 30
    char string[STRING_LENGTH];
    char *str = (char *)&string;
    char i = 0;
     298:	42 e0       	ldi	r20, 0x02	; 2
	{
        char compare[10];
        
        if(completeWord){
            completeWord = 0;
            fprintf(&USBSerialStream, "fprint: ");
     29a:	b4 2e       	mov	r11, r20
     29c:	58 e8       	ldi	r21, 0x88	; 136
     29e:	85 2e       	mov	r8, r21
     2a0:	52 e0       	ldi	r21, 0x02	; 2
            fprintf(&USBSerialStream, intString);
     2a2:	95 2e       	mov	r9, r21
     2a4:	ee e1       	ldi	r30, 0x1E	; 30
     2a6:	de 2e       	mov	r13, r30
     2a8:	37 01       	movw	r6, r14
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "CDC: ");
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, intString);
            memset(intString, '\0', 30);
     2aa:	80 91 5f 01 	lds	r24, 0x015F
     2ae:	88 23       	and	r24, r24

	for (;;)
	{
        char compare[10];
        
        if(completeWord){
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <main+0xc0>
     2b2:	7c c0       	rjmp	.+248    	; 0x3ac <main+0x1b8>
     2b4:	10 92 5f 01 	sts	0x015F, r1
     2b8:	88 e0       	ldi	r24, 0x08	; 8
            completeWord = 0;
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	6a e7       	ldi	r22, 0x7A	; 122
            fprintf(&USBSerialStream, "fprint: ");
     2be:	72 e0       	ldi	r23, 0x02	; 2
     2c0:	0e 94 a0 09 	call	0x1340	; 0x1340 <fputs>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <main+0xd2>
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <main+0xd4>
     2c8:	ed b7       	in	r30, 0x3d	; 61
            fprintf(&USBSerialStream, intString);
     2ca:	fe b7       	in	r31, 0x3e	; 62
     2cc:	b2 82       	std	Z+2, r11	; 0x02
     2ce:	a1 82       	std	Z+1, r10	; 0x01
     2d0:	94 82       	std	Z+4, r9	; 0x04
     2d2:	83 82       	std	Z+3, r8	; 0x03
     2d4:	0e 94 90 09 	call	0x1320	; 0x1320 <fprintf>
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "CDC: ");
     2de:	0f 90       	pop	r0
     2e0:	80 e3       	ldi	r24, 0x30	; 48
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	61 e1       	ldi	r22, 0x11	; 17
     2e6:	71 e0       	ldi	r23, 0x01	; 1
     2e8:	ab d6       	rcall	.+3414   	; 0x1040 <CDC_Device_SendString>
     2ea:	80 e3       	ldi	r24, 0x30	; 48
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	68 e8       	ldi	r22, 0x88	; 136
     2f0:	72 e0       	ldi	r23, 0x02	; 2
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, intString);
     2f2:	a6 d6       	rcall	.+3404   	; 0x1040 <CDC_Device_SendString>
     2f4:	f4 01       	movw	r30, r8
     2f6:	2d 2d       	mov	r18, r13
     2f8:	11 92       	st	Z+, r1
     2fa:	2a 95       	dec	r18
     2fc:	e9 f7       	brne	.-6      	; 0x2f8 <main+0x104>
            memset(intString, '\0', 30);
     2fe:	10 92 61 01 	sts	0x0161, r1
     302:	10 92 60 01 	sts	0x0160, r1
     306:	52 c0       	rjmp	.+164    	; 0x3ac <main+0x1b8>
            intIndex = 0;
     308:	80 e3       	ldi	r24, 0x30	; 48
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	6f d7       	rcall	.+3806   	; 0x11ec <CDC_Device_ReceiveByte>
     30e:	08 2f       	mov	r16, r24
     310:	8d 30       	cpi	r24, 0x0D	; 13
        
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        while (CDC_Device_BytesReceived
               (&VirtualSerial_CDC_Interface))
        {
            char byte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     312:	d1 f5       	brne	.+116    	; 0x388 <main+0x194>
     314:	ce 01       	movw	r24, r28
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	b7 01       	movw	r22, r14
     31a:	43 e0       	ldi	r20, 0x03	; 3
            
            if(byte == '\r'){
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	f1 d7       	rcall	.+4066   	; 0x1302 <strncpy>
                strncpy(compare, str, 3);
     320:	81 2f       	mov	r24, r17
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	f7 01       	movw	r30, r14
     326:	e8 0f       	add	r30, r24
     328:	f9 1f       	adc	r31, r25
     32a:	00 83       	st	Z, r16
     32c:	ec e0       	ldi	r30, 0x0C	; 12
                
                string[i] = '\r';
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ec 0f       	add	r30, r28
     332:	fd 1f       	adc	r31, r29
     334:	8e 0f       	add	r24, r30
     336:	9f 1f       	adc	r25, r31
     338:	2a e0       	ldi	r18, 0x0A	; 10
                string[i+1] = '\n';
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
     33e:	00 d0       	rcall	.+0      	; 0x340 <main+0x14c>
     340:	00 d0       	rcall	.+0      	; 0x342 <main+0x14e>
     342:	ed b7       	in	r30, 0x3d	; 61
     344:	fe b7       	in	r31, 0x3e	; 62
     346:	b2 82       	std	Z+2, r11	; 0x02
     348:	a1 82       	std	Z+1, r10	; 0x01
     34a:	f4 82       	std	Z+4, r15	; 0x04
                fprintf(&USBSerialStream, string);
     34c:	e3 82       	std	Z+3, r14	; 0x03
     34e:	e8 d7       	rcall	.+4048   	; 0x1320 <fprintf>
     350:	f7 01       	movw	r30, r14
     352:	2d 2d       	mov	r18, r13
     354:	11 92       	st	Z+, r1
     356:	2a 95       	dec	r18
     358:	e9 f7       	brne	.-6      	; 0x354 <main+0x160>
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
                i = 0;
                memset(str, '\0', STRING_LENGTH);
     360:	0f 90       	pop	r0
     362:	ce 01       	movw	r24, r28
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	67 e1       	ldi	r22, 0x17	; 23
     368:	71 e0       	ldi	r23, 0x01	; 1
                if(strncmp(compare, "led", 3) == 0){
     36a:	43 e0       	ldi	r20, 0x03	; 3
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	bb d7       	rcall	.+3958   	; 0x12e6 <strncmp>
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	19 f5       	brne	.+70     	; 0x3ba <main+0x1c6>
     374:	8b e1       	ldi	r24, 0x1B	; 27
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	6a e7       	ldi	r22, 0x7A	; 122
     37a:	72 e0       	ldi	r23, 0x02	; 2
     37c:	e1 d7       	rcall	.+4034   	; 0x1340 <fputs>
     37e:	8b b1       	in	r24, 0x0b	; 11
     380:	90 e1       	ldi	r25, 0x10	; 16
     382:	89 27       	eor	r24, r25
     384:	8b b9       	out	0x0b, r24	; 11
                    //CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Set LED\r\n");
                    fprintf(&USBSerialStream, "Set LED\r\n");
     386:	19 c0       	rjmp	.+50     	; 0x3ba <main+0x1c6>
     388:	f3 01       	movw	r30, r6
     38a:	e1 0f       	add	r30, r17
     38c:	f1 1d       	adc	r31, r1
     38e:	80 83       	st	Z, r24
     390:	1f 5f       	subi	r17, 0xFF	; 255
                    PORTD ^= 1<<4;
     392:	1a 31       	cpi	r17, 0x1A	; 26
     394:	58 f0       	brcs	.+22     	; 0x3ac <main+0x1b8>
     396:	85 e2       	ldi	r24, 0x25	; 37
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	6a e7       	ldi	r22, 0x7A	; 122
                }
                //strcpy(str, "echo: ");
                break;
            }
            string[i] = byte;
     39c:	72 e0       	ldi	r23, 0x02	; 2
     39e:	d0 d7       	rcall	.+4000   	; 0x1340 <fputs>
     3a0:	f3 01       	movw	r30, r6
     3a2:	2d 2d       	mov	r18, r13
            i++;
     3a4:	11 92       	st	Z+, r1
            if(i >= STRING_LENGTH - 4){
     3a6:	2a 95       	dec	r18
     3a8:	e9 f7       	brne	.-6      	; 0x3a4 <main+0x1b0>
                fprintf(&USBSerialStream, "Overflow\r\n");
     3aa:	10 e0       	ldi	r17, 0x00	; 0
     3ac:	80 e3       	ldi	r24, 0x30	; 48
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	e7 d6       	rcall	.+3534   	; 0x1180 <CDC_Device_BytesReceived>
     3b2:	00 97       	sbiw	r24, 0x00	; 0
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <main+0x1c4>
                
                i = 0;
                memset(str, '\0', STRING_LENGTH);
     3b6:	a8 cf       	rjmp	.-176    	; 0x308 <main+0x114>
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <main+0x1c8>
     3ba:	10 e0       	ldi	r17, 0x00	; 0
     3bc:	80 e3       	ldi	r24, 0x30	; 48
     3be:	91 e0       	ldi	r25, 0x01	; 1
            string[i] = byte;
            i++;
            if(i >= STRING_LENGTH - 4){
                fprintf(&USBSerialStream, "Overflow\r\n");
                
                i = 0;
     3c0:	c8 d6       	rcall	.+3472   	; 0x1152 <CDC_Device_USBTask>
            intIndex = 0;
        }
        
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        while (CDC_Device_BytesReceived
               (&VirtualSerial_CDC_Interface))
     3c2:	53 d5       	rcall	.+2726   	; 0xe6a <USB_USBTask>
     3c4:	72 cf       	rjmp	.-284    	; 0x2aa <main+0xb6>

000003c6 <EVENT_USB_Device_Connect>:
     3c6:	80 ea       	ldi	r24, 0xA0	; 160
     3c8:	dd ce       	rjmp	.-582    	; 0x184 <LEDs_SetAllLEDs>

000003ca <EVENT_USB_Device_Disconnect>:
            memset(intString, '\0', 30);
            intIndex = 0;
        }
        
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        while (CDC_Device_BytesReceived
     3ca:	80 e1       	ldi	r24, 0x10	; 16
     3cc:	db ce       	rjmp	.-586    	; 0x184 <LEDs_SetAllLEDs>

000003ce <EVENT_USB_Device_ConfigurationChanged>:
     3ce:	80 e3       	ldi	r24, 0x30	; 48
     3d0:	91 e0       	ldi	r25, 0x01	; 1
                strncpy(compare, str, 3);
                
                string[i] = '\r';
                string[i+1] = '\n';
                fprintf(&USBSerialStream, string);
                i = 0;
     3d2:	12 d6       	rcall	.+3108   	; 0xff8 <CDC_Device_ConfigureEndpoints>
        /*
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
        */

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     3d4:	88 23       	and	r24, r24
     3d6:	11 f0       	breq	.+4      	; 0x3dc <EVENT_USB_Device_ConfigurationChanged+0xe>
     3d8:	80 e6       	ldi	r24, 0x60	; 96
     3da:	01 c0       	rjmp	.+2      	; 0x3de <EVENT_USB_Device_ConfigurationChanged+0x10>
		USB_USBTask();
     3dc:	80 e9       	ldi	r24, 0x90	; 144
     3de:	d2 ce       	rjmp	.-604    	; 0x184 <LEDs_SetAllLEDs>

000003e0 <EVENT_USB_Device_ControlRequest>:
	}
     3e0:	80 e3       	ldi	r24, 0x30	; 48
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     3e2:	91 e0       	ldi	r25, 0x01	; 1
}
     3e4:	5d c5       	rjmp	.+2746   	; 0xea0 <CDC_Device_ProcessControlRequest>

000003e6 <__vector_20>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     3e6:	1f 92       	push	r1
}
     3e8:	0f 92       	push	r0
    }
}
 */

ISR(TIMER1_OVF_vect)
{
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	0f 92       	push	r0
     3ee:	11 24       	eor	r1, r1
     3f0:	2f 93       	push	r18
     3f2:	3f 93       	push	r19
     3f4:	4f 93       	push	r20
     3f6:	5f 93       	push	r21
     3f8:	6f 93       	push	r22
     3fa:	7f 93       	push	r23
     3fc:	8f 93       	push	r24
     3fe:	9f 93       	push	r25
     400:	af 93       	push	r26
     402:	bf 93       	push	r27
     404:	ef 93       	push	r30
     406:	ff 93       	push	r31
    timerVal++;
     408:	80 91 5e 01 	lds	r24, 0x015E
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	80 93 5e 01 	sts	0x015E, r24
    TCNT0 = 0;
     412:	16 bc       	out	0x26, r1	; 38
    if(timerVal == 60){
     414:	8c 33       	cpi	r24, 0x3C	; 60
     416:	c1 f4       	brne	.+48     	; 0x448 <__vector_20+0x62>
        timerVal = 0;
     418:	10 92 5e 01 	sts	0x015E, r1
        TCNT0 = 0;
     41c:	16 bc       	out	0x26, r1	; 38
        PORTD ^= (1<<4);
     41e:	8b b1       	in	r24, 0x0b	; 11
     420:	90 e1       	ldi	r25, 0x10	; 16
     422:	89 27       	eor	r24, r25
     424:	8b b9       	out	0x0b, r24	; 11
        fprintf(&USBSerialStream, 'tick');
     426:	00 d0       	rcall	.+0      	; 0x428 <__vector_20+0x42>
     428:	00 d0       	rcall	.+0      	; 0x42a <__vector_20+0x44>
     42a:	8a e7       	ldi	r24, 0x7A	; 122
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	ed b7       	in	r30, 0x3d	; 61
     430:	fe b7       	in	r31, 0x3e	; 62
     432:	92 83       	std	Z+2, r25	; 0x02
     434:	81 83       	std	Z+1, r24	; 0x01
     436:	8b e6       	ldi	r24, 0x6B	; 107
     438:	93 e6       	ldi	r25, 0x63	; 99
     43a:	94 83       	std	Z+4, r25	; 0x04
     43c:	83 83       	std	Z+3, r24	; 0x03
     43e:	70 d7       	rcall	.+3808   	; 0x1320 <fprintf>
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	ff 91       	pop	r31
    }
}
     44a:	ef 91       	pop	r30
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	7f 91       	pop	r23
     456:	6f 91       	pop	r22
     458:	5f 91       	pop	r21
     45a:	4f 91       	pop	r20
     45c:	3f 91       	pop	r19
     45e:	2f 91       	pop	r18
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <EVENT_CDC_Device_LineEncodingChanged>:
     46a:	cf 93       	push	r28
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     46c:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     46e:	a1 8d       	ldd	r26, Z+25	; 0x19
     470:	a1 50       	subi	r26, 0x01	; 1
     472:	a2 30       	cpi	r26, 0x02	; 2
     474:	28 f4       	brcc	.+10     	; 0x480 <EVENT_CDC_Device_LineEncodingChanged+0x16>
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	a5 5b       	subi	r26, 0xB5	; 181
     47a:	be 4f       	sbci	r27, 0xFE	; 254
     47c:	cc 91       	ld	r28, X
     47e:	01 c0       	rjmp	.+2      	; 0x482 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     480:	c0 e0       	ldi	r28, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     482:	80 8d       	ldd	r24, Z+24	; 0x18
     484:	82 30       	cpi	r24, 0x02	; 2
     486:	09 f4       	brne	.+2      	; 0x48a <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
     488:	c8 60       	ori	r28, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     48a:	82 8d       	ldd	r24, Z+26	; 0x1a
     48c:	87 30       	cpi	r24, 0x07	; 7
     48e:	31 f0       	breq	.+12     	; 0x49c <EVENT_CDC_Device_LineEncodingChanged+0x32>
     490:	88 30       	cpi	r24, 0x08	; 8
     492:	31 f0       	breq	.+12     	; 0x4a0 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     494:	86 30       	cpi	r24, 0x06	; 6
     496:	29 f4       	brne	.+10     	; 0x4a2 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     498:	c2 60       	ori	r28, 0x02	; 2
			break;
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     49c:	c4 60       	ori	r28, 0x04	; 4
			break;
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     4a0:	c6 60       	ori	r28, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     4a2:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     4a6:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     4aa:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     4ae:	24 89       	ldd	r18, Z+20	; 0x14
     4b0:	35 89       	ldd	r19, Z+21	; 0x15
     4b2:	46 89       	ldd	r20, Z+22	; 0x16
     4b4:	57 89       	ldd	r21, Z+23	; 0x17
     4b6:	da 01       	movw	r26, r20
     4b8:	c9 01       	movw	r24, r18
     4ba:	b6 95       	lsr	r27
     4bc:	a7 95       	ror	r26
     4be:	97 95       	ror	r25
     4c0:	87 95       	ror	r24
     4c2:	80 58       	subi	r24, 0x80	; 128
     4c4:	9b 47       	sbci	r25, 0x7B	; 123
     4c6:	a1 4e       	sbci	r26, 0xE1	; 225
     4c8:	bf 4f       	sbci	r27, 0xFF	; 255
     4ca:	bc 01       	movw	r22, r24
     4cc:	cd 01       	movw	r24, r26
     4ce:	e9 d6       	rcall	.+3538   	; 0x12a2 <__udivmodsi4>
     4d0:	21 50       	subi	r18, 0x01	; 1
     4d2:	30 40       	sbci	r19, 0x00	; 0
     4d4:	30 93 cd 00 	sts	0x00CD, r19
     4d8:	20 93 cc 00 	sts	0x00CC, r18
     4dc:	c0 93 ca 00 	sts	0x00CA, r28

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     4e0:	82 e0       	ldi	r24, 0x02	; 2
	UCSR1A = (1 << U2X1);
     4e2:	80 93 c8 00 	sts	0x00C8, r24
     4e6:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     4e8:	80 93 c9 00 	sts	0x00C9, r24
     4ec:	cf 91       	pop	r28
}
     4ee:	08 95       	ret

000004f0 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4f0:	92 30       	cpi	r25, 0x02	; 2
     4f2:	29 f0       	breq	.+10     	; 0x4fe <CALLBACK_USB_GetDescriptor+0xe>
     4f4:	93 30       	cpi	r25, 0x03	; 3
     4f6:	41 f0       	breq	.+16     	; 0x508 <CALLBACK_USB_GetDescriptor+0x18>
     4f8:	91 30       	cpi	r25, 0x01	; 1
     4fa:	e9 f4       	brne	.+58     	; 0x536 <CALLBACK_USB_GetDescriptor+0x46>
     4fc:	17 c0       	rjmp	.+46     	; 0x52c <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     4fe:	8e e3       	ldi	r24, 0x3E	; 62
     500:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     502:	ea ef       	ldi	r30, 0xFA	; 250
     504:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     506:	1b c0       	rjmp	.+54     	; 0x53e <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     508:	81 30       	cpi	r24, 0x01	; 1
     50a:	41 f0       	breq	.+16     	; 0x51c <CALLBACK_USB_GetDescriptor+0x2c>
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	18 f0       	brcs	.+6      	; 0x516 <CALLBACK_USB_GetDescriptor+0x26>
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	89 f4       	brne	.+34     	; 0x536 <CALLBACK_USB_GetDescriptor+0x46>
     514:	06 c0       	rjmp	.+12     	; 0x522 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     516:	e6 ef       	ldi	r30, 0xF6	; 246
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	05 c0       	rjmp	.+10     	; 0x526 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     51c:	ec ed       	ldi	r30, 0xDC	; 220
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	02 c0       	rjmp	.+4      	; 0x526 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     522:	ec ea       	ldi	r30, 0xAC	; 172
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	84 91       	lpm	r24, Z
     528:	90 e0       	ldi	r25, 0x00	; 0
					break;
     52a:	09 c0       	rjmp	.+18     	; 0x53e <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     52c:	82 e1       	ldi	r24, 0x12	; 18
     52e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     530:	e8 e3       	ldi	r30, 0x38	; 56
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	04 c0       	rjmp	.+8      	; 0x53e <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     53a:	e0 e0       	ldi	r30, 0x00	; 0
     53c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     53e:	da 01       	movw	r26, r20
     540:	11 96       	adiw	r26, 0x01	; 1
     542:	fc 93       	st	X, r31
     544:	ee 93       	st	-X, r30
	return Size;
}
     546:	08 95       	ret

00000548 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     548:	af 92       	push	r10
     54a:	bf 92       	push	r11
     54c:	cf 92       	push	r12
     54e:	df 92       	push	r13
     550:	ef 92       	push	r14
     552:	ff 92       	push	r15
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	ec 01       	movw	r28, r24
     55c:	7b 01       	movw	r14, r22
     55e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     560:	92 d1       	rcall	.+804    	; 0x886 <Endpoint_WaitUntilReady>
     562:	18 2f       	mov	r17, r24
     564:	88 23       	and	r24, r24
     566:	a1 f5       	brne	.+104    	; 0x5d0 <Endpoint_Write_Stream_LE+0x88>
     568:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     56a:	d1 04       	cpc	r13, r1
     56c:	39 f0       	breq	.+14     	; 0x57c <Endpoint_Write_Stream_LE+0x34>
     56e:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     570:	20 81       	ld	r18, Z
     572:	31 81       	ldd	r19, Z+1	; 0x01
     574:	e2 1a       	sub	r14, r18
     576:	f3 0a       	sbc	r15, r19
     578:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     57a:	d3 1f       	adc	r29, r19
     57c:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     57e:	bb 24       	eor	r11, r11
     580:	22 c0       	rjmp	.+68     	; 0x5c6 <Endpoint_Write_Stream_LE+0x7e>
     582:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     586:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     588:	15 c0       	rjmp	.+42     	; 0x5b4 <Endpoint_Write_Stream_LE+0x6c>
     58a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     58e:	8e 77       	andi	r24, 0x7E	; 126
     590:	80 93 e8 00 	sts	0x00E8, r24
     594:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     596:	d1 04       	cpc	r13, r1
     598:	49 f0       	breq	.+18     	; 0x5ac <Endpoint_Write_Stream_LE+0x64>
     59a:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     59c:	80 81       	ld	r24, Z
     59e:	91 81       	ldd	r25, Z+1	; 0x01
     5a0:	8a 0d       	add	r24, r10
     5a2:	9b 1d       	adc	r25, r11
     5a4:	91 83       	std	Z+1, r25	; 0x01
     5a6:	80 83       	st	Z, r24
     5a8:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     5aa:	12 c0       	rjmp	.+36     	; 0x5d0 <Endpoint_Write_Stream_LE+0x88>
     5ac:	6c d1       	rcall	.+728    	; 0x886 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     5ae:	88 23       	and	r24, r24
     5b0:	51 f0       	breq	.+20     	; 0x5c6 <Endpoint_Write_Stream_LE+0x7e>
     5b2:	0d c0       	rjmp	.+26     	; 0x5ce <Endpoint_Write_Stream_LE+0x86>
     5b4:	89 91       	ld	r24, Y+
     5b6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5ba:	08 94       	sec
     5bc:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     5be:	f1 08       	sbc	r15, r1
     5c0:	08 94       	sec
     5c2:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     5c4:	b1 1c       	adc	r11, r1
     5c6:	e1 14       	cp	r14, r1
     5c8:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     5ca:	d9 f6       	brne	.-74     	; 0x582 <Endpoint_Write_Stream_LE+0x3a>
     5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <Endpoint_Write_Stream_LE+0x88>
     5ce:	18 2f       	mov	r17, r24
     5d0:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     5d2:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	bf 90       	pop	r11
     5e2:	af 90       	pop	r10
     5e4:	08 95       	ret

000005e6 <Endpoint_Write_Control_Stream_LE>:
     5e6:	40 91 b0 02 	lds	r20, 0x02B0
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5ea:	50 91 b1 02 	lds	r21, 0x02B1
     5ee:	46 17       	cp	r20, r22
     5f0:	57 07       	cpc	r21, r23
     5f2:	20 f4       	brcc	.+8      	; 0x5fc <Endpoint_Write_Control_Stream_LE+0x16>
     5f4:	ba 01       	movw	r22, r20
     5f6:	fc 01       	movw	r30, r24
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	3b c0       	rjmp	.+118    	; 0x672 <Endpoint_Write_Control_Stream_LE+0x8c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5fc:	61 15       	cp	r22, r1
     5fe:	71 05       	cpc	r23, r1
     600:	d1 f7       	brne	.-12     	; 0x5f6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     602:	40 91 e8 00 	lds	r20, 0x00E8
     606:	4e 77       	andi	r20, 0x7E	; 126
     608:	40 93 e8 00 	sts	0x00E8, r20
     60c:	f4 cf       	rjmp	.-24     	; 0x5f6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     60e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     610:	88 23       	and	r24, r24
     612:	09 f4       	brne	.+2      	; 0x616 <Endpoint_Write_Control_Stream_LE+0x30>
     614:	43 c0       	rjmp	.+134    	; 0x69c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     616:	85 30       	cpi	r24, 0x05	; 5
     618:	e9 f1       	breq	.+122    	; 0x694 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     61a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     61e:	83 fd       	sbrc	r24, 3
     620:	3b c0       	rjmp	.+118    	; 0x698 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     622:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     626:	82 fd       	sbrc	r24, 2
     628:	2f c0       	rjmp	.+94     	; 0x688 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     62a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     62e:	80 ff       	sbrs	r24, 0
     630:	20 c0       	rjmp	.+64     	; 0x672 <Endpoint_Write_Control_Stream_LE+0x8c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     632:	90 91 f3 00 	lds	r25, 0x00F3
     636:	80 91 f2 00 	lds	r24, 0x00F2
     63a:	39 2f       	mov	r19, r25
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	82 2b       	or	r24, r18
     642:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     644:	06 c0       	rjmp	.+12     	; 0x652 <Endpoint_Write_Control_Stream_LE+0x6c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     646:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     648:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     64c:	61 50       	subi	r22, 0x01	; 1
     64e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     650:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     652:	61 15       	cp	r22, r1
     654:	71 05       	cpc	r23, r1
     656:	19 f0       	breq	.+6      	; 0x65e <Endpoint_Write_Control_Stream_LE+0x78>
     658:	88 30       	cpi	r24, 0x08	; 8
     65a:	91 05       	cpc	r25, r1
     65c:	a0 f3       	brcs	.-24     	; 0x646 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     65e:	41 e0       	ldi	r20, 0x01	; 1
     660:	88 30       	cpi	r24, 0x08	; 8
     662:	91 05       	cpc	r25, r1
     664:	09 f0       	breq	.+2      	; 0x668 <Endpoint_Write_Control_Stream_LE+0x82>
     666:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     668:	80 91 e8 00 	lds	r24, 0x00E8
     66c:	8e 77       	andi	r24, 0x7E	; 126
     66e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     672:	61 15       	cp	r22, r1
     674:	71 05       	cpc	r23, r1
     676:	59 f6       	brne	.-106    	; 0x60e <Endpoint_Write_Control_Stream_LE+0x28>
     678:	44 23       	and	r20, r20
     67a:	49 f6       	brne	.-110    	; 0x60e <Endpoint_Write_Control_Stream_LE+0x28>
     67c:	05 c0       	rjmp	.+10     	; 0x688 <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     67e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     680:	88 23       	and	r24, r24
     682:	61 f0       	breq	.+24     	; 0x69c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     684:	85 30       	cpi	r24, 0x05	; 5
     686:	61 f0       	breq	.+24     	; 0x6a0 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     688:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     68c:	82 ff       	sbrs	r24, 2
     68e:	f7 cf       	rjmp	.-18     	; 0x67e <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     694:	83 e0       	ldi	r24, 0x03	; 3
     696:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6a0:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6a2:	08 95       	ret

000006a4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     6a4:	40 91 b0 02 	lds	r20, 0x02B0
     6a8:	50 91 b1 02 	lds	r21, 0x02B1
     6ac:	46 17       	cp	r20, r22
     6ae:	57 07       	cpc	r21, r23
     6b0:	20 f4       	brcc	.+8      	; 0x6ba <Endpoint_Write_Control_PStream_LE+0x16>
     6b2:	ba 01       	movw	r22, r20
     6b4:	fc 01       	movw	r30, r24
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	3d c0       	rjmp	.+122    	; 0x734 <Endpoint_Write_Control_PStream_LE+0x90>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     6ba:	61 15       	cp	r22, r1
     6bc:	71 05       	cpc	r23, r1
     6be:	d1 f7       	brne	.-12     	; 0x6b4 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6c0:	40 91 e8 00 	lds	r20, 0x00E8
     6c4:	4e 77       	andi	r20, 0x7E	; 126
     6c6:	40 93 e8 00 	sts	0x00E8, r20
     6ca:	f4 cf       	rjmp	.-24     	; 0x6b4 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6cc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6ce:	88 23       	and	r24, r24
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0x30>
     6d2:	45 c0       	rjmp	.+138    	; 0x75e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6d4:	85 30       	cpi	r24, 0x05	; 5
     6d6:	09 f4       	brne	.+2      	; 0x6da <Endpoint_Write_Control_PStream_LE+0x36>
     6d8:	3e c0       	rjmp	.+124    	; 0x756 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     6da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     6de:	83 fd       	sbrc	r24, 3
     6e0:	3c c0       	rjmp	.+120    	; 0x75a <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6e2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     6e6:	82 fd       	sbrc	r24, 2
     6e8:	30 c0       	rjmp	.+96     	; 0x74a <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6ea:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     6ee:	80 ff       	sbrs	r24, 0
     6f0:	21 c0       	rjmp	.+66     	; 0x734 <Endpoint_Write_Control_PStream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     6f2:	90 91 f3 00 	lds	r25, 0x00F3
     6f6:	80 91 f2 00 	lds	r24, 0x00F2
     6fa:	39 2f       	mov	r19, r25
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	82 2b       	or	r24, r18
     702:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     704:	07 c0       	rjmp	.+14     	; 0x714 <Endpoint_Write_Control_PStream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     706:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     708:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     70c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     70e:	61 50       	subi	r22, 0x01	; 1
     710:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     712:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     714:	61 15       	cp	r22, r1
     716:	71 05       	cpc	r23, r1
     718:	19 f0       	breq	.+6      	; 0x720 <Endpoint_Write_Control_PStream_LE+0x7c>
     71a:	88 30       	cpi	r24, 0x08	; 8
     71c:	91 05       	cpc	r25, r1
     71e:	98 f3       	brcs	.-26     	; 0x706 <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	88 30       	cpi	r24, 0x08	; 8
     724:	91 05       	cpc	r25, r1
     726:	09 f0       	breq	.+2      	; 0x72a <Endpoint_Write_Control_PStream_LE+0x86>
     728:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     72a:	80 91 e8 00 	lds	r24, 0x00E8
     72e:	8e 77       	andi	r24, 0x7E	; 126
     730:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     734:	61 15       	cp	r22, r1
     736:	71 05       	cpc	r23, r1
     738:	49 f6       	brne	.-110    	; 0x6cc <Endpoint_Write_Control_PStream_LE+0x28>
     73a:	44 23       	and	r20, r20
     73c:	39 f6       	brne	.-114    	; 0x6cc <Endpoint_Write_Control_PStream_LE+0x28>
     73e:	05 c0       	rjmp	.+10     	; 0x74a <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     740:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     742:	88 23       	and	r24, r24
     744:	61 f0       	breq	.+24     	; 0x75e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     746:	85 30       	cpi	r24, 0x05	; 5
     748:	61 f0       	breq	.+24     	; 0x762 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     74a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     74e:	82 ff       	sbrs	r24, 2
     750:	f7 cf       	rjmp	.-18     	; 0x740 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     762:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     764:	08 95       	ret

00000766 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     766:	98 2f       	mov	r25, r24
     768:	2a c0       	rjmp	.+84     	; 0x7be <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     76a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     76e:	98 17       	cp	r25, r24
     770:	39 f0       	breq	.+14     	; 0x780 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     772:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     776:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     77a:	50 91 f0 00 	lds	r21, 0x00F0
     77e:	03 c0       	rjmp	.+6      	; 0x786 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     780:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     782:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     784:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     786:	21 ff       	sbrs	r18, 1
     788:	19 c0       	rjmp	.+50     	; 0x7bc <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     78a:	30 91 eb 00 	lds	r19, 0x00EB
     78e:	3e 7f       	andi	r19, 0xFE	; 254
     790:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     794:	30 91 ed 00 	lds	r19, 0x00ED
     798:	3d 7f       	andi	r19, 0xFD	; 253
     79a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     79e:	30 91 eb 00 	lds	r19, 0x00EB
     7a2:	31 60       	ori	r19, 0x01	; 1
     7a4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     7a8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     7ac:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     7b0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     7b4:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     7b8:	27 ff       	sbrs	r18, 7
     7ba:	08 c0       	rjmp	.+16     	; 0x7cc <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     7bc:	9f 5f       	subi	r25, 0xFF	; 255
     7be:	97 30       	cpi	r25, 0x07	; 7
     7c0:	a0 f2       	brcs	.-88     	; 0x76a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7c2:	8f 70       	andi	r24, 0x0F	; 15
     7c4:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     7ce:	08 95       	ret

000007d0 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     7da:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     7dc:	00 e0       	ldi	r16, 0x00	; 0
     7de:	2a c0       	rjmp	.+84     	; 0x834 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     7e0:	98 81       	ld	r25, Y
     7e2:	99 23       	and	r25, r25
     7e4:	29 f1       	breq	.+74     	; 0x830 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     7e6:	6b 81       	ldd	r22, Y+3	; 0x03
     7e8:	e9 81       	ldd	r30, Y+1	; 0x01
     7ea:	fa 81       	ldd	r31, Y+2	; 0x02
     7ec:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     7ee:	89 2f       	mov	r24, r25
     7f0:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     7f2:	87 30       	cpi	r24, 0x07	; 7
     7f4:	18 f5       	brcc	.+70     	; 0x83c <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     7f6:	62 95       	swap	r22
     7f8:	66 0f       	add	r22, r22
     7fa:	66 0f       	add	r22, r22
     7fc:	60 7c       	andi	r22, 0xC0	; 192
     7fe:	99 1f       	adc	r25, r25
     800:	99 27       	eor	r25, r25
     802:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     804:	69 2b       	or	r22, r25
     806:	22 30       	cpi	r18, 0x02	; 2
     808:	10 f0       	brcs	.+4      	; 0x80e <Endpoint_ConfigureEndpointTable+0x3e>
     80a:	96 e0       	ldi	r25, 0x06	; 6
     80c:	01 c0       	rjmp	.+2      	; 0x810 <Endpoint_ConfigureEndpointTable+0x40>
     80e:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     810:	28 e0       	ldi	r18, 0x08	; 8
     812:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	03 c0       	rjmp	.+6      	; 0x81e <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     818:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     81a:	22 0f       	add	r18, r18
     81c:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     81e:	2e 17       	cp	r18, r30
     820:	3f 07       	cpc	r19, r31
     822:	d0 f3       	brcs	.-12     	; 0x818 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     824:	42 95       	swap	r20
     826:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     828:	49 2b       	or	r20, r25
     82a:	9d df       	rcall	.-198    	; 0x766 <Endpoint_ConfigureEndpoint_Prv>
     82c:	88 23       	and	r24, r24
     82e:	31 f0       	breq	.+12     	; 0x83c <Endpoint_ConfigureEndpointTable+0x6c>
     830:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     832:	25 96       	adiw	r28, 0x05	; 5
     834:	01 17       	cp	r16, r17
     836:	a1 f6       	brne	.-88     	; 0x7e0 <Endpoint_ConfigureEndpointTable+0x10>
     838:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     83a:	01 c0       	rjmp	.+2      	; 0x83e <Endpoint_ConfigureEndpointTable+0x6e>
     83c:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     83e:	df 91       	pop	r29
	}
	
	return true;
}
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <Endpoint_ClearStatusStage>:
     848:	80 91 aa 02 	lds	r24, 0x02AA
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     84c:	87 ff       	sbrs	r24, 7
     84e:	11 c0       	rjmp	.+34     	; 0x872 <Endpoint_ClearStatusStage+0x2a>
     850:	03 c0       	rjmp	.+6      	; 0x858 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     852:	8e b3       	in	r24, 0x1e	; 30
     854:	88 23       	and	r24, r24
     856:	b1 f0       	breq	.+44     	; 0x884 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     858:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     85c:	82 ff       	sbrs	r24, 2
     85e:	f9 cf       	rjmp	.-14     	; 0x852 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     860:	80 91 e8 00 	lds	r24, 0x00E8
     864:	8b 77       	andi	r24, 0x7B	; 123
     866:	80 93 e8 00 	sts	0x00E8, r24
     86a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     86c:	8e b3       	in	r24, 0x1e	; 30
     86e:	88 23       	and	r24, r24
     870:	49 f0       	breq	.+18     	; 0x884 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     872:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     876:	80 ff       	sbrs	r24, 0
     878:	f9 cf       	rjmp	.-14     	; 0x86c <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     87a:	80 91 e8 00 	lds	r24, 0x00E8
     87e:	8e 77       	andi	r24, 0x7E	; 126
     880:	80 93 e8 00 	sts	0x00E8, r24
     884:	08 95       	ret

00000886 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     886:	80 91 e4 00 	lds	r24, 0x00E4
     88a:	90 91 e5 00 	lds	r25, 0x00E5
     88e:	45 e6       	ldi	r20, 0x65	; 101
     890:	01 c0       	rjmp	.+2      	; 0x894 <Endpoint_WaitUntilReady+0xe>
     892:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     894:	20 91 ec 00 	lds	r18, 0x00EC
     898:	20 ff       	sbrs	r18, 0
     89a:	22 c0       	rjmp	.+68     	; 0x8e0 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     89c:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     8a0:	20 fd       	sbrc	r18, 0
     8a2:	14 c0       	rjmp	.+40     	; 0x8cc <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8a4:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8a6:	22 23       	and	r18, r18
     8a8:	99 f0       	breq	.+38     	; 0x8d0 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8aa:	25 30       	cpi	r18, 0x05	; 5
     8ac:	99 f0       	breq	.+38     	; 0x8d4 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     8ae:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     8b2:	25 fd       	sbrc	r18, 5
     8b4:	11 c0       	rjmp	.+34     	; 0x8d8 <Endpoint_WaitUntilReady+0x52>
     8b6:	20 91 e4 00 	lds	r18, 0x00E4
     8ba:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     8be:	28 17       	cp	r18, r24
     8c0:	39 07       	cpc	r19, r25
     8c2:	41 f3       	breq	.-48     	; 0x894 <Endpoint_WaitUntilReady+0xe>
     8c4:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     8c6:	29 f7       	brne	.-54     	; 0x892 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     8c8:	84 e0       	ldi	r24, 0x04	; 4
     8ca:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     8dc:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     8de:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8e0:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     8e4:	22 ff       	sbrs	r18, 2
     8e6:	de cf       	rjmp	.-68     	; 0x8a4 <Endpoint_WaitUntilReady+0x1e>
     8e8:	f9 cf       	rjmp	.-14     	; 0x8dc <Endpoint_WaitUntilReady+0x56>

000008ea <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     8f2:	4a d0       	rcall	.+148    	; 0x988 <USB_INT_DisableAllInterrupts>
     8f4:	51 d0       	rcall	.+162    	; 0x998 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     8f6:	c8 ed       	ldi	r28, 0xD8	; 216
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     8fa:	88 81       	ld	r24, Y
     8fc:	8f 77       	andi	r24, 0x7F	; 127
     8fe:	88 83       	st	Y, r24
     900:	88 81       	ld	r24, Y
     902:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     904:	88 83       	st	Y, r24
     906:	88 81       	ld	r24, Y
     908:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     90a:	88 83       	st	Y, r24
     90c:	19 bc       	out	0x29, r1	; 41
     90e:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     910:	10 92 a6 02 	sts	0x02A6, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     914:	10 92 a8 02 	sts	0x02A8, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     918:	10 92 a7 02 	sts	0x02A7, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     91c:	00 ee       	ldi	r16, 0xE0	; 224
     91e:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     920:	f8 01       	movw	r30, r16
     922:	80 81       	ld	r24, Z
     924:	8b 7f       	andi	r24, 0xFB	; 251
     926:	80 83       	st	Z, r24
     928:	88 81       	ld	r24, Y
     92a:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     92c:	88 83       	st	Y, r24
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     932:	42 e0       	ldi	r20, 0x02	; 2
     934:	18 df       	rcall	.-464    	; 0x766 <Endpoint_ConfigureEndpoint_Prv>
     936:	e1 ee       	ldi	r30, 0xE1	; 225
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     93c:	8e 7f       	andi	r24, 0xFE	; 254
     93e:	80 83       	st	Z, r24
     940:	e2 ee       	ldi	r30, 0xE2	; 226
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     946:	81 60       	ori	r24, 0x01	; 1
     948:	80 83       	st	Z, r24
     94a:	80 81       	ld	r24, Z
     94c:	88 60       	ori	r24, 0x08	; 8
     94e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     950:	f8 01       	movw	r30, r16
     952:	80 81       	ld	r24, Z
     954:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     956:	80 83       	st	Z, r24
     958:	88 81       	ld	r24, Y
     95a:	80 61       	ori	r24, 0x10	; 16
     95c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <USB_Init>:
     968:	e8 ed       	ldi	r30, 0xD8	; 216
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     96e:	8f 7e       	andi	r24, 0xEF	; 239
     970:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     972:	e7 ed       	ldi	r30, 0xD7	; 215
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	81 60       	ori	r24, 0x01	; 1
     97a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     97c:	84 e0       	ldi	r24, 0x04	; 4
     97e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 a9 02 	sts	0x02A9, r24

	USB_ResetInterface();
     986:	b1 cf       	rjmp	.-158    	; 0x8ea <USB_ResetInterface>

00000988 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     988:	e8 ed       	ldi	r30, 0xD8	; 216
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	8e 7f       	andi	r24, 0xFE	; 254
     990:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     992:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     996:	08 95       	ret

00000998 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     998:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     99c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     9a0:	08 95       	ret

000009a2 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	11 24       	eor	r1, r1
     9ac:	2f 93       	push	r18
     9ae:	3f 93       	push	r19
     9b0:	4f 93       	push	r20
     9b2:	5f 93       	push	r21
     9b4:	6f 93       	push	r22
     9b6:	7f 93       	push	r23
     9b8:	8f 93       	push	r24
     9ba:	9f 93       	push	r25
     9bc:	af 93       	push	r26
     9be:	bf 93       	push	r27
     9c0:	ef 93       	push	r30
     9c2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     9c4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     9c8:	82 ff       	sbrs	r24, 2
     9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     9cc:	80 91 e2 00 	lds	r24, 0x00E2
     9d0:	82 ff       	sbrs	r24, 2
     9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     9d4:	80 91 e1 00 	lds	r24, 0x00E1
     9d8:	8b 7f       	andi	r24, 0xFB	; 251
     9da:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     9de:	44 d2       	rcall	.+1160   	; 0xe68 <USB_Event_Stub>
     9e0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     9e4:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     9e6:	1b c0       	rjmp	.+54     	; 0xa1e <__vector_10+0x7c>
     9e8:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     9ec:	80 ff       	sbrs	r24, 0
     9ee:	17 c0       	rjmp	.+46     	; 0xa1e <__vector_10+0x7c>
     9f0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     9f4:	8e 7f       	andi	r24, 0xFE	; 254
     9f6:	80 93 da 00 	sts	0x00DA, r24
     9fa:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     9fe:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     a00:	0b c0       	rjmp	.+22     	; 0xa18 <__vector_10+0x76>
     a02:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a04:	89 bd       	out	0x29, r24	; 41
     a06:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a08:	89 bd       	out	0x29, r24	; 41
     a0a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     a0c:	00 fe       	sbrs	r0, 0
     a0e:	fd cf       	rjmp	.-6      	; 0xa0a <__vector_10+0x68>
     a10:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     a12:	8e bb       	out	0x1e, r24	; 30
     a14:	d8 dc       	rcall	.-1616   	; 0x3c6 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <__vector_10+0x7c>
     a18:	19 bc       	out	0x29, r1	; 41
     a1a:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a1c:	d6 dc       	rcall	.-1620   	; 0x3ca <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     a1e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     a22:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     a24:	17 c0       	rjmp	.+46     	; 0xa54 <__vector_10+0xb2>
     a26:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     a2a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     a2c:	13 c0       	rjmp	.+38     	; 0xa54 <__vector_10+0xb2>
     a2e:	80 91 e2 00 	lds	r24, 0x00E2
     a32:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a34:	80 93 e2 00 	sts	0x00E2, r24
     a38:	80 91 e2 00 	lds	r24, 0x00E2
     a3c:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a3e:	80 93 e2 00 	sts	0x00E2, r24
     a42:	80 91 d8 00 	lds	r24, 0x00D8
     a46:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     a48:	80 93 d8 00 	sts	0x00D8, r24
     a4c:	19 bc       	out	0x29, r1	; 41
     a4e:	85 e0       	ldi	r24, 0x05	; 5
     a50:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a52:	0a d2       	rcall	.+1044   	; 0xe68 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     a54:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     a58:	84 ff       	sbrs	r24, 4
     a5a:	2c c0       	rjmp	.+88     	; 0xab4 <__vector_10+0x112>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     a5c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     a60:	84 ff       	sbrs	r24, 4
     a62:	28 c0       	rjmp	.+80     	; 0xab4 <__vector_10+0x112>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     a64:	80 e1       	ldi	r24, 0x10	; 16
     a66:	89 bd       	out	0x29, r24	; 41
     a68:	82 e1       	ldi	r24, 0x12	; 18
     a6a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a6c:	09 b4       	in	r0, 0x29	; 41
     a6e:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a70:	fd cf       	rjmp	.-6      	; 0xa6c <__vector_10+0xca>
     a72:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a76:	8f 7d       	andi	r24, 0xDF	; 223
     a78:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a7c:	80 91 e1 00 	lds	r24, 0x00E1
     a80:	8f 7e       	andi	r24, 0xEF	; 239
     a82:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a86:	80 91 e2 00 	lds	r24, 0x00E2
     a8a:	8f 7e       	andi	r24, 0xEF	; 239
     a8c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a90:	80 91 e2 00 	lds	r24, 0x00E2
     a94:	81 60       	ori	r24, 0x01	; 1
     a96:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a9a:	80 91 a6 02 	lds	r24, 0x02A6
     a9e:	88 23       	and	r24, r24
     aa0:	21 f4       	brne	.+8      	; 0xaaa <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     aa2:	80 91 e3 00 	lds	r24, 0x00E3
     aa6:	87 ff       	sbrs	r24, 7
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     aaa:	84 e0       	ldi	r24, 0x04	; 4
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	8e bb       	out	0x1e, r24	; 30
     ab2:	da d1       	rcall	.+948    	; 0xe68 <USB_Event_Stub>
     ab4:	80 91 e1 00 	lds	r24, 0x00E1
     ab8:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     aba:	26 c0       	rjmp	.+76     	; 0xb08 <__stack+0x9>
     abc:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     ac0:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     ac2:	22 c0       	rjmp	.+68     	; 0xb08 <__stack+0x9>
     ac4:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     ac8:	87 7f       	andi	r24, 0xF7	; 247
     aca:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	8e bb       	out	0x1e, r24	; 30
     ad2:	10 92 a6 02 	sts	0x02A6, r1
     ad6:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     ada:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     adc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ae0:	80 91 e2 00 	lds	r24, 0x00E2
     ae4:	8e 7f       	andi	r24, 0xFE	; 254
     ae6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     aea:	80 91 e2 00 	lds	r24, 0x00E2
     aee:	80 61       	ori	r24, 0x10	; 16
     af0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	42 e0       	ldi	r20, 0x02	; 2
     afa:	35 de       	rcall	.-918    	; 0x766 <Endpoint_ConfigureEndpoint_Prv>
     afc:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b00:	88 60       	ori	r24, 0x08	; 8
     b02:	80 93 f0 00 	sts	0x00F0, r24
     b06:	b0 d1       	rcall	.+864    	; 0xe68 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     b08:	ff 91       	pop	r31
     b0a:	ef 91       	pop	r30
     b0c:	bf 91       	pop	r27
     b0e:	af 91       	pop	r26
     b10:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     b12:	8f 91       	pop	r24
     b14:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     b16:	6f 91       	pop	r22
     b18:	5f 91       	pop	r21
     b1a:	4f 91       	pop	r20
     b1c:	3f 91       	pop	r19
     b1e:	2f 91       	pop	r18
     b20:	0f 90       	pop	r0
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	0f 90       	pop	r0
     b26:	1f 90       	pop	r1
     b28:	18 95       	reti

00000b2a <__vector_11>:
     b2a:	1f 92       	push	r1
     b2c:	0f 92       	push	r0
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	0f 92       	push	r0
     b32:	11 24       	eor	r1, r1
     b34:	2f 93       	push	r18
     b36:	3f 93       	push	r19

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     b38:	4f 93       	push	r20
     b3a:	5f 93       	push	r21
     b3c:	6f 93       	push	r22
     b3e:	7f 93       	push	r23
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	af 93       	push	r26
     b46:	bf 93       	push	r27
     b48:	cf 93       	push	r28
     b4a:	ef 93       	push	r30
     b4c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b4e:	c0 91 e9 00 	lds	r28, 0x00E9
     b52:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b54:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b58:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     b5c:	80 91 f0 00 	lds	r24, 0x00F0
     b60:	87 7f       	andi	r24, 0xF7	; 247
     b62:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     b66:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     b68:	1b d0       	rcall	.+54     	; 0xba0 <USB_Device_ProcessControlRequest>
     b6a:	10 92 e9 00 	sts	0x00E9, r1
     b6e:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     b72:	88 60       	ori	r24, 0x08	; 8
     b74:	80 93 f0 00 	sts	0x00F0, r24
     b78:	c0 93 e9 00 	sts	0x00E9, r28
     b7c:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     b7e:	ef 91       	pop	r30
     b80:	cf 91       	pop	r28
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	ac 97       	sbiw	r28, 0x2c	; 44
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     bb6:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     bb8:	ea ea       	ldi	r30, 0xAA	; 170
     bba:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     bbc:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     bc0:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     bc2:	8f 5f       	subi	r24, 0xFF	; 255
     bc4:	88 30       	cpi	r24, 0x08	; 8
     bc6:	d1 f7       	brne	.-12     	; 0xbbc <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     bc8:	0b dc       	rcall	.-2026   	; 0x3e0 <EVENT_USB_Device_ControlRequest>
     bca:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bce:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     bd0:	33 c1       	rjmp	.+614    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     bd2:	80 91 aa 02 	lds	r24, 0x02AA
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     bd6:	20 91 ab 02 	lds	r18, 0x02AB

		switch (USB_ControlRequest.bRequest)
     bda:	25 30       	cpi	r18, 0x05	; 5
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0x40>
     bde:	84 c0       	rjmp	.+264    	; 0xce8 <USB_Device_ProcessControlRequest+0x148>
     be0:	26 30       	cpi	r18, 0x06	; 6
     be2:	40 f4       	brcc	.+16     	; 0xbf4 <USB_Device_ProcessControlRequest+0x54>
     be4:	21 30       	cpi	r18, 0x01	; 1
     be6:	a1 f1       	breq	.+104    	; 0xc50 <USB_Device_ProcessControlRequest+0xb0>
     be8:	21 30       	cpi	r18, 0x01	; 1
     bea:	70 f0       	brcs	.+28     	; 0xc08 <USB_Device_ProcessControlRequest+0x68>
     bec:	23 30       	cpi	r18, 0x03	; 3
     bee:	09 f0       	breq	.+2      	; 0xbf2 <USB_Device_ProcessControlRequest+0x52>
     bf0:	23 c1       	rjmp	.+582    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     bf2:	2e c0       	rjmp	.+92     	; 0xc50 <USB_Device_ProcessControlRequest+0xb0>
     bf4:	28 30       	cpi	r18, 0x08	; 8
     bf6:	09 f4       	brne	.+2      	; 0xbfa <USB_Device_ProcessControlRequest+0x5a>
     bf8:	f2 c0       	rjmp	.+484    	; 0xdde <USB_Device_ProcessControlRequest+0x23e>
     bfa:	29 30       	cpi	r18, 0x09	; 9
     bfc:	09 f4       	brne	.+2      	; 0xc00 <USB_Device_ProcessControlRequest+0x60>
     bfe:	01 c1       	rjmp	.+514    	; 0xe02 <USB_Device_ProcessControlRequest+0x262>
     c00:	26 30       	cpi	r18, 0x06	; 6
     c02:	09 f0       	breq	.+2      	; 0xc06 <USB_Device_ProcessControlRequest+0x66>
     c04:	19 c1       	rjmp	.+562    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     c06:	92 c0       	rjmp	.+292    	; 0xd2c <USB_Device_ProcessControlRequest+0x18c>
     c08:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c0a:	21 f0       	breq	.+8      	; 0xc14 <USB_Device_ProcessControlRequest+0x74>
     c0c:	82 38       	cpi	r24, 0x82	; 130
     c0e:	09 f0       	breq	.+2      	; 0xc12 <USB_Device_ProcessControlRequest+0x72>
     c10:	13 c1       	rjmp	.+550    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     c12:	08 c0       	rjmp	.+16     	; 0xc24 <USB_Device_ProcessControlRequest+0x84>
     c14:	80 91 a7 02 	lds	r24, 0x02A7
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     c18:	90 91 a8 02 	lds	r25, 0x02A8
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c1c:	99 23       	and	r25, r25
     c1e:	71 f0       	breq	.+28     	; 0xc3c <USB_Device_ProcessControlRequest+0x9c>
     c20:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     c22:	0c c0       	rjmp	.+24     	; 0xc3c <USB_Device_ProcessControlRequest+0x9c>
     c24:	80 91 ae 02 	lds	r24, 0x02AE
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c28:	8f 70       	andi	r24, 0x0F	; 15
     c2a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c2e:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c32:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     c34:	95 ff       	sbrs	r25, 5
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3c:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c40:	97 7f       	andi	r25, 0xF7	; 247
     c42:	90 93 e8 00 	sts	0x00E8, r25
     c46:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c4a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     c4e:	d2 c0       	rjmp	.+420    	; 0xdf4 <USB_Device_ProcessControlRequest+0x254>
     c50:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c52:	19 f0       	breq	.+6      	; 0xc5a <USB_Device_ProcessControlRequest+0xba>
     c54:	82 30       	cpi	r24, 0x02	; 2
     c56:	09 f0       	breq	.+2      	; 0xc5a <USB_Device_ProcessControlRequest+0xba>
     c58:	ef c0       	rjmp	.+478    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     c5a:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c5c:	8f 71       	andi	r24, 0x1F	; 31
     c5e:	90 70       	andi	r25, 0x00	; 0
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	29 f0       	breq	.+10     	; 0xc6e <USB_Device_ProcessControlRequest+0xce>
     c64:	82 30       	cpi	r24, 0x02	; 2
     c66:	91 05       	cpc	r25, r1
     c68:	09 f0       	breq	.+2      	; 0xc6c <USB_Device_ProcessControlRequest+0xcc>
     c6a:	e6 c0       	rjmp	.+460    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     c6c:	0b c0       	rjmp	.+22     	; 0xc84 <USB_Device_ProcessControlRequest+0xe4>
     c6e:	80 91 ac 02 	lds	r24, 0x02AC
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	09 f0       	breq	.+2      	; 0xc78 <USB_Device_ProcessControlRequest+0xd8>
     c76:	e0 c0       	rjmp	.+448    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     c78:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c7a:	09 f0       	breq	.+2      	; 0xc7e <USB_Device_ProcessControlRequest+0xde>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	80 93 a8 02 	sts	0x02A8, r24
     c82:	2c c0       	rjmp	.+88     	; 0xcdc <USB_Device_ProcessControlRequest+0x13c>
     c84:	80 91 ac 02 	lds	r24, 0x02AC

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c88:	88 23       	and	r24, r24
     c8a:	41 f5       	brne	.+80     	; 0xcdc <USB_Device_ProcessControlRequest+0x13c>
     c8c:	20 91 ae 02 	lds	r18, 0x02AE
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c90:	2f 70       	andi	r18, 0x0F	; 15
     c92:	09 f4       	brne	.+2      	; 0xc96 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c94:	d1 c0       	rjmp	.+418    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     c96:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c9a:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c9e:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ca0:	1d c0       	rjmp	.+58     	; 0xcdc <USB_Device_ProcessControlRequest+0x13c>
     ca2:	80 91 ab 02 	lds	r24, 0x02AB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <USB_Device_ProcessControlRequest+0x112>
     caa:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cae:	80 62       	ori	r24, 0x20	; 32
     cb0:	13 c0       	rjmp	.+38     	; 0xcd8 <USB_Device_ProcessControlRequest+0x138>
     cb2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     cb6:	80 61       	ori	r24, 0x10	; 16
     cb8:	80 93 eb 00 	sts	0x00EB, r24
     cbc:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <USB_Device_ProcessControlRequest+0x126>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	2a 95       	dec	r18
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <USB_Device_ProcessControlRequest+0x122>
     cca:	80 93 ea 00 	sts	0x00EA, r24
     cce:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     cd2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	80 93 eb 00 	sts	0x00EB, r24
     cdc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ce0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ce4:	87 7f       	andi	r24, 0xF7	; 247
     ce6:	89 c0       	rjmp	.+274    	; 0xdfa <USB_Device_ProcessControlRequest+0x25a>
     ce8:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cea:	09 f0       	breq	.+2      	; 0xcee <USB_Device_ProcessControlRequest+0x14e>
     cec:	a5 c0       	rjmp	.+330    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     cee:	10 91 ac 02 	lds	r17, 0x02AC
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     cf2:	1f 77       	andi	r17, 0x7F	; 127
     cf4:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     cf8:	80 78       	andi	r24, 0x80	; 128
     cfa:	81 2b       	or	r24, r17
     cfc:	80 93 e3 00 	sts	0x00E3, r24
     d00:	80 91 e8 00 	lds	r24, 0x00E8
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	80 93 e8 00 	sts	0x00E8, r24
     d0a:	9e dd       	rcall	.-1220   	; 0x848 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d0c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d10:	80 ff       	sbrs	r24, 0
     d12:	fc cf       	rjmp	.-8      	; 0xd0c <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     d14:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     d18:	80 68       	ori	r24, 0x80	; 128
     d1a:	80 93 e3 00 	sts	0x00E3, r24
     d1e:	11 23       	and	r17, r17
     d20:	11 f0       	breq	.+4      	; 0xd26 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <USB_Device_ProcessControlRequest+0x188>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	8e bb       	out	0x1e, r24	; 30
     d2a:	86 c0       	rjmp	.+268    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     d2c:	80 58       	subi	r24, 0x80	; 128
     d2e:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d30:	08 f0       	brcs	.+2      	; 0xd34 <USB_Device_ProcessControlRequest+0x194>
     d32:	82 c0       	rjmp	.+260    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     d34:	80 91 ac 02 	lds	r24, 0x02AC
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d38:	90 91 ad 02 	lds	r25, 0x02AD
     d3c:	23 e0       	ldi	r18, 0x03	; 3
     d3e:	8c 3d       	cpi	r24, 0xDC	; 220
     d40:	92 07       	cpc	r25, r18
     d42:	a9 f5       	brne	.+106    	; 0xdae <USB_Device_ProcessControlRequest+0x20e>
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d48:	8a e2       	ldi	r24, 0x2A	; 42
     d4a:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d4c:	5f b7       	in	r21, 0x3f	; 63
     d4e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d50:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d52:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	4e e0       	ldi	r20, 0x0E	; 14
     d5a:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d5c:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	60 93 57 00 	sts	0x0057, r22
     d64:	e4 91       	lpm	r30, Z
     d66:	80 ff       	sbrs	r24, 0
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <USB_Device_ProcessControlRequest+0x1d0>

					if (SerialCharNum & 0x01)
     d6a:	e2 95       	swap	r30
     d6c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     d6e:	4f 5f       	subi	r20, 0xFF	; 255
     d70:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     d72:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	ea 30       	cpi	r30, 0x0A	; 10
     d78:	18 f0       	brcs	.+6      	; 0xd80 <USB_Device_ProcessControlRequest+0x1e0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d7a:	29 5c       	subi	r18, 0xC9	; 201
     d7c:	3f 4f       	sbci	r19, 0xFF	; 255
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <USB_Device_ProcessControlRequest+0x1e4>
     d80:	20 5d       	subi	r18, 0xD0	; 208
     d82:	3f 4f       	sbci	r19, 0xFF	; 255
     d84:	13 96       	adiw	r26, 0x03	; 3
     d86:	3c 93       	st	X, r19
     d88:	2e 93       	st	-X, r18
     d8a:	12 97       	sbiw	r26, 0x02	; 2
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	12 96       	adiw	r26, 0x02	; 2
     d90:	84 31       	cpi	r24, 0x14	; 20
     d92:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d94:	19 f7       	brne	.-58     	; 0xd5c <USB_Device_ProcessControlRequest+0x1bc>
     d96:	5f bf       	out	0x3f, r21	; 63
     d98:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d9c:	87 7f       	andi	r24, 0xF7	; 247
     d9e:	80 93 e8 00 	sts	0x00E8, r24
     da2:	ce 01       	movw	r24, r28
     da4:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     da6:	6a e2       	ldi	r22, 0x2A	; 42
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	1d dc       	rcall	.-1990   	; 0x5e6 <Endpoint_Write_Control_Stream_LE>
     dac:	12 c0       	rjmp	.+36     	; 0xdd2 <USB_Device_ProcessControlRequest+0x232>
     dae:	60 91 ae 02 	lds	r22, 0x02AE
     db2:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     db4:	4f 5f       	subi	r20, 0xFF	; 255
     db6:	5f 4f       	sbci	r21, 0xFF	; 255
     db8:	9b db       	rcall	.-2250   	; 0x4f0 <CALLBACK_USB_GetDescriptor>
     dba:	bc 01       	movw	r22, r24
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <USB_Device_ProcessControlRequest+0x222>
     dc0:	3b c0       	rjmp	.+118    	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     dc2:	80 91 e8 00 	lds	r24, 0x00E8
     dc6:	87 7f       	andi	r24, 0xF7	; 247
     dc8:	80 93 e8 00 	sts	0x00E8, r24
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	69 dc       	rcall	.-1838   	; 0x6a4 <Endpoint_Write_Control_PStream_LE>
     dd2:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     dd6:	8b 77       	andi	r24, 0x7B	; 123
     dd8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ddc:	2d c0       	rjmp	.+90     	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     dde:	80 38       	cpi	r24, 0x80	; 128
     de0:	59 f5       	brne	.+86     	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     de2:	80 91 e8 00 	lds	r24, 0x00E8
     de6:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     de8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dec:	80 91 a6 02 	lds	r24, 0x02A6
     df0:	80 93 f1 00 	sts	0x00F1, r24
     df4:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     df8:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dfa:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dfe:	24 dd       	rcall	.-1464   	; 0x848 <Endpoint_ClearStatusStage>
     e00:	1b c0       	rjmp	.+54     	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     e02:	88 23       	and	r24, r24
     e04:	c9 f4       	brne	.+50     	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
     e06:	90 91 ac 02 	lds	r25, 0x02AC
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     e0a:	92 30       	cpi	r25, 0x02	; 2
     e0c:	a8 f4       	brcc	.+42     	; 0xe38 <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e0e:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     e12:	87 7f       	andi	r24, 0xF7	; 247
     e14:	80 93 e8 00 	sts	0x00E8, r24
     e18:	90 93 a6 02 	sts	0x02A6, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e1c:	15 dd       	rcall	.-1494   	; 0x848 <Endpoint_ClearStatusStage>
     e1e:	80 91 a6 02 	lds	r24, 0x02A6
     e22:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e24:	21 f4       	brne	.+8      	; 0xe2e <USB_Device_ProcessControlRequest+0x28e>
     e26:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     e2a:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <USB_Device_ProcessControlRequest+0x292>
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <USB_Device_ProcessControlRequest+0x294>
     e32:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e34:	8e bb       	out	0x1e, r24	; 30
     e36:	cb da       	rcall	.-2666   	; 0x3ce <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e38:	80 91 e8 00 	lds	r24, 0x00E8
     e3c:	83 ff       	sbrs	r24, 3
     e3e:	0a c0       	rjmp	.+20     	; 0xe54 <USB_Device_ProcessControlRequest+0x2b4>
     e40:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     e44:	87 7f       	andi	r24, 0xF7	; 247
     e46:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e4a:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e4e:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e50:	80 93 eb 00 	sts	0x00EB, r24
     e54:	ac 96       	adiw	r28, 0x2c	; 44
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     e64:	1f 91       	pop	r17
     e66:	08 95       	ret

00000e68 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e68:	08 95       	ret

00000e6a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e6a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e6c:	8e b3       	in	r24, 0x1e	; 30
     e6e:	88 23       	and	r24, r24
     e70:	a9 f0       	breq	.+42     	; 0xe9c <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e72:	80 91 e9 00 	lds	r24, 0x00E9
     e76:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e78:	90 91 ec 00 	lds	r25, 0x00EC
     e7c:	90 ff       	sbrs	r25, 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <USB_USBTask+0x1a>
     e80:	c0 e8       	ldi	r28, 0x80	; 128
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <USB_USBTask+0x1c>
     e84:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e86:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e88:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e8c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e90:	83 ff       	sbrs	r24, 3
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     e94:	85 de       	rcall	.-758    	; 0xba0 <USB_Device_ProcessControlRequest>
     e96:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e98:	c0 93 e9 00 	sts	0x00E9, r28
     e9c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e9e:	08 95       	ret

00000ea0 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ea6:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     eaa:	83 ff       	sbrs	r24, 3
     eac:	a2 c0       	rjmp	.+324    	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     eae:	88 81       	ld	r24, Y
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	20 91 ae 02 	lds	r18, 0x02AE
     eb6:	30 91 af 02 	lds	r19, 0x02AF
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	09 f0       	breq	.+2      	; 0xec2 <CDC_Device_ProcessControlRequest+0x22>
     ec0:	98 c0       	rjmp	.+304    	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     ec2:	80 91 ab 02 	lds	r24, 0x02AB
     ec6:	81 32       	cpi	r24, 0x21	; 33
     ec8:	69 f0       	breq	.+26     	; 0xee4 <CDC_Device_ProcessControlRequest+0x44>
     eca:	82 32       	cpi	r24, 0x22	; 34
     ecc:	20 f4       	brcc	.+8      	; 0xed6 <CDC_Device_ProcessControlRequest+0x36>
     ece:	80 32       	cpi	r24, 0x20	; 32
     ed0:	09 f0       	breq	.+2      	; 0xed4 <CDC_Device_ProcessControlRequest+0x34>
     ed2:	8f c0       	rjmp	.+286    	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
     ed4:	3c c0       	rjmp	.+120    	; 0xf4e <CDC_Device_ProcessControlRequest+0xae>
     ed6:	82 32       	cpi	r24, 0x22	; 34
     ed8:	09 f4       	brne	.+2      	; 0xedc <CDC_Device_ProcessControlRequest+0x3c>
     eda:	6a c0       	rjmp	.+212    	; 0xfb0 <CDC_Device_ProcessControlRequest+0x110>
     edc:	83 32       	cpi	r24, 0x23	; 35
     ede:	09 f0       	breq	.+2      	; 0xee2 <CDC_Device_ProcessControlRequest+0x42>
     ee0:	88 c0       	rjmp	.+272    	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
     ee2:	79 c0       	rjmp	.+242    	; 0xfd6 <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ee4:	80 91 aa 02 	lds	r24, 0x02AA
     ee8:	81 3a       	cpi	r24, 0xA1	; 161
     eea:	09 f0       	breq	.+2      	; 0xeee <CDC_Device_ProcessControlRequest+0x4e>
     eec:	82 c0       	rjmp	.+260    	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eee:	80 91 e8 00 	lds	r24, 0x00E8
     ef2:	87 7f       	andi	r24, 0xF7	; 247
     ef4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ef8:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     efc:	80 ff       	sbrs	r24, 0
     efe:	fc cf       	rjmp	.-8      	; 0xef8 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     f00:	8c 89       	ldd	r24, Y+20	; 0x14
     f02:	9d 89       	ldd	r25, Y+21	; 0x15
     f04:	ae 89       	ldd	r26, Y+22	; 0x16
     f06:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     f08:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     f0c:	49 2f       	mov	r20, r25
     f0e:	5a 2f       	mov	r21, r26
     f10:	6b 2f       	mov	r22, r27
     f12:	77 27       	eor	r23, r23
     f14:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
     f18:	ad 01       	movw	r20, r26
     f1a:	66 27       	eor	r22, r22
     f1c:	77 27       	eor	r23, r23
     f1e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
     f22:	8b 2f       	mov	r24, r27
     f24:	99 27       	eor	r25, r25
     f26:	aa 27       	eor	r26, r26
     f28:	bb 27       	eor	r27, r27
     f2a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     f2e:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f30:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     f34:	89 8d       	ldd	r24, Y+25	; 0x19
     f36:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     f3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f3c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f40:	80 91 e8 00 	lds	r24, 0x00E8
     f44:	8e 77       	andi	r24, 0x7E	; 126
     f46:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f4a:	7e dc       	rcall	.-1796   	; 0x848 <Endpoint_ClearStatusStage>
     f4c:	52 c0       	rjmp	.+164    	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
     f4e:	80 91 aa 02 	lds	r24, 0x02AA
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f52:	81 32       	cpi	r24, 0x21	; 33
     f54:	09 f0       	breq	.+2      	; 0xf58 <CDC_Device_ProcessControlRequest+0xb8>
     f56:	4d c0       	rjmp	.+154    	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
     f58:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f5c:	87 7f       	andi	r24, 0xF7	; 247
     f5e:	80 93 e8 00 	sts	0x00E8, r24
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <CDC_Device_ProcessControlRequest+0xcc>
     f64:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     f66:	88 23       	and	r24, r24
     f68:	09 f4       	brne	.+2      	; 0xf6c <CDC_Device_ProcessControlRequest+0xcc>
     f6a:	43 c0       	rjmp	.+134    	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
     f6c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f70:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     f72:	f8 cf       	rjmp	.-16     	; 0xf64 <CDC_Device_ProcessControlRequest+0xc4>
     f74:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     f78:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     f7c:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     f80:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     f84:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f86:	2d 8b       	std	Y+21, r18	; 0x15
     f88:	9e 8b       	std	Y+22, r25	; 0x16
     f8a:	8f 8b       	std	Y+23, r24	; 0x17
     f8c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f90:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f92:	80 91 f1 00 	lds	r24, 0x00F1
     f96:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f98:	80 91 f1 00 	lds	r24, 0x00F1
     f9c:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f9e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fa2:	8b 77       	andi	r24, 0x7B	; 123
     fa4:	80 93 e8 00 	sts	0x00E8, r24
     fa8:	4f dc       	rcall	.-1890   	; 0x848 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     faa:	ce 01       	movw	r24, r28
     fac:	5e da       	rcall	.-2884   	; 0x46a <EVENT_CDC_Device_LineEncodingChanged>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     fae:	21 c0       	rjmp	.+66     	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
     fb0:	80 91 aa 02 	lds	r24, 0x02AA
     fb4:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fb6:	e9 f4       	brne	.+58     	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
     fb8:	80 91 e8 00 	lds	r24, 0x00E8
     fbc:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fbe:	80 93 e8 00 	sts	0x00E8, r24
     fc2:	42 dc       	rcall	.-1916   	; 0x848 <Endpoint_ClearStatusStage>
     fc4:	80 91 ac 02 	lds	r24, 0x02AC
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fc8:	90 91 ad 02 	lds	r25, 0x02AD

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     fcc:	99 8b       	std	Y+17, r25	; 0x11
     fce:	88 8b       	std	Y+16, r24	; 0x10
     fd0:	ce 01       	movw	r24, r28
     fd2:	66 d1       	rcall	.+716    	; 0x12a0 <CDC_Device_Event_Stub>
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
     fd6:	80 91 aa 02 	lds	r24, 0x02AA

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     fda:	81 32       	cpi	r24, 0x21	; 33
     fdc:	51 f4       	brne	.+20     	; 0xff2 <CDC_Device_ProcessControlRequest+0x152>
     fde:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fe2:	87 7f       	andi	r24, 0xF7	; 247
     fe4:	80 93 e8 00 	sts	0x00E8, r24
     fe8:	2f dc       	rcall	.-1954   	; 0x848 <Endpoint_ClearStatusStage>
     fea:	ce 01       	movw	r24, r28
     fec:	60 91 ac 02 	lds	r22, 0x02AC
     ff0:	57 d1       	rcall	.+686    	; 0x12a0 <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     ff6:	08 95       	ret

00000ff8 <CDC_Device_ConfigureEndpoints>:
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	ec 01       	movw	r28, r24
     ffe:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
    1000:	fc 01       	movw	r30, r24
    1002:	8b e0       	ldi	r24, 0x0B	; 11
    1004:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1006:	1d 92       	st	X+, r1
    1008:	8a 95       	dec	r24
    100a:	e9 f7       	brne	.-6      	; 0x1006 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    1010:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1016:	ce 01       	movw	r24, r28
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	d9 db       	rcall	.-2126   	; 0x7d0 <Endpoint_ConfigureEndpointTable>
    101e:	88 23       	and	r24, r24
    1020:	59 f0       	breq	.+22     	; 0x1038 <CDC_Device_ConfigureEndpoints+0x40>
    1022:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1024:	06 96       	adiw	r24, 0x06	; 6
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	d3 db       	rcall	.-2138   	; 0x7d0 <Endpoint_ConfigureEndpointTable>
    102a:	88 23       	and	r24, r24
    102c:	29 f0       	breq	.+10     	; 0x1038 <CDC_Device_ConfigureEndpoints+0x40>
    102e:	ce 01       	movw	r24, r28
    1030:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	cd db       	rcall	.-2150   	; 0x7d0 <Endpoint_ConfigureEndpointTable>
    1036:	01 c0       	rjmp	.+2      	; 0x103a <CDC_Device_ConfigureEndpoints+0x42>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    103e:	08 95       	ret

00001040 <CDC_Device_SendString>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    1040:	fc 01       	movw	r30, r24
    1042:	cb 01       	movw	r24, r22
    1044:	2e b3       	in	r18, 0x1e	; 30
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1046:	24 30       	cpi	r18, 0x04	; 4
    1048:	c1 f4       	brne	.+48     	; 0x107a <CDC_Device_SendString+0x3a>
    104a:	44 89       	ldd	r20, Z+20	; 0x14
    104c:	55 89       	ldd	r21, Z+21	; 0x15
    104e:	66 89       	ldd	r22, Z+22	; 0x16
    1050:	77 89       	ldd	r23, Z+23	; 0x17
    1052:	41 15       	cp	r20, r1
    1054:	51 05       	cpc	r21, r1
    1056:	61 05       	cpc	r22, r1
    1058:	71 05       	cpc	r23, r1
    105a:	89 f0       	breq	.+34     	; 0x107e <CDC_Device_SendString+0x3e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    105c:	21 81       	ldd	r18, Z+1	; 0x01
    105e:	2f 70       	andi	r18, 0x0F	; 15
    1060:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
    1064:	fc 01       	movw	r30, r24
    1066:	01 90       	ld	r0, Z+
    1068:	00 20       	and	r0, r0
    106a:	e9 f7       	brne	.-6      	; 0x1066 <CDC_Device_SendString+0x26>
    106c:	31 97       	sbiw	r30, 0x01	; 1
    106e:	e8 1b       	sub	r30, r24
    1070:	f9 0b       	sbc	r31, r25
    1072:	bf 01       	movw	r22, r30
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	67 ca       	rjmp	.-2866   	; 0x548 <Endpoint_Write_Stream_LE>
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	08 95       	ret

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	08 95       	ret

00001082 <CDC_Device_SendByte>:
    1082:	cf 93       	push	r28

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
}
    1084:	fc 01       	movw	r30, r24
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1086:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1088:	8e b3       	in	r24, 0x1e	; 30
    108a:	84 30       	cpi	r24, 0x04	; 4
    108c:	e9 f4       	brne	.+58     	; 0x10c8 <CDC_Device_SendByte+0x46>
    108e:	44 89       	ldd	r20, Z+20	; 0x14
    1090:	55 89       	ldd	r21, Z+21	; 0x15
    1092:	66 89       	ldd	r22, Z+22	; 0x16
    1094:	77 89       	ldd	r23, Z+23	; 0x17
    1096:	41 15       	cp	r20, r1
    1098:	51 05       	cpc	r21, r1
    109a:	61 05       	cpc	r22, r1
    109c:	71 05       	cpc	r23, r1
    109e:	a1 f0       	breq	.+40     	; 0x10c8 <CDC_Device_SendByte+0x46>
    10a0:	81 81       	ldd	r24, Z+1	; 0x01
    10a2:	8f 70       	andi	r24, 0x0F	; 15
    10a4:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10a8:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    10ac:	85 fd       	sbrc	r24, 5
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10b0:	80 91 e8 00 	lds	r24, 0x00E8
    10b4:	8e 77       	andi	r24, 0x7E	; 126
    10b6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    10ba:	e5 db       	rcall	.-2102   	; 0x886 <Endpoint_WaitUntilReady>
    10bc:	88 23       	and	r24, r24
    10be:	29 f4       	brne	.+10     	; 0x10ca <CDC_Device_SendByte+0x48>
    10c0:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10c4:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <CDC_Device_SendByte+0x48>
    10c8:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    10ca:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    10cc:	08 95       	ret

000010ce <CDC_Device_putchar>:
    10ce:	28 2f       	mov	r18, r24
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    10d0:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    10d2:	84 85       	ldd	r24, Z+12	; 0x0c
    10d4:	95 85       	ldd	r25, Z+13	; 0x0d
    10d6:	62 2f       	mov	r22, r18
    10d8:	d4 df       	rcall	.-88     	; 0x1082 <CDC_Device_SendByte>
    10da:	88 23       	and	r24, r24
    10dc:	19 f0       	breq	.+6      	; 0x10e4 <CDC_Device_putchar+0x16>
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	9f ef       	ldi	r25, 0xFF	; 255
    10e2:	08 95       	ret
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	08 95       	ret

000010ea <CDC_Device_Flush>:
}
    10ea:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10ec:	8e b3       	in	r24, 0x1e	; 30
    10ee:	84 30       	cpi	r24, 0x04	; 4
    10f0:	51 f5       	brne	.+84     	; 0x1146 <CDC_Device_Flush+0x5c>
    10f2:	44 89       	ldd	r20, Z+20	; 0x14
    10f4:	55 89       	ldd	r21, Z+21	; 0x15
    10f6:	66 89       	ldd	r22, Z+22	; 0x16
    10f8:	77 89       	ldd	r23, Z+23	; 0x17
    10fa:	41 15       	cp	r20, r1
    10fc:	51 05       	cpc	r21, r1
    10fe:	61 05       	cpc	r22, r1
    1100:	71 05       	cpc	r23, r1
    1102:	09 f1       	breq	.+66     	; 0x1146 <CDC_Device_Flush+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1104:	81 81       	ldd	r24, Z+1	; 0x01
    1106:	8f 70       	andi	r24, 0x0F	; 15
    1108:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    110c:	90 91 f3 00 	lds	r25, 0x00F3
    1110:	80 91 f2 00 	lds	r24, 0x00F2
    1114:	39 2f       	mov	r19, r25
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	82 2b       	or	r24, r18
    111c:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	a1 f0       	breq	.+40     	; 0x114a <CDC_Device_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1122:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1126:	80 91 e8 00 	lds	r24, 0x00E8
    112a:	8e 77       	andi	r24, 0x7E	; 126
    112c:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    1130:	95 fd       	sbrc	r25, 5
    1132:	0d c0       	rjmp	.+26     	; 0x114e <CDC_Device_Flush+0x64>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1134:	a8 db       	rcall	.-2224   	; 0x886 <Endpoint_WaitUntilReady>
    1136:	88 23       	and	r24, r24
    1138:	59 f4       	brne	.+22     	; 0x1150 <CDC_Device_Flush+0x66>
    113a:	90 91 e8 00 	lds	r25, 0x00E8
    113e:	9e 77       	andi	r25, 0x7E	; 126
    1140:	90 93 e8 00 	sts	0x00E8, r25
    1144:	08 95       	ret
    1146:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1148:	08 95       	ret
    114a:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    114c:	08 95       	ret
    114e:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    1150:	08 95       	ret

00001152 <CDC_Device_USBTask>:
}
    1152:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1154:	24 30       	cpi	r18, 0x04	; 4
    1156:	99 f4       	brne	.+38     	; 0x117e <CDC_Device_USBTask+0x2c>
    1158:	fc 01       	movw	r30, r24
    115a:	44 89       	ldd	r20, Z+20	; 0x14
    115c:	55 89       	ldd	r21, Z+21	; 0x15
    115e:	66 89       	ldd	r22, Z+22	; 0x16
    1160:	77 89       	ldd	r23, Z+23	; 0x17
    1162:	41 15       	cp	r20, r1
    1164:	51 05       	cpc	r21, r1
    1166:	61 05       	cpc	r22, r1
    1168:	71 05       	cpc	r23, r1
    116a:	49 f0       	breq	.+18     	; 0x117e <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    116c:	21 81       	ldd	r18, Z+1	; 0x01
    116e:	2f 70       	andi	r18, 0x0F	; 15
    1170:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1174:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1178:	20 ff       	sbrs	r18, 0
    117a:	01 c0       	rjmp	.+2      	; 0x117e <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
    117c:	b6 cf       	rjmp	.-148    	; 0x10ea <CDC_Device_Flush>
    117e:	08 95       	ret

00001180 <CDC_Device_BytesReceived>:
    1180:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1182:	8e b3       	in	r24, 0x1e	; 30
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	61 f5       	brne	.+88     	; 0x11e0 <CDC_Device_BytesReceived+0x60>
    1188:	44 89       	ldd	r20, Z+20	; 0x14
    118a:	55 89       	ldd	r21, Z+21	; 0x15
    118c:	66 89       	ldd	r22, Z+22	; 0x16
    118e:	77 89       	ldd	r23, Z+23	; 0x17
    1190:	41 15       	cp	r20, r1
    1192:	51 05       	cpc	r21, r1
    1194:	61 05       	cpc	r22, r1
    1196:	71 05       	cpc	r23, r1
    1198:	19 f1       	breq	.+70     	; 0x11e0 <CDC_Device_BytesReceived+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    119a:	86 81       	ldd	r24, Z+6	; 0x06
    119c:	8f 70       	andi	r24, 0x0F	; 15
    119e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11a2:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    11a6:	82 ff       	sbrs	r24, 2
    11a8:	1e c0       	rjmp	.+60     	; 0x11e6 <CDC_Device_BytesReceived+0x66>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    11aa:	90 91 f3 00 	lds	r25, 0x00F3
    11ae:	80 91 f2 00 	lds	r24, 0x00F2
    11b2:	39 2f       	mov	r19, r25
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	82 2b       	or	r24, r18
    11ba:	93 2b       	or	r25, r19
	{
		if (!(Endpoint_BytesInEndpoint()))
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	31 f4       	brne	.+12     	; 0x11cc <CDC_Device_BytesReceived+0x4c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11c0:	80 91 e8 00 	lds	r24, 0x00E8
    11c4:	8b 77       	andi	r24, 0x7B	; 123
    11c6:	80 93 e8 00 	sts	0x00E8, r24
    11ca:	0a c0       	rjmp	.+20     	; 0x11e0 <CDC_Device_BytesReceived+0x60>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    11cc:	90 91 f3 00 	lds	r25, 0x00F3
    11d0:	80 91 f2 00 	lds	r24, 0x00F2
    11d4:	39 2f       	mov	r19, r25
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	82 2b       	or	r24, r18
    11dc:	93 2b       	or	r25, r19
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
    11de:	08 95       	ret
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return 0;
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	08 95       	ret
			return Endpoint_BytesInEndpoint();
		}
	}
	else
	{
		return 0;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    11ea:	08 95       	ret

000011ec <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11ec:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    11ee:	8e b3       	in	r24, 0x1e	; 30
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	a1 f5       	brne	.+104    	; 0x125c <CDC_Device_ReceiveByte+0x70>
    11f4:	44 89       	ldd	r20, Z+20	; 0x14
    11f6:	55 89       	ldd	r21, Z+21	; 0x15
    11f8:	66 89       	ldd	r22, Z+22	; 0x16
    11fa:	77 89       	ldd	r23, Z+23	; 0x17
    11fc:	41 15       	cp	r20, r1
    11fe:	51 05       	cpc	r21, r1
    1200:	61 05       	cpc	r22, r1
    1202:	71 05       	cpc	r23, r1
    1204:	59 f1       	breq	.+86     	; 0x125c <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1206:	86 81       	ldd	r24, Z+6	; 0x06
    1208:	8f 70       	andi	r24, 0x0F	; 15
    120a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    120e:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1212:	82 ff       	sbrs	r24, 2
    1214:	26 c0       	rjmp	.+76     	; 0x1262 <CDC_Device_ReceiveByte+0x76>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1216:	90 91 f3 00 	lds	r25, 0x00F3
    121a:	80 91 f2 00 	lds	r24, 0x00F2
    121e:	39 2f       	mov	r19, r25
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	82 2b       	or	r24, r18
    1226:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	21 f0       	breq	.+8      	; 0x1234 <CDC_Device_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    122c:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <CDC_Device_ReceiveByte+0x4c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	9f ef       	ldi	r25, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1238:	30 91 f3 00 	lds	r19, 0x00F3
    123c:	20 91 f2 00 	lds	r18, 0x00F2
    1240:	53 2f       	mov	r21, r19
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	24 2b       	or	r18, r20
    1248:	35 2b       	or	r19, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    124a:	21 15       	cp	r18, r1
    124c:	31 05       	cpc	r19, r1
    124e:	59 f4       	brne	.+22     	; 0x1266 <CDC_Device_ReceiveByte+0x7a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1250:	20 91 e8 00 	lds	r18, 0x00E8
    1254:	2b 77       	andi	r18, 0x7B	; 123
    1256:	20 93 e8 00 	sts	0x00E8, r18
    125a:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	9f ef       	ldi	r25, 0xFF	; 255
    1260:	08 95       	ret

	int16_t ReceivedByte = -1;
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1266:	08 95       	ret

00001268 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    1268:	fc 01       	movw	r30, r24
    126a:	84 85       	ldd	r24, Z+12	; 0x0c
    126c:	95 85       	ldd	r25, Z+13	; 0x0d
    126e:	be df       	rcall	.-132    	; 0x11ec <CDC_Device_ReceiveByte>
    1270:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <CDC_Device_getchar+0x10>
    1274:	8e ef       	ldi	r24, 0xFE	; 254
	  return _FDEV_EOF;
    1276:	9f ef       	ldi	r25, 0xFF	; 255
    1278:	08 95       	ret

0000127a <CDC_Device_CreateStream>:

	return ReceivedByte;
}
    127a:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    127c:	2e e0       	ldi	r18, 0x0E	; 14
    127e:	db 01       	movw	r26, r22
    1280:	1d 92       	st	X+, r1
    1282:	2a 95       	dec	r18
    1284:	e9 f7       	brne	.-6      	; 0x1280 <CDC_Device_CreateStream+0x6>
    1286:	23 e0       	ldi	r18, 0x03	; 3
    1288:	23 83       	std	Z+3, r18	; 0x03
    128a:	27 e6       	ldi	r18, 0x67	; 103
    128c:	38 e0       	ldi	r19, 0x08	; 8
    128e:	31 87       	std	Z+9, r19	; 0x09
    1290:	20 87       	std	Z+8, r18	; 0x08
    1292:	24 e3       	ldi	r18, 0x34	; 52
    1294:	39 e0       	ldi	r19, 0x09	; 9
    1296:	33 87       	std	Z+11, r19	; 0x0b
    1298:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    129a:	95 87       	std	Z+13, r25	; 0x0d
    129c:	84 87       	std	Z+12, r24	; 0x0c
}
    129e:	08 95       	ret

000012a0 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    12a0:	08 95       	ret

000012a2 <__udivmodsi4>:
    12a2:	a1 e2       	ldi	r26, 0x21	; 33
    12a4:	1a 2e       	mov	r1, r26
    12a6:	aa 1b       	sub	r26, r26
    12a8:	bb 1b       	sub	r27, r27
    12aa:	fd 01       	movw	r30, r26
    12ac:	0d c0       	rjmp	.+26     	; 0x12c8 <__udivmodsi4_ep>

000012ae <__udivmodsi4_loop>:
    12ae:	aa 1f       	adc	r26, r26
    12b0:	bb 1f       	adc	r27, r27
    12b2:	ee 1f       	adc	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	a2 17       	cp	r26, r18
    12b8:	b3 07       	cpc	r27, r19
    12ba:	e4 07       	cpc	r30, r20
    12bc:	f5 07       	cpc	r31, r21
    12be:	20 f0       	brcs	.+8      	; 0x12c8 <__udivmodsi4_ep>
    12c0:	a2 1b       	sub	r26, r18
    12c2:	b3 0b       	sbc	r27, r19
    12c4:	e4 0b       	sbc	r30, r20
    12c6:	f5 0b       	sbc	r31, r21

000012c8 <__udivmodsi4_ep>:
    12c8:	66 1f       	adc	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	88 1f       	adc	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	1a 94       	dec	r1
    12d2:	69 f7       	brne	.-38     	; 0x12ae <__udivmodsi4_loop>
    12d4:	60 95       	com	r22
    12d6:	70 95       	com	r23
    12d8:	80 95       	com	r24
    12da:	90 95       	com	r25
    12dc:	9b 01       	movw	r18, r22
    12de:	ac 01       	movw	r20, r24
    12e0:	bd 01       	movw	r22, r26
    12e2:	cf 01       	movw	r24, r30
    12e4:	08 95       	ret

000012e6 <strncmp>:
    12e6:	fb 01       	movw	r30, r22
    12e8:	dc 01       	movw	r26, r24
    12ea:	41 50       	subi	r20, 0x01	; 1
    12ec:	50 40       	sbci	r21, 0x00	; 0
    12ee:	30 f0       	brcs	.+12     	; 0x12fc <strncmp+0x16>
    12f0:	8d 91       	ld	r24, X+
    12f2:	01 90       	ld	r0, Z+
    12f4:	80 19       	sub	r24, r0
    12f6:	19 f4       	brne	.+6      	; 0x12fe <strncmp+0x18>
    12f8:	00 20       	and	r0, r0
    12fa:	b9 f7       	brne	.-18     	; 0x12ea <strncmp+0x4>
    12fc:	88 1b       	sub	r24, r24
    12fe:	99 0b       	sbc	r25, r25
    1300:	08 95       	ret

00001302 <strncpy>:
    1302:	fb 01       	movw	r30, r22
    1304:	dc 01       	movw	r26, r24
    1306:	41 50       	subi	r20, 0x01	; 1
    1308:	50 40       	sbci	r21, 0x00	; 0
    130a:	48 f0       	brcs	.+18     	; 0x131e <strncpy+0x1c>
    130c:	01 90       	ld	r0, Z+
    130e:	0d 92       	st	X+, r0
    1310:	00 20       	and	r0, r0
    1312:	c9 f7       	brne	.-14     	; 0x1306 <strncpy+0x4>
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <strncpy+0x16>
    1316:	1d 92       	st	X+, r1
    1318:	41 50       	subi	r20, 0x01	; 1
    131a:	50 40       	sbci	r21, 0x00	; 0
    131c:	e0 f7       	brcc	.-8      	; 0x1316 <strncpy+0x14>
    131e:	08 95       	ret

00001320 <fprintf>:
    1320:	a0 e0       	ldi	r26, 0x00	; 0
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e5 e9       	ldi	r30, 0x95	; 149
    1326:	f9 e0       	ldi	r31, 0x09	; 9
    1328:	ad c2       	rjmp	.+1370   	; 0x1884 <__prologue_saves__+0x20>
    132a:	ae 01       	movw	r20, r28
    132c:	47 5f       	subi	r20, 0xF7	; 247
    132e:	5f 4f       	sbci	r21, 0xFF	; 255
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	6f 81       	ldd	r22, Y+7	; 0x07
    1336:	78 85       	ldd	r23, Y+8	; 0x08
    1338:	26 d0       	rcall	.+76     	; 0x1386 <vfprintf>
    133a:	20 96       	adiw	r28, 0x00	; 0
    133c:	e2 e0       	ldi	r30, 0x02	; 2
    133e:	be c2       	rjmp	.+1404   	; 0x18bc <__epilogue_restores__+0x20>

00001340 <fputs>:
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	7c 01       	movw	r14, r24
    134e:	eb 01       	movw	r28, r22
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	81 ff       	sbrs	r24, 1
    1354:	11 c0       	rjmp	.+34     	; 0x1378 <fputs+0x38>
    1356:	00 e0       	ldi	r16, 0x00	; 0
    1358:	10 e0       	ldi	r17, 0x00	; 0
    135a:	08 c0       	rjmp	.+16     	; 0x136c <fputs+0x2c>
    135c:	e8 85       	ldd	r30, Y+8	; 0x08
    135e:	f9 85       	ldd	r31, Y+9	; 0x09
    1360:	be 01       	movw	r22, r28
    1362:	09 95       	icall
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	11 f0       	breq	.+4      	; 0x136c <fputs+0x2c>
    1368:	0f ef       	ldi	r16, 0xFF	; 255
    136a:	1f ef       	ldi	r17, 0xFF	; 255
    136c:	f7 01       	movw	r30, r14
    136e:	81 91       	ld	r24, Z+
    1370:	7f 01       	movw	r14, r30
    1372:	88 23       	and	r24, r24
    1374:	99 f7       	brne	.-26     	; 0x135c <fputs+0x1c>
    1376:	02 c0       	rjmp	.+4      	; 0x137c <fputs+0x3c>
    1378:	0f ef       	ldi	r16, 0xFF	; 255
    137a:	1f ef       	ldi	r17, 0xFF	; 255
    137c:	c8 01       	movw	r24, r16
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	e6 e0       	ldi	r30, 0x06	; 6
    1384:	97 c2       	rjmp	.+1326   	; 0x18b4 <__epilogue_restores__+0x18>

00001386 <vfprintf>:
    1386:	ad e0       	ldi	r26, 0x0D	; 13
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e8 ec       	ldi	r30, 0xC8	; 200
    138c:	f9 e0       	ldi	r31, 0x09	; 9
    138e:	6a c2       	rjmp	.+1236   	; 0x1864 <__prologue_saves__>
    1390:	3c 01       	movw	r6, r24
    1392:	7d 87       	std	Y+13, r23	; 0x0d
    1394:	6c 87       	std	Y+12, r22	; 0x0c
    1396:	5a 01       	movw	r10, r20
    1398:	fc 01       	movw	r30, r24
    139a:	17 82       	std	Z+7, r1	; 0x07
    139c:	16 82       	std	Z+6, r1	; 0x06
    139e:	83 81       	ldd	r24, Z+3	; 0x03
    13a0:	81 ff       	sbrs	r24, 1
    13a2:	bb c1       	rjmp	.+886    	; 0x171a <vfprintf+0x394>
    13a4:	2e 01       	movw	r4, r28
    13a6:	08 94       	sec
    13a8:	41 1c       	adc	r4, r1
    13aa:	51 1c       	adc	r5, r1
    13ac:	f3 01       	movw	r30, r6
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	ec 85       	ldd	r30, Y+12	; 0x0c
    13b2:	fd 85       	ldd	r31, Y+13	; 0x0d
    13b4:	93 fd       	sbrc	r25, 3
    13b6:	85 91       	lpm	r24, Z+
    13b8:	93 ff       	sbrs	r25, 3
    13ba:	81 91       	ld	r24, Z+
    13bc:	fd 87       	std	Y+13, r31	; 0x0d
    13be:	ec 87       	std	Y+12, r30	; 0x0c
    13c0:	88 23       	and	r24, r24
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <vfprintf+0x40>
    13c4:	a6 c1       	rjmp	.+844    	; 0x1712 <vfprintf+0x38c>
    13c6:	85 32       	cpi	r24, 0x25	; 37
    13c8:	41 f4       	brne	.+16     	; 0x13da <vfprintf+0x54>
    13ca:	93 fd       	sbrc	r25, 3
    13cc:	85 91       	lpm	r24, Z+
    13ce:	93 ff       	sbrs	r25, 3
    13d0:	81 91       	ld	r24, Z+
    13d2:	fd 87       	std	Y+13, r31	; 0x0d
    13d4:	ec 87       	std	Y+12, r30	; 0x0c
    13d6:	85 32       	cpi	r24, 0x25	; 37
    13d8:	21 f4       	brne	.+8      	; 0x13e2 <vfprintf+0x5c>
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	b3 01       	movw	r22, r6
    13de:	b8 d1       	rcall	.+880    	; 0x1750 <fputc>
    13e0:	e5 cf       	rjmp	.-54     	; 0x13ac <vfprintf+0x26>
    13e2:	ff 24       	eor	r15, r15
    13e4:	ee 24       	eor	r14, r14
    13e6:	10 e0       	ldi	r17, 0x00	; 0
    13e8:	10 32       	cpi	r17, 0x20	; 32
    13ea:	b0 f4       	brcc	.+44     	; 0x1418 <vfprintf+0x92>
    13ec:	8b 32       	cpi	r24, 0x2B	; 43
    13ee:	69 f0       	breq	.+26     	; 0x140a <vfprintf+0x84>
    13f0:	8c 32       	cpi	r24, 0x2C	; 44
    13f2:	28 f4       	brcc	.+10     	; 0x13fe <vfprintf+0x78>
    13f4:	80 32       	cpi	r24, 0x20	; 32
    13f6:	51 f0       	breq	.+20     	; 0x140c <vfprintf+0x86>
    13f8:	83 32       	cpi	r24, 0x23	; 35
    13fa:	71 f4       	brne	.+28     	; 0x1418 <vfprintf+0x92>
    13fc:	0b c0       	rjmp	.+22     	; 0x1414 <vfprintf+0x8e>
    13fe:	8d 32       	cpi	r24, 0x2D	; 45
    1400:	39 f0       	breq	.+14     	; 0x1410 <vfprintf+0x8a>
    1402:	80 33       	cpi	r24, 0x30	; 48
    1404:	49 f4       	brne	.+18     	; 0x1418 <vfprintf+0x92>
    1406:	11 60       	ori	r17, 0x01	; 1
    1408:	2c c0       	rjmp	.+88     	; 0x1462 <vfprintf+0xdc>
    140a:	12 60       	ori	r17, 0x02	; 2
    140c:	14 60       	ori	r17, 0x04	; 4
    140e:	29 c0       	rjmp	.+82     	; 0x1462 <vfprintf+0xdc>
    1410:	18 60       	ori	r17, 0x08	; 8
    1412:	27 c0       	rjmp	.+78     	; 0x1462 <vfprintf+0xdc>
    1414:	10 61       	ori	r17, 0x10	; 16
    1416:	25 c0       	rjmp	.+74     	; 0x1462 <vfprintf+0xdc>
    1418:	17 fd       	sbrc	r17, 7
    141a:	2e c0       	rjmp	.+92     	; 0x1478 <vfprintf+0xf2>
    141c:	28 2f       	mov	r18, r24
    141e:	20 53       	subi	r18, 0x30	; 48
    1420:	2a 30       	cpi	r18, 0x0A	; 10
    1422:	98 f4       	brcc	.+38     	; 0x144a <vfprintf+0xc4>
    1424:	16 ff       	sbrs	r17, 6
    1426:	08 c0       	rjmp	.+16     	; 0x1438 <vfprintf+0xb2>
    1428:	8f 2d       	mov	r24, r15
    142a:	88 0f       	add	r24, r24
    142c:	f8 2e       	mov	r15, r24
    142e:	ff 0c       	add	r15, r15
    1430:	ff 0c       	add	r15, r15
    1432:	f8 0e       	add	r15, r24
    1434:	f2 0e       	add	r15, r18
    1436:	15 c0       	rjmp	.+42     	; 0x1462 <vfprintf+0xdc>
    1438:	8e 2d       	mov	r24, r14
    143a:	88 0f       	add	r24, r24
    143c:	e8 2e       	mov	r14, r24
    143e:	ee 0c       	add	r14, r14
    1440:	ee 0c       	add	r14, r14
    1442:	e8 0e       	add	r14, r24
    1444:	e2 0e       	add	r14, r18
    1446:	10 62       	ori	r17, 0x20	; 32
    1448:	0c c0       	rjmp	.+24     	; 0x1462 <vfprintf+0xdc>
    144a:	8e 32       	cpi	r24, 0x2E	; 46
    144c:	21 f4       	brne	.+8      	; 0x1456 <vfprintf+0xd0>
    144e:	16 fd       	sbrc	r17, 6
    1450:	60 c1       	rjmp	.+704    	; 0x1712 <vfprintf+0x38c>
    1452:	10 64       	ori	r17, 0x40	; 64
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0xdc>
    1456:	8c 36       	cpi	r24, 0x6C	; 108
    1458:	11 f4       	brne	.+4      	; 0x145e <vfprintf+0xd8>
    145a:	10 68       	ori	r17, 0x80	; 128
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <vfprintf+0xdc>
    145e:	88 36       	cpi	r24, 0x68	; 104
    1460:	59 f4       	brne	.+22     	; 0x1478 <vfprintf+0xf2>
    1462:	ec 85       	ldd	r30, Y+12	; 0x0c
    1464:	fd 85       	ldd	r31, Y+13	; 0x0d
    1466:	93 fd       	sbrc	r25, 3
    1468:	85 91       	lpm	r24, Z+
    146a:	93 ff       	sbrs	r25, 3
    146c:	81 91       	ld	r24, Z+
    146e:	fd 87       	std	Y+13, r31	; 0x0d
    1470:	ec 87       	std	Y+12, r30	; 0x0c
    1472:	88 23       	and	r24, r24
    1474:	09 f0       	breq	.+2      	; 0x1478 <vfprintf+0xf2>
    1476:	b8 cf       	rjmp	.-144    	; 0x13e8 <vfprintf+0x62>
    1478:	98 2f       	mov	r25, r24
    147a:	95 54       	subi	r25, 0x45	; 69
    147c:	93 30       	cpi	r25, 0x03	; 3
    147e:	18 f0       	brcs	.+6      	; 0x1486 <vfprintf+0x100>
    1480:	90 52       	subi	r25, 0x20	; 32
    1482:	93 30       	cpi	r25, 0x03	; 3
    1484:	38 f4       	brcc	.+14     	; 0x1494 <vfprintf+0x10e>
    1486:	24 e0       	ldi	r18, 0x04	; 4
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	a2 0e       	add	r10, r18
    148c:	b3 1e       	adc	r11, r19
    148e:	3f e3       	ldi	r19, 0x3F	; 63
    1490:	39 83       	std	Y+1, r19	; 0x01
    1492:	0f c0       	rjmp	.+30     	; 0x14b2 <vfprintf+0x12c>
    1494:	83 36       	cpi	r24, 0x63	; 99
    1496:	31 f0       	breq	.+12     	; 0x14a4 <vfprintf+0x11e>
    1498:	83 37       	cpi	r24, 0x73	; 115
    149a:	81 f0       	breq	.+32     	; 0x14bc <vfprintf+0x136>
    149c:	83 35       	cpi	r24, 0x53	; 83
    149e:	09 f0       	breq	.+2      	; 0x14a2 <vfprintf+0x11c>
    14a0:	56 c0       	rjmp	.+172    	; 0x154e <vfprintf+0x1c8>
    14a2:	21 c0       	rjmp	.+66     	; 0x14e6 <vfprintf+0x160>
    14a4:	f5 01       	movw	r30, r10
    14a6:	80 81       	ld	r24, Z
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	22 e0       	ldi	r18, 0x02	; 2
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	a2 0e       	add	r10, r18
    14b0:	b3 1e       	adc	r11, r19
    14b2:	21 e0       	ldi	r18, 0x01	; 1
    14b4:	c2 2e       	mov	r12, r18
    14b6:	d1 2c       	mov	r13, r1
    14b8:	42 01       	movw	r8, r4
    14ba:	13 c0       	rjmp	.+38     	; 0x14e2 <vfprintf+0x15c>
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	29 2e       	mov	r2, r25
    14c0:	31 2c       	mov	r3, r1
    14c2:	2a 0c       	add	r2, r10
    14c4:	3b 1c       	adc	r3, r11
    14c6:	f5 01       	movw	r30, r10
    14c8:	80 80       	ld	r8, Z
    14ca:	91 80       	ldd	r9, Z+1	; 0x01
    14cc:	16 ff       	sbrs	r17, 6
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <vfprintf+0x150>
    14d0:	6f 2d       	mov	r22, r15
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0x154>
    14d6:	6f ef       	ldi	r22, 0xFF	; 255
    14d8:	7f ef       	ldi	r23, 0xFF	; 255
    14da:	c4 01       	movw	r24, r8
    14dc:	2e d1       	rcall	.+604    	; 0x173a <strnlen>
    14de:	6c 01       	movw	r12, r24
    14e0:	51 01       	movw	r10, r2
    14e2:	1f 77       	andi	r17, 0x7F	; 127
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <vfprintf+0x188>
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	28 2e       	mov	r2, r24
    14ea:	31 2c       	mov	r3, r1
    14ec:	2a 0c       	add	r2, r10
    14ee:	3b 1c       	adc	r3, r11
    14f0:	f5 01       	movw	r30, r10
    14f2:	80 80       	ld	r8, Z
    14f4:	91 80       	ldd	r9, Z+1	; 0x01
    14f6:	16 ff       	sbrs	r17, 6
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <vfprintf+0x17a>
    14fa:	6f 2d       	mov	r22, r15
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <vfprintf+0x17e>
    1500:	6f ef       	ldi	r22, 0xFF	; 255
    1502:	7f ef       	ldi	r23, 0xFF	; 255
    1504:	c4 01       	movw	r24, r8
    1506:	0e d1       	rcall	.+540    	; 0x1724 <strnlen_P>
    1508:	6c 01       	movw	r12, r24
    150a:	10 68       	ori	r17, 0x80	; 128
    150c:	51 01       	movw	r10, r2
    150e:	13 fd       	sbrc	r17, 3
    1510:	1a c0       	rjmp	.+52     	; 0x1546 <vfprintf+0x1c0>
    1512:	05 c0       	rjmp	.+10     	; 0x151e <vfprintf+0x198>
    1514:	80 e2       	ldi	r24, 0x20	; 32
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	b3 01       	movw	r22, r6
    151a:	1a d1       	rcall	.+564    	; 0x1750 <fputc>
    151c:	ea 94       	dec	r14
    151e:	8e 2d       	mov	r24, r14
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	c8 16       	cp	r12, r24
    1524:	d9 06       	cpc	r13, r25
    1526:	b0 f3       	brcs	.-20     	; 0x1514 <vfprintf+0x18e>
    1528:	0e c0       	rjmp	.+28     	; 0x1546 <vfprintf+0x1c0>
    152a:	f4 01       	movw	r30, r8
    152c:	17 fd       	sbrc	r17, 7
    152e:	85 91       	lpm	r24, Z+
    1530:	17 ff       	sbrs	r17, 7
    1532:	81 91       	ld	r24, Z+
    1534:	4f 01       	movw	r8, r30
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	b3 01       	movw	r22, r6
    153a:	0a d1       	rcall	.+532    	; 0x1750 <fputc>
    153c:	e1 10       	cpse	r14, r1
    153e:	ea 94       	dec	r14
    1540:	08 94       	sec
    1542:	c1 08       	sbc	r12, r1
    1544:	d1 08       	sbc	r13, r1
    1546:	c1 14       	cp	r12, r1
    1548:	d1 04       	cpc	r13, r1
    154a:	79 f7       	brne	.-34     	; 0x152a <vfprintf+0x1a4>
    154c:	df c0       	rjmp	.+446    	; 0x170c <vfprintf+0x386>
    154e:	84 36       	cpi	r24, 0x64	; 100
    1550:	11 f0       	breq	.+4      	; 0x1556 <vfprintf+0x1d0>
    1552:	89 36       	cpi	r24, 0x69	; 105
    1554:	49 f5       	brne	.+82     	; 0x15a8 <vfprintf+0x222>
    1556:	f5 01       	movw	r30, r10
    1558:	17 ff       	sbrs	r17, 7
    155a:	07 c0       	rjmp	.+14     	; 0x156a <vfprintf+0x1e4>
    155c:	80 81       	ld	r24, Z
    155e:	91 81       	ldd	r25, Z+1	; 0x01
    1560:	a2 81       	ldd	r26, Z+2	; 0x02
    1562:	b3 81       	ldd	r27, Z+3	; 0x03
    1564:	24 e0       	ldi	r18, 0x04	; 4
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	08 c0       	rjmp	.+16     	; 0x157a <vfprintf+0x1f4>
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	aa 27       	eor	r26, r26
    1570:	97 fd       	sbrc	r25, 7
    1572:	a0 95       	com	r26
    1574:	ba 2f       	mov	r27, r26
    1576:	22 e0       	ldi	r18, 0x02	; 2
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	a2 0e       	add	r10, r18
    157c:	b3 1e       	adc	r11, r19
    157e:	01 2f       	mov	r16, r17
    1580:	0f 76       	andi	r16, 0x6F	; 111
    1582:	b7 ff       	sbrs	r27, 7
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <vfprintf+0x210>
    1586:	b0 95       	com	r27
    1588:	a0 95       	com	r26
    158a:	90 95       	com	r25
    158c:	81 95       	neg	r24
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	af 4f       	sbci	r26, 0xFF	; 255
    1592:	bf 4f       	sbci	r27, 0xFF	; 255
    1594:	00 68       	ori	r16, 0x80	; 128
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	a2 01       	movw	r20, r4
    159c:	2a e0       	ldi	r18, 0x0A	; 10
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	03 d1       	rcall	.+518    	; 0x17a8 <__ultoa_invert>
    15a2:	d8 2e       	mov	r13, r24
    15a4:	d4 18       	sub	r13, r4
    15a6:	3e c0       	rjmp	.+124    	; 0x1624 <vfprintf+0x29e>
    15a8:	85 37       	cpi	r24, 0x75	; 117
    15aa:	21 f4       	brne	.+8      	; 0x15b4 <vfprintf+0x22e>
    15ac:	1f 7e       	andi	r17, 0xEF	; 239
    15ae:	2a e0       	ldi	r18, 0x0A	; 10
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	20 c0       	rjmp	.+64     	; 0x15f4 <vfprintf+0x26e>
    15b4:	19 7f       	andi	r17, 0xF9	; 249
    15b6:	8f 36       	cpi	r24, 0x6F	; 111
    15b8:	a9 f0       	breq	.+42     	; 0x15e4 <vfprintf+0x25e>
    15ba:	80 37       	cpi	r24, 0x70	; 112
    15bc:	20 f4       	brcc	.+8      	; 0x15c6 <vfprintf+0x240>
    15be:	88 35       	cpi	r24, 0x58	; 88
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <vfprintf+0x23e>
    15c2:	a7 c0       	rjmp	.+334    	; 0x1712 <vfprintf+0x38c>
    15c4:	0b c0       	rjmp	.+22     	; 0x15dc <vfprintf+0x256>
    15c6:	80 37       	cpi	r24, 0x70	; 112
    15c8:	21 f0       	breq	.+8      	; 0x15d2 <vfprintf+0x24c>
    15ca:	88 37       	cpi	r24, 0x78	; 120
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <vfprintf+0x24a>
    15ce:	a1 c0       	rjmp	.+322    	; 0x1712 <vfprintf+0x38c>
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <vfprintf+0x24e>
    15d2:	10 61       	ori	r17, 0x10	; 16
    15d4:	14 ff       	sbrs	r17, 4
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <vfprintf+0x264>
    15d8:	14 60       	ori	r17, 0x04	; 4
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <vfprintf+0x264>
    15dc:	14 ff       	sbrs	r17, 4
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <vfprintf+0x26a>
    15e0:	16 60       	ori	r17, 0x06	; 6
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <vfprintf+0x26a>
    15e4:	28 e0       	ldi	r18, 0x08	; 8
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <vfprintf+0x26e>
    15ea:	20 e1       	ldi	r18, 0x10	; 16
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <vfprintf+0x26e>
    15f0:	20 e1       	ldi	r18, 0x10	; 16
    15f2:	32 e0       	ldi	r19, 0x02	; 2
    15f4:	f5 01       	movw	r30, r10
    15f6:	17 ff       	sbrs	r17, 7
    15f8:	07 c0       	rjmp	.+14     	; 0x1608 <vfprintf+0x282>
    15fa:	60 81       	ld	r22, Z
    15fc:	71 81       	ldd	r23, Z+1	; 0x01
    15fe:	82 81       	ldd	r24, Z+2	; 0x02
    1600:	93 81       	ldd	r25, Z+3	; 0x03
    1602:	44 e0       	ldi	r20, 0x04	; 4
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <vfprintf+0x28e>
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	42 e0       	ldi	r20, 0x02	; 2
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	a4 0e       	add	r10, r20
    1616:	b5 1e       	adc	r11, r21
    1618:	a2 01       	movw	r20, r4
    161a:	c6 d0       	rcall	.+396    	; 0x17a8 <__ultoa_invert>
    161c:	d8 2e       	mov	r13, r24
    161e:	d4 18       	sub	r13, r4
    1620:	01 2f       	mov	r16, r17
    1622:	0f 77       	andi	r16, 0x7F	; 127
    1624:	06 ff       	sbrs	r16, 6
    1626:	09 c0       	rjmp	.+18     	; 0x163a <vfprintf+0x2b4>
    1628:	0e 7f       	andi	r16, 0xFE	; 254
    162a:	df 14       	cp	r13, r15
    162c:	30 f4       	brcc	.+12     	; 0x163a <vfprintf+0x2b4>
    162e:	04 ff       	sbrs	r16, 4
    1630:	06 c0       	rjmp	.+12     	; 0x163e <vfprintf+0x2b8>
    1632:	02 fd       	sbrc	r16, 2
    1634:	04 c0       	rjmp	.+8      	; 0x163e <vfprintf+0x2b8>
    1636:	0f 7e       	andi	r16, 0xEF	; 239
    1638:	02 c0       	rjmp	.+4      	; 0x163e <vfprintf+0x2b8>
    163a:	1d 2d       	mov	r17, r13
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <vfprintf+0x2ba>
    163e:	1f 2d       	mov	r17, r15
    1640:	80 2f       	mov	r24, r16
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	04 ff       	sbrs	r16, 4
    1646:	0c c0       	rjmp	.+24     	; 0x1660 <vfprintf+0x2da>
    1648:	fe 01       	movw	r30, r28
    164a:	ed 0d       	add	r30, r13
    164c:	f1 1d       	adc	r31, r1
    164e:	20 81       	ld	r18, Z
    1650:	20 33       	cpi	r18, 0x30	; 48
    1652:	11 f4       	brne	.+4      	; 0x1658 <vfprintf+0x2d2>
    1654:	09 7e       	andi	r16, 0xE9	; 233
    1656:	09 c0       	rjmp	.+18     	; 0x166a <vfprintf+0x2e4>
    1658:	02 ff       	sbrs	r16, 2
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0x2e2>
    165c:	1e 5f       	subi	r17, 0xFE	; 254
    165e:	05 c0       	rjmp	.+10     	; 0x166a <vfprintf+0x2e4>
    1660:	86 78       	andi	r24, 0x86	; 134
    1662:	90 70       	andi	r25, 0x00	; 0
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	09 f0       	breq	.+2      	; 0x166a <vfprintf+0x2e4>
    1668:	1f 5f       	subi	r17, 0xFF	; 255
    166a:	80 2e       	mov	r8, r16
    166c:	99 24       	eor	r9, r9
    166e:	03 fd       	sbrc	r16, 3
    1670:	11 c0       	rjmp	.+34     	; 0x1694 <vfprintf+0x30e>
    1672:	00 ff       	sbrs	r16, 0
    1674:	0c c0       	rjmp	.+24     	; 0x168e <vfprintf+0x308>
    1676:	fd 2c       	mov	r15, r13
    1678:	1e 15       	cp	r17, r14
    167a:	48 f4       	brcc	.+18     	; 0x168e <vfprintf+0x308>
    167c:	fe 0c       	add	r15, r14
    167e:	f1 1a       	sub	r15, r17
    1680:	1e 2d       	mov	r17, r14
    1682:	05 c0       	rjmp	.+10     	; 0x168e <vfprintf+0x308>
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	b3 01       	movw	r22, r6
    168a:	62 d0       	rcall	.+196    	; 0x1750 <fputc>
    168c:	1f 5f       	subi	r17, 0xFF	; 255
    168e:	1e 15       	cp	r17, r14
    1690:	c8 f3       	brcs	.-14     	; 0x1684 <vfprintf+0x2fe>
    1692:	04 c0       	rjmp	.+8      	; 0x169c <vfprintf+0x316>
    1694:	1e 15       	cp	r17, r14
    1696:	10 f4       	brcc	.+4      	; 0x169c <vfprintf+0x316>
    1698:	e1 1a       	sub	r14, r17
    169a:	01 c0       	rjmp	.+2      	; 0x169e <vfprintf+0x318>
    169c:	ee 24       	eor	r14, r14
    169e:	84 fe       	sbrs	r8, 4
    16a0:	0e c0       	rjmp	.+28     	; 0x16be <vfprintf+0x338>
    16a2:	80 e3       	ldi	r24, 0x30	; 48
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	b3 01       	movw	r22, r6
    16a8:	53 d0       	rcall	.+166    	; 0x1750 <fputc>
    16aa:	82 fe       	sbrs	r8, 2
    16ac:	1d c0       	rjmp	.+58     	; 0x16e8 <vfprintf+0x362>
    16ae:	81 fe       	sbrs	r8, 1
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <vfprintf+0x332>
    16b2:	88 e5       	ldi	r24, 0x58	; 88
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	10 c0       	rjmp	.+32     	; 0x16d8 <vfprintf+0x352>
    16b8:	88 e7       	ldi	r24, 0x78	; 120
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0d c0       	rjmp	.+26     	; 0x16d8 <vfprintf+0x352>
    16be:	c4 01       	movw	r24, r8
    16c0:	86 78       	andi	r24, 0x86	; 134
    16c2:	90 70       	andi	r25, 0x00	; 0
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	81 f0       	breq	.+32     	; 0x16e8 <vfprintf+0x362>
    16c8:	81 fc       	sbrc	r8, 1
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x34a>
    16cc:	80 e2       	ldi	r24, 0x20	; 32
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <vfprintf+0x34c>
    16d0:	8b e2       	ldi	r24, 0x2B	; 43
    16d2:	07 fd       	sbrc	r16, 7
    16d4:	8d e2       	ldi	r24, 0x2D	; 45
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	b3 01       	movw	r22, r6
    16da:	3a d0       	rcall	.+116    	; 0x1750 <fputc>
    16dc:	05 c0       	rjmp	.+10     	; 0x16e8 <vfprintf+0x362>
    16de:	80 e3       	ldi	r24, 0x30	; 48
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	b3 01       	movw	r22, r6
    16e4:	35 d0       	rcall	.+106    	; 0x1750 <fputc>
    16e6:	fa 94       	dec	r15
    16e8:	df 14       	cp	r13, r15
    16ea:	c8 f3       	brcs	.-14     	; 0x16de <vfprintf+0x358>
    16ec:	da 94       	dec	r13
    16ee:	f2 01       	movw	r30, r4
    16f0:	ed 0d       	add	r30, r13
    16f2:	f1 1d       	adc	r31, r1
    16f4:	80 81       	ld	r24, Z
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	b3 01       	movw	r22, r6
    16fa:	2a d0       	rcall	.+84     	; 0x1750 <fputc>
    16fc:	dd 20       	and	r13, r13
    16fe:	b1 f7       	brne	.-20     	; 0x16ec <vfprintf+0x366>
    1700:	05 c0       	rjmp	.+10     	; 0x170c <vfprintf+0x386>
    1702:	80 e2       	ldi	r24, 0x20	; 32
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	b3 01       	movw	r22, r6
    1708:	23 d0       	rcall	.+70     	; 0x1750 <fputc>
    170a:	ea 94       	dec	r14
    170c:	ee 20       	and	r14, r14
    170e:	c9 f7       	brne	.-14     	; 0x1702 <vfprintf+0x37c>
    1710:	4d ce       	rjmp	.-870    	; 0x13ac <vfprintf+0x26>
    1712:	f3 01       	movw	r30, r6
    1714:	86 81       	ldd	r24, Z+6	; 0x06
    1716:	97 81       	ldd	r25, Z+7	; 0x07
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0x398>
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f ef       	ldi	r25, 0xFF	; 255
    171e:	2d 96       	adiw	r28, 0x0d	; 13
    1720:	e2 e1       	ldi	r30, 0x12	; 18
    1722:	bc c0       	rjmp	.+376    	; 0x189c <__epilogue_restores__>

00001724 <strnlen_P>:
    1724:	fc 01       	movw	r30, r24
    1726:	05 90       	lpm	r0, Z+
    1728:	61 50       	subi	r22, 0x01	; 1
    172a:	70 40       	sbci	r23, 0x00	; 0
    172c:	01 10       	cpse	r0, r1
    172e:	d8 f7       	brcc	.-10     	; 0x1726 <strnlen_P+0x2>
    1730:	80 95       	com	r24
    1732:	90 95       	com	r25
    1734:	8e 0f       	add	r24, r30
    1736:	9f 1f       	adc	r25, r31
    1738:	08 95       	ret

0000173a <strnlen>:
    173a:	fc 01       	movw	r30, r24
    173c:	61 50       	subi	r22, 0x01	; 1
    173e:	70 40       	sbci	r23, 0x00	; 0
    1740:	01 90       	ld	r0, Z+
    1742:	01 10       	cpse	r0, r1
    1744:	d8 f7       	brcc	.-10     	; 0x173c <strnlen+0x2>
    1746:	80 95       	com	r24
    1748:	90 95       	com	r25
    174a:	8e 0f       	add	r24, r30
    174c:	9f 1f       	adc	r25, r31
    174e:	08 95       	ret

00001750 <fputc>:
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	8c 01       	movw	r16, r24
    175a:	eb 01       	movw	r28, r22
    175c:	8b 81       	ldd	r24, Y+3	; 0x03
    175e:	81 ff       	sbrs	r24, 1
    1760:	1b c0       	rjmp	.+54     	; 0x1798 <fputc+0x48>
    1762:	82 ff       	sbrs	r24, 2
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <fputc+0x30>
    1766:	2e 81       	ldd	r18, Y+6	; 0x06
    1768:	3f 81       	ldd	r19, Y+7	; 0x07
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	28 17       	cp	r18, r24
    1770:	39 07       	cpc	r19, r25
    1772:	64 f4       	brge	.+24     	; 0x178c <fputc+0x3c>
    1774:	e8 81       	ld	r30, Y
    1776:	f9 81       	ldd	r31, Y+1	; 0x01
    1778:	01 93       	st	Z+, r16
    177a:	f9 83       	std	Y+1, r31	; 0x01
    177c:	e8 83       	st	Y, r30
    177e:	06 c0       	rjmp	.+12     	; 0x178c <fputc+0x3c>
    1780:	e8 85       	ldd	r30, Y+8	; 0x08
    1782:	f9 85       	ldd	r31, Y+9	; 0x09
    1784:	80 2f       	mov	r24, r16
    1786:	09 95       	icall
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	31 f4       	brne	.+12     	; 0x1798 <fputc+0x48>
    178c:	8e 81       	ldd	r24, Y+6	; 0x06
    178e:	9f 81       	ldd	r25, Y+7	; 0x07
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	9f 83       	std	Y+7, r25	; 0x07
    1794:	8e 83       	std	Y+6, r24	; 0x06
    1796:	02 c0       	rjmp	.+4      	; 0x179c <fputc+0x4c>
    1798:	0f ef       	ldi	r16, 0xFF	; 255
    179a:	1f ef       	ldi	r17, 0xFF	; 255
    179c:	c8 01       	movw	r24, r16
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	08 95       	ret

000017a8 <__ultoa_invert>:
    17a8:	fa 01       	movw	r30, r20
    17aa:	aa 27       	eor	r26, r26
    17ac:	28 30       	cpi	r18, 0x08	; 8
    17ae:	51 f1       	breq	.+84     	; 0x1804 <__ultoa_invert+0x5c>
    17b0:	20 31       	cpi	r18, 0x10	; 16
    17b2:	81 f1       	breq	.+96     	; 0x1814 <__ultoa_invert+0x6c>
    17b4:	e8 94       	clt
    17b6:	6f 93       	push	r22
    17b8:	6e 7f       	andi	r22, 0xFE	; 254
    17ba:	6e 5f       	subi	r22, 0xFE	; 254
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	8f 4f       	sbci	r24, 0xFF	; 255
    17c0:	9f 4f       	sbci	r25, 0xFF	; 255
    17c2:	af 4f       	sbci	r26, 0xFF	; 255
    17c4:	b1 e0       	ldi	r27, 0x01	; 1
    17c6:	3e d0       	rcall	.+124    	; 0x1844 <__ultoa_invert+0x9c>
    17c8:	b4 e0       	ldi	r27, 0x04	; 4
    17ca:	3c d0       	rcall	.+120    	; 0x1844 <__ultoa_invert+0x9c>
    17cc:	67 0f       	add	r22, r23
    17ce:	78 1f       	adc	r23, r24
    17d0:	89 1f       	adc	r24, r25
    17d2:	9a 1f       	adc	r25, r26
    17d4:	a1 1d       	adc	r26, r1
    17d6:	68 0f       	add	r22, r24
    17d8:	79 1f       	adc	r23, r25
    17da:	8a 1f       	adc	r24, r26
    17dc:	91 1d       	adc	r25, r1
    17de:	a1 1d       	adc	r26, r1
    17e0:	6a 0f       	add	r22, r26
    17e2:	71 1d       	adc	r23, r1
    17e4:	81 1d       	adc	r24, r1
    17e6:	91 1d       	adc	r25, r1
    17e8:	a1 1d       	adc	r26, r1
    17ea:	20 d0       	rcall	.+64     	; 0x182c <__ultoa_invert+0x84>
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <__ultoa_invert+0x48>
    17ee:	68 94       	set
    17f0:	3f 91       	pop	r19
    17f2:	2a e0       	ldi	r18, 0x0A	; 10
    17f4:	26 9f       	mul	r18, r22
    17f6:	11 24       	eor	r1, r1
    17f8:	30 19       	sub	r19, r0
    17fa:	30 5d       	subi	r19, 0xD0	; 208
    17fc:	31 93       	st	Z+, r19
    17fe:	de f6       	brtc	.-74     	; 0x17b6 <__ultoa_invert+0xe>
    1800:	cf 01       	movw	r24, r30
    1802:	08 95       	ret
    1804:	46 2f       	mov	r20, r22
    1806:	47 70       	andi	r20, 0x07	; 7
    1808:	40 5d       	subi	r20, 0xD0	; 208
    180a:	41 93       	st	Z+, r20
    180c:	b3 e0       	ldi	r27, 0x03	; 3
    180e:	0f d0       	rcall	.+30     	; 0x182e <__ultoa_invert+0x86>
    1810:	c9 f7       	brne	.-14     	; 0x1804 <__ultoa_invert+0x5c>
    1812:	f6 cf       	rjmp	.-20     	; 0x1800 <__ultoa_invert+0x58>
    1814:	46 2f       	mov	r20, r22
    1816:	4f 70       	andi	r20, 0x0F	; 15
    1818:	40 5d       	subi	r20, 0xD0	; 208
    181a:	4a 33       	cpi	r20, 0x3A	; 58
    181c:	18 f0       	brcs	.+6      	; 0x1824 <__ultoa_invert+0x7c>
    181e:	49 5d       	subi	r20, 0xD9	; 217
    1820:	31 fd       	sbrc	r19, 1
    1822:	40 52       	subi	r20, 0x20	; 32
    1824:	41 93       	st	Z+, r20
    1826:	02 d0       	rcall	.+4      	; 0x182c <__ultoa_invert+0x84>
    1828:	a9 f7       	brne	.-22     	; 0x1814 <__ultoa_invert+0x6c>
    182a:	ea cf       	rjmp	.-44     	; 0x1800 <__ultoa_invert+0x58>
    182c:	b4 e0       	ldi	r27, 0x04	; 4
    182e:	a6 95       	lsr	r26
    1830:	97 95       	ror	r25
    1832:	87 95       	ror	r24
    1834:	77 95       	ror	r23
    1836:	67 95       	ror	r22
    1838:	ba 95       	dec	r27
    183a:	c9 f7       	brne	.-14     	; 0x182e <__ultoa_invert+0x86>
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	61 05       	cpc	r22, r1
    1840:	71 05       	cpc	r23, r1
    1842:	08 95       	ret
    1844:	9b 01       	movw	r18, r22
    1846:	ac 01       	movw	r20, r24
    1848:	0a 2e       	mov	r0, r26
    184a:	06 94       	lsr	r0
    184c:	57 95       	ror	r21
    184e:	47 95       	ror	r20
    1850:	37 95       	ror	r19
    1852:	27 95       	ror	r18
    1854:	ba 95       	dec	r27
    1856:	c9 f7       	brne	.-14     	; 0x184a <__ultoa_invert+0xa2>
    1858:	62 0f       	add	r22, r18
    185a:	73 1f       	adc	r23, r19
    185c:	84 1f       	adc	r24, r20
    185e:	95 1f       	adc	r25, r21
    1860:	a0 1d       	adc	r26, r0
    1862:	08 95       	ret

00001864 <__prologue_saves__>:
    1864:	2f 92       	push	r2
    1866:	3f 92       	push	r3
    1868:	4f 92       	push	r4
    186a:	5f 92       	push	r5
    186c:	6f 92       	push	r6
    186e:	7f 92       	push	r7
    1870:	8f 92       	push	r8
    1872:	9f 92       	push	r9
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	ca 1b       	sub	r28, r26
    188e:	db 0b       	sbc	r29, r27
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	09 94       	ijmp

0000189c <__epilogue_restores__>:
    189c:	2a 88       	ldd	r2, Y+18	; 0x12
    189e:	39 88       	ldd	r3, Y+17	; 0x11
    18a0:	48 88       	ldd	r4, Y+16	; 0x10
    18a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    18a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    18a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    18a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    18aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    18ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    18ae:	b9 84       	ldd	r11, Y+9	; 0x09
    18b0:	c8 84       	ldd	r12, Y+8	; 0x08
    18b2:	df 80       	ldd	r13, Y+7	; 0x07
    18b4:	ee 80       	ldd	r14, Y+6	; 0x06
    18b6:	fd 80       	ldd	r15, Y+5	; 0x05
    18b8:	0c 81       	ldd	r16, Y+4	; 0x04
    18ba:	1b 81       	ldd	r17, Y+3	; 0x03
    18bc:	aa 81       	ldd	r26, Y+2	; 0x02
    18be:	b9 81       	ldd	r27, Y+1	; 0x01
    18c0:	ce 0f       	add	r28, r30
    18c2:	d1 1d       	adc	r29, r1
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	ed 01       	movw	r28, r26
    18d0:	08 95       	ret

000018d2 <_exit>:
    18d2:	f8 94       	cli

000018d4 <__stop_program>:
    18d4:	ff cf       	rjmp	.-2      	; 0x18d4 <__stop_program>
