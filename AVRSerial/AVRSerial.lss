
AVRSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00001896  0000192a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000154  0080015e  0080015e  00001988  2**0
                  ALLOC
  3 .stab         000011dc  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000047e  00000000  00000000  00002b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000005d8  00000000  00000000  00002fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009242  00000000  00000000  000035c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000264d  00000000  00000000  0000c802  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004064  00000000  00000000  0000ee4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f3c  00000000  00000000  00012eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b03  00000000  00000000  00013df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000597a  00000000  00000000  000178f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  0001d26d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
       2:	00 00       	nop
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	9c c4       	rjmp	.+2360   	; 0x962 <__vector_10>
      2a:	00 00       	nop
      2c:	5e c5       	rjmp	.+2748   	; 0xaea <__vector_11>
      2e:	00 00       	nop
      30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
      36:	00 00       	nop
      38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
      42:	00 00       	nop
      44:	cf c1       	rjmp	.+926    	; 0x3e4 <__vector_17>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
      62:	00 00       	nop
      64:	8e c0       	rjmp	.+284    	; 0x182 <__bad_interrupt>
      66:	00 00       	nop
      68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
      92:	00 00       	nop
      94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
      96:	00 00       	nop
      98:	74 c0       	rjmp	.+232    	; 0x182 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	72 c0       	rjmp	.+228    	; 0x182 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	70 c0       	rjmp	.+224    	; 0x182 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6e c0       	rjmp	.+220    	; 0x182 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6c c0       	rjmp	.+216    	; 0x182 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
      bc:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
      cc:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     10a:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     11a:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12a:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000138 <DeviceDescriptor>:
     138:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     148:	dc 01                                               ..

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	da e0       	ldi	r29, 0x0A	; 10
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	e6 e9       	ldi	r30, 0x96	; 150
     15e:	f8 e1       	ldi	r31, 0x18	; 24
     160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x10>
     162:	05 90       	lpm	r0, Z+
     164:	0d 92       	st	X+, r0
     166:	ae 35       	cpi	r26, 0x5E	; 94
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0xc>

0000016c <__do_clear_bss>:
     16c:	12 e0       	ldi	r17, 0x02	; 2
     16e:	ae e5       	ldi	r26, 0x5E	; 94
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	a2 3b       	cpi	r26, 0xB2	; 178
     178:	b1 07       	cpc	r27, r17
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	3b d0       	rcall	.+118    	; 0x1f4 <main>
     17e:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     184:	9b b1       	in	r25, 0x0b	; 11
     186:	9f 70       	andi	r25, 0x0F	; 15
     188:	98 2b       	or	r25, r24
     18a:	9b b9       	out	0x0b, r25	; 11
			}
     18c:	08 95       	ret

0000018e <timerInit>:
    timerInit();
}

void timerInit()
{
    cli();
     18e:	f8 94       	cli
    
    TCCR1A = 0;
     190:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = 0xC;
     194:	8c e0       	ldi	r24, 0x0C	; 12
     196:	80 93 81 00 	sts	0x0081, r24
    TCCR1C = 0;
     19a:	10 92 82 00 	sts	0x0082, r1
    TCNT1= 0;
     19e:	10 92 85 00 	sts	0x0085, r1
     1a2:	10 92 84 00 	sts	0x0084, r1
    
    OCR1A = 0xF440;
     1a6:	80 e4       	ldi	r24, 0x40	; 64
     1a8:	94 ef       	ldi	r25, 0xF4	; 244
     1aa:	90 93 89 00 	sts	0x0089, r25
     1ae:	80 93 88 00 	sts	0x0088, r24
    
    TIMSK1 = 2;
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	80 93 6f 00 	sts	0x006F, r24
    
    sei();
     1b8:	78 94       	sei
}
     1ba:	08 95       	ret

000001bc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     1bc:	84 b7       	in	r24, 0x34	; 52
     1be:	87 7f       	andi	r24, 0xF7	; 247
     1c0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     1c2:	88 e1       	ldi	r24, 0x18	; 24
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	80 93 60 00 	sts	0x0060, r24
     1cc:	10 92 60 00 	sts	0x0060, r1
     1d0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	80 e8       	ldi	r24, 0x80	; 128
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	f8 94       	cli
     1da:	80 93 61 00 	sts	0x0061, r24
     1de:	90 93 61 00 	sts	0x0061, r25
     1e2:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     1e4:	8a b1       	in	r24, 0x0a	; 10
     1e6:	80 6f       	ori	r24, 0xF0	; 240
     1e8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	8f 70       	andi	r24, 0x0F	; 15
     1ee:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     1f0:	9b d3       	rcall	.+1846   	; 0x928 <USB_Init>
     1f2:	cd cf       	rjmp	.-102    	; 0x18e <timerInit>

000001f4 <main>:
    timerInit();
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
}
     1f8:	cd b7       	in	r28, 0x3d	; 61

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	a8 97       	sbiw	r28, 0x28	; 40
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
    #define STRING_LENGTH 30
    char string[STRING_LENGTH];
    char *str = (char *)&string;
    char i = 0;
    
	SetupHardware();
     208:	d9 df       	rcall	.-78     	; 0x1bc <SetupHardware>
     20a:	e2 e6       	ldi	r30, 0x62	; 98
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	2f b7       	in	r18, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     210:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     212:	8e e6       	ldi	r24, 0x6E	; 110

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	91 83       	std	Z+1, r25	; 0x01
     218:	80 83       	st	Z, r24
     21a:	93 83       	std	Z+3, r25	; 0x03
			Buffer->Out    = DataPtr;
     21c:	82 83       	std	Z+2, r24	; 0x02
     21e:	95 83       	std	Z+5, r25	; 0x05
			Buffer->Start  = &DataPtr[0];
     220:	84 83       	std	Z+4, r24	; 0x04
     222:	8e ee       	ldi	r24, 0xEE	; 238
			Buffer->End    = &DataPtr[Size];
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	97 83       	std	Z+7, r25	; 0x07
     228:	86 83       	std	Z+6, r24	; 0x06
     22a:	80 e8       	ldi	r24, 0x80	; 128
			Buffer->Size   = Size;
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	91 87       	std	Z+9, r25	; 0x09
     230:	80 87       	std	Z+8, r24	; 0x08
     232:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     234:	12 86       	std	Z+10, r1	; 0x0a
     236:	2f bf       	out	0x3f, r18	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     238:	ee ee       	ldi	r30, 0xEE	; 238
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     23a:	f1 e0       	ldi	r31, 0x01	; 1
     23c:	4f b7       	in	r20, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     23e:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     240:	2a ef       	ldi	r18, 0xFA	; 250

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     242:	31 e0       	ldi	r19, 0x01	; 1
     244:	31 83       	std	Z+1, r19	; 0x01
     246:	20 83       	st	Z, r18
     248:	33 83       	std	Z+3, r19	; 0x03
			Buffer->Out    = DataPtr;
     24a:	22 83       	std	Z+2, r18	; 0x02
     24c:	35 83       	std	Z+5, r19	; 0x05
			Buffer->Start  = &DataPtr[0];
     24e:	24 83       	std	Z+4, r18	; 0x04
     250:	2a e7       	ldi	r18, 0x7A	; 122
			Buffer->End    = &DataPtr[Size];
     252:	32 e0       	ldi	r19, 0x02	; 2
     254:	37 83       	std	Z+7, r19	; 0x07
     256:	26 83       	std	Z+6, r18	; 0x06
     258:	91 87       	std	Z+9, r25	; 0x09
			Buffer->Size   = Size;
     25a:	80 87       	std	Z+8, r24	; 0x08
     25c:	13 86       	std	Z+11, r1	; 0x0b
			Buffer->Count  = 0;
     25e:	12 86       	std	Z+10, r1	; 0x0a
     260:	4f bf       	out	0x3f, r20	; 63
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     262:	80 e3       	ldi	r24, 0x30	; 48

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));
    
    CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	6a e7       	ldi	r22, 0x7A	; 122
     268:	72 e0       	ldi	r23, 0x02	; 2
     26a:	e7 d7       	rcall	.+4046   	; 0x123a <CDC_Device_CreateStream>
     26c:	80 e1       	ldi	r24, 0x10	; 16
     26e:	8a df       	rcall	.-236    	; 0x184 <LEDs_SetAllLEDs>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     270:	78 94       	sei
     272:	8b e0       	ldi	r24, 0x0B	; 11
     274:	e8 2e       	mov	r14, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     276:	f1 2c       	mov	r15, r1
 */
int main(void)
{
    #define STRING_LENGTH 30
    char string[STRING_LENGTH];
    char *str = (char *)&string;
     278:	ec 0e       	add	r14, r28
     27a:	fd 1e       	adc	r15, r29
     27c:	8e e1       	ldi	r24, 0x1E	; 30
     27e:	f7 01       	movw	r30, r14
     280:	11 92       	st	Z+, r1
    CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
    
    memset(str, '\0', STRING_LENGTH);
     282:	8a 95       	dec	r24
     284:	e9 f7       	brne	.-6      	; 0x280 <main+0x8c>
     286:	80 e3       	ldi	r24, 0x30	; 48
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	60 e0       	ldi	r22, 0x00	; 0
    CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Ready\r\n");
     28c:	71 e0       	ldi	r23, 0x01	; 1
     28e:	b8 d6       	rcall	.+3440   	; 0x1000 <CDC_Device_SendString>
     290:	10 e0       	ldi	r17, 0x00	; 0
     292:	4a e7       	ldi	r20, 0x7A	; 122
     294:	a4 2e       	mov	r10, r20
     296:	42 e0       	ldi	r20, 0x02	; 2
int main(void)
{
    #define STRING_LENGTH 30
    char string[STRING_LENGTH];
    char *str = (char *)&string;
    char i = 0;
     298:	b4 2e       	mov	r11, r20
	{
        char compare[10];
        
        if(completeWord){
            completeWord = 0;
            fprintf(&USBSerialStream, "fprint: ");
     29a:	58 e8       	ldi	r21, 0x88	; 136
     29c:	85 2e       	mov	r8, r21
     29e:	52 e0       	ldi	r21, 0x02	; 2
     2a0:	95 2e       	mov	r9, r21
            fprintf(&USBSerialStream, intString);
     2a2:	ee e1       	ldi	r30, 0x1E	; 30
     2a4:	de 2e       	mov	r13, r30
     2a6:	37 01       	movw	r6, r14
     2a8:	80 91 5f 01 	lds	r24, 0x015F
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "CDC: ");
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, intString);
            memset(intString, '\0', 30);
     2ac:	88 23       	and	r24, r24
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <main+0xbe>

	for (;;)
	{
        char compare[10];
        
        if(completeWord){
     2b0:	7c c0       	rjmp	.+248    	; 0x3aa <main+0x1b6>
     2b2:	10 92 5f 01 	sts	0x015F, r1
     2b6:	88 e0       	ldi	r24, 0x08	; 8
     2b8:	91 e0       	ldi	r25, 0x01	; 1
            completeWord = 0;
     2ba:	6a e7       	ldi	r22, 0x7A	; 122
     2bc:	72 e0       	ldi	r23, 0x02	; 2
            fprintf(&USBSerialStream, "fprint: ");
     2be:	0e 94 80 09 	call	0x1300	; 0x1300 <fputs>
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <main+0xd0>
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <main+0xd2>
     2c6:	ed b7       	in	r30, 0x3d	; 61
     2c8:	fe b7       	in	r31, 0x3e	; 62
            fprintf(&USBSerialStream, intString);
     2ca:	b2 82       	std	Z+2, r11	; 0x02
     2cc:	a1 82       	std	Z+1, r10	; 0x01
     2ce:	94 82       	std	Z+4, r9	; 0x04
     2d0:	83 82       	std	Z+3, r8	; 0x03
     2d2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <fprintf>
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, "CDC: ");
     2de:	80 e3       	ldi	r24, 0x30	; 48
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	61 e1       	ldi	r22, 0x11	; 17
     2e4:	71 e0       	ldi	r23, 0x01	; 1
     2e6:	8c d6       	rcall	.+3352   	; 0x1000 <CDC_Device_SendString>
     2e8:	80 e3       	ldi	r24, 0x30	; 48
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	68 e8       	ldi	r22, 0x88	; 136
     2ee:	72 e0       	ldi	r23, 0x02	; 2
     2f0:	87 d6       	rcall	.+3342   	; 0x1000 <CDC_Device_SendString>
            CDC_Device_SendString(&VirtualSerial_CDC_Interface, intString);
     2f2:	f4 01       	movw	r30, r8
     2f4:	2d 2d       	mov	r18, r13
     2f6:	11 92       	st	Z+, r1
     2f8:	2a 95       	dec	r18
     2fa:	e9 f7       	brne	.-6      	; 0x2f6 <main+0x102>
     2fc:	10 92 61 01 	sts	0x0161, r1
            memset(intString, '\0', 30);
     300:	10 92 60 01 	sts	0x0160, r1
     304:	52 c0       	rjmp	.+164    	; 0x3aa <main+0x1b6>
     306:	80 e3       	ldi	r24, 0x30	; 48
            intIndex = 0;
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	50 d7       	rcall	.+3744   	; 0x11ac <CDC_Device_ReceiveByte>
     30c:	08 2f       	mov	r16, r24
     30e:	8d 30       	cpi	r24, 0x0D	; 13
     310:	d1 f5       	brne	.+116    	; 0x386 <main+0x192>
        
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        while (CDC_Device_BytesReceived
               (&VirtualSerial_CDC_Interface))
        {
            char byte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	b7 01       	movw	r22, r14
     318:	43 e0       	ldi	r20, 0x03	; 3
     31a:	50 e0       	ldi	r21, 0x00	; 0
            
            if(byte == '\r'){
     31c:	d2 d7       	rcall	.+4004   	; 0x12c2 <strncpy>
     31e:	81 2f       	mov	r24, r17
                strncpy(compare, str, 3);
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	f7 01       	movw	r30, r14
     324:	e8 0f       	add	r30, r24
     326:	f9 1f       	adc	r31, r25
     328:	00 83       	st	Z, r16
     32a:	ec e0       	ldi	r30, 0x0C	; 12
     32c:	f0 e0       	ldi	r31, 0x00	; 0
                
                string[i] = '\r';
     32e:	ec 0f       	add	r30, r28
     330:	fd 1f       	adc	r31, r29
     332:	8e 0f       	add	r24, r30
     334:	9f 1f       	adc	r25, r31
     336:	2a e0       	ldi	r18, 0x0A	; 10
     338:	fc 01       	movw	r30, r24
                string[i+1] = '\n';
     33a:	20 83       	st	Z, r18
     33c:	00 d0       	rcall	.+0      	; 0x33e <main+0x14a>
     33e:	00 d0       	rcall	.+0      	; 0x340 <main+0x14c>
     340:	ed b7       	in	r30, 0x3d	; 61
     342:	fe b7       	in	r31, 0x3e	; 62
     344:	b2 82       	std	Z+2, r11	; 0x02
     346:	a1 82       	std	Z+1, r10	; 0x01
     348:	f4 82       	std	Z+4, r15	; 0x04
     34a:	e3 82       	std	Z+3, r14	; 0x03
                fprintf(&USBSerialStream, string);
     34c:	c9 d7       	rcall	.+3986   	; 0x12e0 <fprintf>
     34e:	f7 01       	movw	r30, r14
     350:	2d 2d       	mov	r18, r13
     352:	11 92       	st	Z+, r1
     354:	2a 95       	dec	r18
     356:	e9 f7       	brne	.-6      	; 0x352 <main+0x15e>
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
                i = 0;
                memset(str, '\0', STRING_LENGTH);
     360:	ce 01       	movw	r24, r28
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	67 e1       	ldi	r22, 0x17	; 23
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	43 e0       	ldi	r20, 0x03	; 3
                if(strncmp(compare, "led", 3) == 0){
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	9c d7       	rcall	.+3896   	; 0x12a6 <strncmp>
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	19 f5       	brne	.+70     	; 0x3b8 <main+0x1c4>
     372:	8b e1       	ldi	r24, 0x1B	; 27
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	6a e7       	ldi	r22, 0x7A	; 122
     378:	72 e0       	ldi	r23, 0x02	; 2
     37a:	c2 d7       	rcall	.+3972   	; 0x1300 <fputs>
     37c:	8b b1       	in	r24, 0x0b	; 11
     37e:	90 e1       	ldi	r25, 0x10	; 16
     380:	89 27       	eor	r24, r25
     382:	8b b9       	out	0x0b, r24	; 11
     384:	19 c0       	rjmp	.+50     	; 0x3b8 <main+0x1c4>
                    //CDC_Device_SendString(&VirtualSerial_CDC_Interface, "Set LED\r\n");
                    fprintf(&USBSerialStream, "Set LED\r\n");
     386:	f3 01       	movw	r30, r6
     388:	e1 0f       	add	r30, r17
     38a:	f1 1d       	adc	r31, r1
     38c:	80 83       	st	Z, r24
     38e:	1f 5f       	subi	r17, 0xFF	; 255
     390:	1a 31       	cpi	r17, 0x1A	; 26
                    PORTD ^= 1<<4;
     392:	58 f0       	brcs	.+22     	; 0x3aa <main+0x1b6>
     394:	85 e2       	ldi	r24, 0x25	; 37
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	6a e7       	ldi	r22, 0x7A	; 122
     39a:	72 e0       	ldi	r23, 0x02	; 2
                }
                //strcpy(str, "echo: ");
                break;
            }
            string[i] = byte;
     39c:	b1 d7       	rcall	.+3938   	; 0x1300 <fputs>
     39e:	f3 01       	movw	r30, r6
     3a0:	2d 2d       	mov	r18, r13
     3a2:	11 92       	st	Z+, r1
            i++;
     3a4:	2a 95       	dec	r18
            if(i >= STRING_LENGTH - 4){
     3a6:	e9 f7       	brne	.-6      	; 0x3a2 <main+0x1ae>
     3a8:	10 e0       	ldi	r17, 0x00	; 0
                fprintf(&USBSerialStream, "Overflow\r\n");
     3aa:	80 e3       	ldi	r24, 0x30	; 48
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	c8 d6       	rcall	.+3472   	; 0x1140 <CDC_Device_BytesReceived>
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <main+0x1c2>
     3b4:	a8 cf       	rjmp	.-176    	; 0x306 <main+0x112>
                
                i = 0;
                memset(str, '\0', STRING_LENGTH);
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <main+0x1c6>
     3b8:	10 e0       	ldi	r17, 0x00	; 0
     3ba:	80 e3       	ldi	r24, 0x30	; 48
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	a9 d6       	rcall	.+3410   	; 0x1112 <CDC_Device_USBTask>
            string[i] = byte;
            i++;
            if(i >= STRING_LENGTH - 4){
                fprintf(&USBSerialStream, "Overflow\r\n");
                
                i = 0;
     3c0:	34 d5       	rcall	.+2664   	; 0xe2a <USB_USBTask>
            intIndex = 0;
        }
        
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        while (CDC_Device_BytesReceived
               (&VirtualSerial_CDC_Interface))
     3c2:	72 cf       	rjmp	.-284    	; 0x2a8 <main+0xb4>

000003c4 <EVENT_USB_Device_Connect>:
     3c4:	80 ea       	ldi	r24, 0xA0	; 160
     3c6:	de ce       	rjmp	.-580    	; 0x184 <LEDs_SetAllLEDs>

000003c8 <EVENT_USB_Device_Disconnect>:
     3c8:	80 e1       	ldi	r24, 0x10	; 16
            memset(intString, '\0', 30);
            intIndex = 0;
        }
        
		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        while (CDC_Device_BytesReceived
     3ca:	dc ce       	rjmp	.-584    	; 0x184 <LEDs_SetAllLEDs>

000003cc <EVENT_USB_Device_ConfigurationChanged>:
     3cc:	80 e3       	ldi	r24, 0x30	; 48
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	f3 d5       	rcall	.+3046   	; 0xfb8 <CDC_Device_ConfigureEndpoints>
                strncpy(compare, str, 3);
                
                string[i] = '\r';
                string[i+1] = '\n';
                fprintf(&USBSerialStream, string);
                i = 0;
     3d2:	88 23       	and	r24, r24
        /*
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
        */

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     3d4:	11 f0       	breq	.+4      	; 0x3da <EVENT_USB_Device_ConfigurationChanged+0xe>
     3d6:	80 e6       	ldi	r24, 0x60	; 96
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <EVENT_USB_Device_ConfigurationChanged+0x10>
     3da:	80 e9       	ldi	r24, 0x90	; 144
		USB_USBTask();
     3dc:	d3 ce       	rjmp	.-602    	; 0x184 <LEDs_SetAllLEDs>

000003de <EVENT_USB_Device_ControlRequest>:
     3de:	80 e3       	ldi	r24, 0x30	; 48
	}
     3e0:	91 e0       	ldi	r25, 0x01	; 1
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}
     3e2:	3e c5       	rjmp	.+2684   	; 0xe60 <CDC_Device_ProcessControlRequest>

000003e4 <__vector_17>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     3e4:	1f 92       	push	r1
}
     3e6:	0f 92       	push	r0
    }
}
 
*/
ISR(TIMER1_COMPA_vect)
{
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	9f 93       	push	r25
    
    timerVal++;
     3f2:	80 91 5e 01 	lds	r24, 0x015E
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	80 93 5e 01 	sts	0x015E, r24
    TCNT1 = 0;
     3fc:	10 92 85 00 	sts	0x0085, r1
     400:	10 92 84 00 	sts	0x0084, r1
    if(timerVal >= 250){
     404:	8a 3f       	cpi	r24, 0xFA	; 250
     406:	50 f0       	brcs	.+20     	; 0x41c <__vector_17+0x38>
        timerVal = 0;
     408:	10 92 5e 01 	sts	0x015E, r1
        TCNT1 = 0;
     40c:	10 92 85 00 	sts	0x0085, r1
     410:	10 92 84 00 	sts	0x0084, r1
        PORTD ^= (1<<4);
     414:	8b b1       	in	r24, 0x0b	; 11
     416:	90 e1       	ldi	r25, 0x10	; 16
     418:	89 27       	eor	r24, r25
     41a:	8b b9       	out	0x0b, r24	; 11
        //fprintf(&USBSerialStream, 'tick');
    }
     
}
     41c:	9f 91       	pop	r25
     41e:	8f 91       	pop	r24
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     42a:	cf 93       	push	r28
     42c:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     42e:	a1 8d       	ldd	r26, Z+25	; 0x19
     430:	a1 50       	subi	r26, 0x01	; 1
     432:	a2 30       	cpi	r26, 0x02	; 2
     434:	28 f4       	brcc	.+10     	; 0x440 <EVENT_CDC_Device_LineEncodingChanged+0x16>
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	a5 5b       	subi	r26, 0xB5	; 181
     43a:	be 4f       	sbci	r27, 0xFE	; 254
     43c:	cc 91       	ld	r28, X
     43e:	01 c0       	rjmp	.+2      	; 0x442 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     440:	c0 e0       	ldi	r28, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     442:	80 8d       	ldd	r24, Z+24	; 0x18
     444:	82 30       	cpi	r24, 0x02	; 2
     446:	09 f4       	brne	.+2      	; 0x44a <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
     448:	c8 60       	ori	r28, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     44a:	82 8d       	ldd	r24, Z+26	; 0x1a
     44c:	87 30       	cpi	r24, 0x07	; 7
     44e:	31 f0       	breq	.+12     	; 0x45c <EVENT_CDC_Device_LineEncodingChanged+0x32>
     450:	88 30       	cpi	r24, 0x08	; 8
     452:	31 f0       	breq	.+12     	; 0x460 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     454:	86 30       	cpi	r24, 0x06	; 6
     456:	29 f4       	brne	.+10     	; 0x462 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     458:	c2 60       	ori	r28, 0x02	; 2
			break;
     45a:	03 c0       	rjmp	.+6      	; 0x462 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     45c:	c4 60       	ori	r28, 0x04	; 4
			break;
     45e:	01 c0       	rjmp	.+2      	; 0x462 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     460:	c6 60       	ori	r28, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     462:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     466:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     46a:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     46e:	24 89       	ldd	r18, Z+20	; 0x14
     470:	35 89       	ldd	r19, Z+21	; 0x15
     472:	46 89       	ldd	r20, Z+22	; 0x16
     474:	57 89       	ldd	r21, Z+23	; 0x17
     476:	da 01       	movw	r26, r20
     478:	c9 01       	movw	r24, r18
     47a:	b6 95       	lsr	r27
     47c:	a7 95       	ror	r26
     47e:	97 95       	ror	r25
     480:	87 95       	ror	r24
     482:	80 58       	subi	r24, 0x80	; 128
     484:	9b 47       	sbci	r25, 0x7B	; 123
     486:	a1 4e       	sbci	r26, 0xE1	; 225
     488:	bf 4f       	sbci	r27, 0xFF	; 255
     48a:	bc 01       	movw	r22, r24
     48c:	cd 01       	movw	r24, r26
     48e:	e9 d6       	rcall	.+3538   	; 0x1262 <__udivmodsi4>
     490:	21 50       	subi	r18, 0x01	; 1
     492:	30 40       	sbci	r19, 0x00	; 0
     494:	30 93 cd 00 	sts	0x00CD, r19
     498:	20 93 cc 00 	sts	0x00CC, r18
     49c:	c0 93 ca 00 	sts	0x00CA, r28

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     4a0:	82 e0       	ldi	r24, 0x02	; 2
	UCSR1A = (1 << U2X1);
     4a2:	80 93 c8 00 	sts	0x00C8, r24
     4a6:	88 e9       	ldi	r24, 0x98	; 152
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     4a8:	80 93 c9 00 	sts	0x00C9, r24
     4ac:	cf 91       	pop	r28
}
     4ae:	08 95       	ret

000004b0 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4b0:	92 30       	cpi	r25, 0x02	; 2
     4b2:	29 f0       	breq	.+10     	; 0x4be <CALLBACK_USB_GetDescriptor+0xe>
     4b4:	93 30       	cpi	r25, 0x03	; 3
     4b6:	41 f0       	breq	.+16     	; 0x4c8 <CALLBACK_USB_GetDescriptor+0x18>
     4b8:	91 30       	cpi	r25, 0x01	; 1
     4ba:	e9 f4       	brne	.+58     	; 0x4f6 <CALLBACK_USB_GetDescriptor+0x46>
     4bc:	17 c0       	rjmp	.+46     	; 0x4ec <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     4be:	8e e3       	ldi	r24, 0x3E	; 62
     4c0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     4c2:	ea ef       	ldi	r30, 0xFA	; 250
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     4c6:	1b c0       	rjmp	.+54     	; 0x4fe <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	41 f0       	breq	.+16     	; 0x4dc <CALLBACK_USB_GetDescriptor+0x2c>
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	18 f0       	brcs	.+6      	; 0x4d6 <CALLBACK_USB_GetDescriptor+0x26>
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	89 f4       	brne	.+34     	; 0x4f6 <CALLBACK_USB_GetDescriptor+0x46>
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4d6:	e6 ef       	ldi	r30, 0xF6	; 246
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4dc:	ec ed       	ldi	r30, 0xDC	; 220
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4e2:	ec ea       	ldi	r30, 0xAC	; 172
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	84 91       	lpm	r24, Z
     4e8:	90 e0       	ldi	r25, 0x00	; 0
					break;
     4ea:	09 c0       	rjmp	.+18     	; 0x4fe <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4ec:	82 e1       	ldi	r24, 0x12	; 18
     4ee:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     4f0:	e8 e3       	ldi	r30, 0x38	; 56
     4f2:	f1 e0       	ldi	r31, 0x01	; 1
     4f4:	04 c0       	rjmp	.+8      	; 0x4fe <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     4fa:	e0 e0       	ldi	r30, 0x00	; 0
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     4fe:	da 01       	movw	r26, r20
     500:	11 96       	adiw	r26, 0x01	; 1
     502:	fc 93       	st	X, r31
     504:	ee 93       	st	-X, r30
	return Size;
}
     506:	08 95       	ret

00000508 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     508:	af 92       	push	r10
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	ec 01       	movw	r28, r24
     51c:	7b 01       	movw	r14, r22
     51e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     520:	92 d1       	rcall	.+804    	; 0x846 <Endpoint_WaitUntilReady>
     522:	18 2f       	mov	r17, r24
     524:	88 23       	and	r24, r24
     526:	a1 f5       	brne	.+104    	; 0x590 <Endpoint_Write_Stream_LE+0x88>
     528:	c1 14       	cp	r12, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
     52a:	d1 04       	cpc	r13, r1
     52c:	39 f0       	breq	.+14     	; 0x53c <Endpoint_Write_Stream_LE+0x34>
     52e:	f6 01       	movw	r30, r12
	{
		Length -= *BytesProcessed;
     530:	20 81       	ld	r18, Z
     532:	31 81       	ldd	r19, Z+1	; 0x01
     534:	e2 1a       	sub	r14, r18
     536:	f3 0a       	sbc	r15, r19
     538:	c2 0f       	add	r28, r18
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     53a:	d3 1f       	adc	r29, r19
     53c:	aa 24       	eor	r10, r10

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     53e:	bb 24       	eor	r11, r11
     540:	22 c0       	rjmp	.+68     	; 0x586 <Endpoint_Write_Stream_LE+0x7e>
     542:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     546:	85 fd       	sbrc	r24, 5
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     548:	15 c0       	rjmp	.+42     	; 0x574 <Endpoint_Write_Stream_LE+0x6c>
     54a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     54e:	8e 77       	andi	r24, 0x7E	; 126
     550:	80 93 e8 00 	sts	0x00E8, r24
     554:	c1 14       	cp	r12, r1

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     556:	d1 04       	cpc	r13, r1
     558:	49 f0       	breq	.+18     	; 0x56c <Endpoint_Write_Stream_LE+0x64>
     55a:	f6 01       	movw	r30, r12
			{
				*BytesProcessed += BytesInTransfer;
     55c:	80 81       	ld	r24, Z
     55e:	91 81       	ldd	r25, Z+1	; 0x01
     560:	8a 0d       	add	r24, r10
     562:	9b 1d       	adc	r25, r11
     564:	91 83       	std	Z+1, r25	; 0x01
     566:	80 83       	st	Z, r24
     568:	15 e0       	ldi	r17, 0x05	; 5
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     56a:	12 c0       	rjmp	.+36     	; 0x590 <Endpoint_Write_Stream_LE+0x88>
     56c:	6c d1       	rcall	.+728    	; 0x846 <Endpoint_WaitUntilReady>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     56e:	88 23       	and	r24, r24
     570:	51 f0       	breq	.+20     	; 0x586 <Endpoint_Write_Stream_LE+0x7e>
     572:	0d c0       	rjmp	.+26     	; 0x58e <Endpoint_Write_Stream_LE+0x86>
     574:	89 91       	ld	r24, Y+
     576:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     57a:	08 94       	sec
     57c:	e1 08       	sbc	r14, r1
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     57e:	f1 08       	sbc	r15, r1
     580:	08 94       	sec
     582:	a1 1c       	adc	r10, r1
			BytesInTransfer++;
     584:	b1 1c       	adc	r11, r1
     586:	e1 14       	cp	r14, r1
     588:	f1 04       	cpc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     58a:	d9 f6       	brne	.-74     	; 0x542 <Endpoint_Write_Stream_LE+0x3a>
     58c:	01 c0       	rjmp	.+2      	; 0x590 <Endpoint_Write_Stream_LE+0x88>
     58e:	18 2f       	mov	r17, r24
     590:	81 2f       	mov	r24, r17
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     592:	df 91       	pop	r29
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	df 90       	pop	r13
     59e:	cf 90       	pop	r12
     5a0:	bf 90       	pop	r11
     5a2:	af 90       	pop	r10
     5a4:	08 95       	ret

000005a6 <Endpoint_Write_Control_Stream_LE>:
     5a6:	40 91 b0 02 	lds	r20, 0x02B0
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     5aa:	50 91 b1 02 	lds	r21, 0x02B1
     5ae:	46 17       	cp	r20, r22
     5b0:	57 07       	cpc	r21, r23
     5b2:	20 f4       	brcc	.+8      	; 0x5bc <Endpoint_Write_Control_Stream_LE+0x16>
     5b4:	ba 01       	movw	r22, r20
     5b6:	fc 01       	movw	r30, r24
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	3b c0       	rjmp	.+118    	; 0x632 <Endpoint_Write_Control_Stream_LE+0x8c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     5bc:	61 15       	cp	r22, r1
     5be:	71 05       	cpc	r23, r1
     5c0:	d1 f7       	brne	.-12     	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5c2:	40 91 e8 00 	lds	r20, 0x00E8
     5c6:	4e 77       	andi	r20, 0x7E	; 126
     5c8:	40 93 e8 00 	sts	0x00E8, r20
     5cc:	f4 cf       	rjmp	.-24     	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5ce:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5d0:	88 23       	and	r24, r24
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <Endpoint_Write_Control_Stream_LE+0x30>
     5d4:	43 c0       	rjmp	.+134    	; 0x65c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5d6:	85 30       	cpi	r24, 0x05	; 5
     5d8:	e9 f1       	breq	.+122    	; 0x654 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5de:	83 fd       	sbrc	r24, 3
     5e0:	3b c0       	rjmp	.+118    	; 0x658 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5e2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     5e6:	82 fd       	sbrc	r24, 2
     5e8:	2f c0       	rjmp	.+94     	; 0x648 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5ea:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     5ee:	80 ff       	sbrs	r24, 0
     5f0:	20 c0       	rjmp	.+64     	; 0x632 <Endpoint_Write_Control_Stream_LE+0x8c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     5f2:	90 91 f3 00 	lds	r25, 0x00F3
     5f6:	80 91 f2 00 	lds	r24, 0x00F2
     5fa:	39 2f       	mov	r19, r25
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	82 2b       	or	r24, r18
     602:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     604:	06 c0       	rjmp	.+12     	; 0x612 <Endpoint_Write_Control_Stream_LE+0x6c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     606:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     608:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     60c:	61 50       	subi	r22, 0x01	; 1
     60e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     610:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     612:	61 15       	cp	r22, r1
     614:	71 05       	cpc	r23, r1
     616:	19 f0       	breq	.+6      	; 0x61e <Endpoint_Write_Control_Stream_LE+0x78>
     618:	88 30       	cpi	r24, 0x08	; 8
     61a:	91 05       	cpc	r25, r1
     61c:	a0 f3       	brcs	.-24     	; 0x606 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     61e:	41 e0       	ldi	r20, 0x01	; 1
     620:	88 30       	cpi	r24, 0x08	; 8
     622:	91 05       	cpc	r25, r1
     624:	09 f0       	breq	.+2      	; 0x628 <Endpoint_Write_Control_Stream_LE+0x82>
     626:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     628:	80 91 e8 00 	lds	r24, 0x00E8
     62c:	8e 77       	andi	r24, 0x7E	; 126
     62e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     632:	61 15       	cp	r22, r1
     634:	71 05       	cpc	r23, r1
     636:	59 f6       	brne	.-106    	; 0x5ce <Endpoint_Write_Control_Stream_LE+0x28>
     638:	44 23       	and	r20, r20
     63a:	49 f6       	brne	.-110    	; 0x5ce <Endpoint_Write_Control_Stream_LE+0x28>
     63c:	05 c0       	rjmp	.+10     	; 0x648 <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     63e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     640:	88 23       	and	r24, r24
     642:	61 f0       	breq	.+24     	; 0x65c <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     644:	85 30       	cpi	r24, 0x05	; 5
     646:	61 f0       	breq	.+24     	; 0x660 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     648:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     64c:	82 ff       	sbrs	r24, 2
     64e:	f7 cf       	rjmp	.-18     	; 0x63e <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     660:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     662:	08 95       	ret

00000664 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     664:	40 91 b0 02 	lds	r20, 0x02B0
     668:	50 91 b1 02 	lds	r21, 0x02B1
     66c:	46 17       	cp	r20, r22
     66e:	57 07       	cpc	r21, r23
     670:	20 f4       	brcc	.+8      	; 0x67a <Endpoint_Write_Control_PStream_LE+0x16>
     672:	ba 01       	movw	r22, r20
     674:	fc 01       	movw	r30, r24
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	3d c0       	rjmp	.+122    	; 0x6f4 <Endpoint_Write_Control_PStream_LE+0x90>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     67a:	61 15       	cp	r22, r1
     67c:	71 05       	cpc	r23, r1
     67e:	d1 f7       	brne	.-12     	; 0x674 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     680:	40 91 e8 00 	lds	r20, 0x00E8
     684:	4e 77       	andi	r20, 0x7E	; 126
     686:	40 93 e8 00 	sts	0x00E8, r20
     68a:	f4 cf       	rjmp	.-24     	; 0x674 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     68c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     68e:	88 23       	and	r24, r24
     690:	09 f4       	brne	.+2      	; 0x694 <Endpoint_Write_Control_PStream_LE+0x30>
     692:	45 c0       	rjmp	.+138    	; 0x71e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     694:	85 30       	cpi	r24, 0x05	; 5
     696:	09 f4       	brne	.+2      	; 0x69a <Endpoint_Write_Control_PStream_LE+0x36>
     698:	3e c0       	rjmp	.+124    	; 0x716 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     69a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     69e:	83 fd       	sbrc	r24, 3
     6a0:	3c c0       	rjmp	.+120    	; 0x71a <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6a2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     6a6:	82 fd       	sbrc	r24, 2
     6a8:	30 c0       	rjmp	.+96     	; 0x70a <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6aa:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     6ae:	80 ff       	sbrs	r24, 0
     6b0:	21 c0       	rjmp	.+66     	; 0x6f4 <Endpoint_Write_Control_PStream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     6b2:	90 91 f3 00 	lds	r25, 0x00F3
     6b6:	80 91 f2 00 	lds	r24, 0x00F2
     6ba:	39 2f       	mov	r19, r25
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	82 2b       	or	r24, r18
     6c2:	93 2b       	or	r25, r19
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6c4:	07 c0       	rjmp	.+14     	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6c6:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6c8:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     6cc:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     6ce:	61 50       	subi	r22, 0x01	; 1
     6d0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     6d2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6d4:	61 15       	cp	r22, r1
     6d6:	71 05       	cpc	r23, r1
     6d8:	19 f0       	breq	.+6      	; 0x6e0 <Endpoint_Write_Control_PStream_LE+0x7c>
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	91 05       	cpc	r25, r1
     6de:	98 f3       	brcs	.-26     	; 0x6c6 <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     6e0:	41 e0       	ldi	r20, 0x01	; 1
     6e2:	88 30       	cpi	r24, 0x08	; 8
     6e4:	91 05       	cpc	r25, r1
     6e6:	09 f0       	breq	.+2      	; 0x6ea <Endpoint_Write_Control_PStream_LE+0x86>
     6e8:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6ea:	80 91 e8 00 	lds	r24, 0x00E8
     6ee:	8e 77       	andi	r24, 0x7E	; 126
     6f0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     6f4:	61 15       	cp	r22, r1
     6f6:	71 05       	cpc	r23, r1
     6f8:	49 f6       	brne	.-110    	; 0x68c <Endpoint_Write_Control_PStream_LE+0x28>
     6fa:	44 23       	and	r20, r20
     6fc:	39 f6       	brne	.-114    	; 0x68c <Endpoint_Write_Control_PStream_LE+0x28>
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     700:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     702:	88 23       	and	r24, r24
     704:	61 f0       	breq	.+24     	; 0x71e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     706:	85 30       	cpi	r24, 0x05	; 5
     708:	61 f0       	breq	.+24     	; 0x722 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     70a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     70e:	82 ff       	sbrs	r24, 2
     710:	f7 cf       	rjmp	.-18     	; 0x700 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     722:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     724:	08 95       	ret

00000726 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     726:	98 2f       	mov	r25, r24
     728:	2a c0       	rjmp	.+84     	; 0x77e <Endpoint_ConfigureEndpoint_Prv+0x58>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     72a:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     72e:	98 17       	cp	r25, r24
     730:	39 f0       	breq	.+14     	; 0x740 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     732:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     736:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     73a:	50 91 f0 00 	lds	r21, 0x00F0
     73e:	03 c0       	rjmp	.+6      	; 0x746 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     740:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     742:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     744:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     746:	21 ff       	sbrs	r18, 1
     748:	19 c0       	rjmp	.+50     	; 0x77c <Endpoint_ConfigureEndpoint_Prv+0x56>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     74a:	30 91 eb 00 	lds	r19, 0x00EB
     74e:	3e 7f       	andi	r19, 0xFE	; 254
     750:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     754:	30 91 ed 00 	lds	r19, 0x00ED
     758:	3d 7f       	andi	r19, 0xFD	; 253
     75a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     75e:	30 91 eb 00 	lds	r19, 0x00EB
     762:	31 60       	ori	r19, 0x01	; 1
     764:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     768:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     76c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     770:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     774:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     778:	27 ff       	sbrs	r18, 7
     77a:	08 c0       	rjmp	.+16     	; 0x78c <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     77c:	9f 5f       	subi	r25, 0xFF	; 255
     77e:	97 30       	cpi	r25, 0x07	; 7
     780:	a0 f2       	brcs	.-88     	; 0x72a <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     782:	8f 70       	andi	r24, 0x0F	; 15
     784:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     78c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     78e:	08 95       	ret

00000790 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     79a:	ec 01       	movw	r28, r24
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	2a c0       	rjmp	.+84     	; 0x7f4 <Endpoint_ConfigureEndpointTable+0x64>
	{
		if (!(Table[i].Address))
     7a0:	98 81       	ld	r25, Y
     7a2:	99 23       	and	r25, r25
     7a4:	29 f1       	breq	.+74     	; 0x7f0 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     7a6:	6b 81       	ldd	r22, Y+3	; 0x03
     7a8:	e9 81       	ldd	r30, Y+1	; 0x01
     7aa:	fa 81       	ldd	r31, Y+2	; 0x02
     7ac:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     7ae:	89 2f       	mov	r24, r25
     7b0:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     7b2:	87 30       	cpi	r24, 0x07	; 7
     7b4:	18 f5       	brcc	.+70     	; 0x7fc <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     7b6:	62 95       	swap	r22
     7b8:	66 0f       	add	r22, r22
     7ba:	66 0f       	add	r22, r22
     7bc:	60 7c       	andi	r22, 0xC0	; 192
     7be:	99 1f       	adc	r25, r25
     7c0:	99 27       	eor	r25, r25
     7c2:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7c4:	69 2b       	or	r22, r25
     7c6:	22 30       	cpi	r18, 0x02	; 2
     7c8:	10 f0       	brcs	.+4      	; 0x7ce <Endpoint_ConfigureEndpointTable+0x3e>
     7ca:	96 e0       	ldi	r25, 0x06	; 6
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <Endpoint_ConfigureEndpointTable+0x40>
     7ce:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     7d0:	28 e0       	ldi	r18, 0x08	; 8
     7d2:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	03 c0       	rjmp	.+6      	; 0x7de <Endpoint_ConfigureEndpointTable+0x4e>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     7d8:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     7da:	22 0f       	add	r18, r18
     7dc:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     7de:	2e 17       	cp	r18, r30
     7e0:	3f 07       	cpc	r19, r31
     7e2:	d0 f3       	brcs	.-12     	; 0x7d8 <Endpoint_ConfigureEndpointTable+0x48>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     7e4:	42 95       	swap	r20
     7e6:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7e8:	49 2b       	or	r20, r25
     7ea:	9d df       	rcall	.-198    	; 0x726 <Endpoint_ConfigureEndpoint_Prv>
     7ec:	88 23       	and	r24, r24
     7ee:	31 f0       	breq	.+12     	; 0x7fc <Endpoint_ConfigureEndpointTable+0x6c>
     7f0:	0f 5f       	subi	r16, 0xFF	; 255
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     7f2:	25 96       	adiw	r28, 0x05	; 5
     7f4:	01 17       	cp	r16, r17
     7f6:	a1 f6       	brne	.-88     	; 0x7a0 <Endpoint_ConfigureEndpointTable+0x10>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     7fa:	01 c0       	rjmp	.+2      	; 0x7fe <Endpoint_ConfigureEndpointTable+0x6e>
     7fc:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     7fe:	df 91       	pop	r29
	}
	
	return true;
}
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	08 95       	ret

00000808 <Endpoint_ClearStatusStage>:
     808:	80 91 aa 02 	lds	r24, 0x02AA
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     80c:	87 ff       	sbrs	r24, 7
     80e:	11 c0       	rjmp	.+34     	; 0x832 <Endpoint_ClearStatusStage+0x2a>
     810:	03 c0       	rjmp	.+6      	; 0x818 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     812:	8e b3       	in	r24, 0x1e	; 30
     814:	88 23       	and	r24, r24
     816:	b1 f0       	breq	.+44     	; 0x844 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     818:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     81c:	82 ff       	sbrs	r24, 2
     81e:	f9 cf       	rjmp	.-14     	; 0x812 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     820:	80 91 e8 00 	lds	r24, 0x00E8
     824:	8b 77       	andi	r24, 0x7B	; 123
     826:	80 93 e8 00 	sts	0x00E8, r24
     82a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     82c:	8e b3       	in	r24, 0x1e	; 30
     82e:	88 23       	and	r24, r24
     830:	49 f0       	breq	.+18     	; 0x844 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     832:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     836:	80 ff       	sbrs	r24, 0
     838:	f9 cf       	rjmp	.-14     	; 0x82c <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     83a:	80 91 e8 00 	lds	r24, 0x00E8
     83e:	8e 77       	andi	r24, 0x7E	; 126
     840:	80 93 e8 00 	sts	0x00E8, r24
     844:	08 95       	ret

00000846 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     846:	80 91 e4 00 	lds	r24, 0x00E4
     84a:	90 91 e5 00 	lds	r25, 0x00E5
     84e:	45 e6       	ldi	r20, 0x65	; 101
     850:	01 c0       	rjmp	.+2      	; 0x854 <Endpoint_WaitUntilReady+0xe>
     852:	c9 01       	movw	r24, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     854:	20 91 ec 00 	lds	r18, 0x00EC
     858:	20 ff       	sbrs	r18, 0
     85a:	22 c0       	rjmp	.+68     	; 0x8a0 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     85c:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     860:	20 fd       	sbrc	r18, 0
     862:	14 c0       	rjmp	.+40     	; 0x88c <Endpoint_WaitUntilReady+0x46>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     864:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     866:	22 23       	and	r18, r18
     868:	99 f0       	breq	.+38     	; 0x890 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     86a:	25 30       	cpi	r18, 0x05	; 5
     86c:	99 f0       	breq	.+38     	; 0x894 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     86e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     872:	25 fd       	sbrc	r18, 5
     874:	11 c0       	rjmp	.+34     	; 0x898 <Endpoint_WaitUntilReady+0x52>
     876:	20 91 e4 00 	lds	r18, 0x00E4
     87a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     87e:	28 17       	cp	r18, r24
     880:	39 07       	cpc	r19, r25
     882:	41 f3       	breq	.-48     	; 0x854 <Endpoint_WaitUntilReady+0xe>
     884:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     886:	29 f7       	brne	.-54     	; 0x852 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     888:	84 e0       	ldi	r24, 0x04	; 4
     88a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     894:	83 e0       	ldi	r24, 0x03	; 3
     896:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     89c:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     89e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8a0:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     8a4:	22 ff       	sbrs	r18, 2
     8a6:	de cf       	rjmp	.-68     	; 0x864 <Endpoint_WaitUntilReady+0x1e>
     8a8:	f9 cf       	rjmp	.-14     	; 0x89c <Endpoint_WaitUntilReady+0x56>

000008aa <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     8b2:	4a d0       	rcall	.+148    	; 0x948 <USB_INT_DisableAllInterrupts>
     8b4:	51 d0       	rcall	.+162    	; 0x958 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     8b6:	c8 ed       	ldi	r28, 0xD8	; 216
     8b8:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     8ba:	88 81       	ld	r24, Y
     8bc:	8f 77       	andi	r24, 0x7F	; 127
     8be:	88 83       	st	Y, r24
     8c0:	88 81       	ld	r24, Y
     8c2:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     8c4:	88 83       	st	Y, r24
     8c6:	88 81       	ld	r24, Y
     8c8:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8ca:	88 83       	st	Y, r24
     8cc:	19 bc       	out	0x29, r1	; 41
     8ce:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8d0:	10 92 a6 02 	sts	0x02A6, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     8d4:	10 92 a8 02 	sts	0x02A8, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     8d8:	10 92 a7 02 	sts	0x02A7, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     8dc:	00 ee       	ldi	r16, 0xE0	; 224
     8de:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     8e0:	f8 01       	movw	r30, r16
     8e2:	80 81       	ld	r24, Z
     8e4:	8b 7f       	andi	r24, 0xFB	; 251
     8e6:	80 83       	st	Z, r24
     8e8:	88 81       	ld	r24, Y
     8ea:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     8ec:	88 83       	st	Y, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8f2:	42 e0       	ldi	r20, 0x02	; 2
     8f4:	18 df       	rcall	.-464    	; 0x726 <Endpoint_ConfigureEndpoint_Prv>
     8f6:	e1 ee       	ldi	r30, 0xE1	; 225
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8fc:	8e 7f       	andi	r24, 0xFE	; 254
     8fe:	80 83       	st	Z, r24
     900:	e2 ee       	ldi	r30, 0xE2	; 226
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     906:	81 60       	ori	r24, 0x01	; 1
     908:	80 83       	st	Z, r24
     90a:	80 81       	ld	r24, Z
     90c:	88 60       	ori	r24, 0x08	; 8
     90e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     910:	f8 01       	movw	r30, r16
     912:	80 81       	ld	r24, Z
     914:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     916:	80 83       	st	Z, r24
     918:	88 81       	ld	r24, Y
     91a:	80 61       	ori	r24, 0x10	; 16
     91c:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <USB_Init>:
     928:	e8 ed       	ldi	r30, 0xD8	; 216
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     92e:	8f 7e       	andi	r24, 0xEF	; 239
     930:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     932:	e7 ed       	ldi	r30, 0xD7	; 215
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	81 60       	ori	r24, 0x01	; 1
     93a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     93c:	84 e0       	ldi	r24, 0x04	; 4
     93e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	80 93 a9 02 	sts	0x02A9, r24

	USB_ResetInterface();
     946:	b1 cf       	rjmp	.-158    	; 0x8aa <USB_ResetInterface>

00000948 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     948:	e8 ed       	ldi	r30, 0xD8	; 216
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	8e 7f       	andi	r24, 0xFE	; 254
     950:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     952:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     956:	08 95       	ret

00000958 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     958:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     95c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     960:	08 95       	ret

00000962 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     962:	1f 92       	push	r1
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	2f 93       	push	r18
     96e:	3f 93       	push	r19
     970:	4f 93       	push	r20
     972:	5f 93       	push	r21
     974:	6f 93       	push	r22
     976:	7f 93       	push	r23
     978:	8f 93       	push	r24
     97a:	9f 93       	push	r25
     97c:	af 93       	push	r26
     97e:	bf 93       	push	r27
     980:	ef 93       	push	r30
     982:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     984:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     988:	82 ff       	sbrs	r24, 2
     98a:	0a c0       	rjmp	.+20     	; 0x9a0 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     98c:	80 91 e2 00 	lds	r24, 0x00E2
     990:	82 ff       	sbrs	r24, 2
     992:	06 c0       	rjmp	.+12     	; 0x9a0 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     994:	80 91 e1 00 	lds	r24, 0x00E1
     998:	8b 7f       	andi	r24, 0xFB	; 251
     99a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     99e:	44 d2       	rcall	.+1160   	; 0xe28 <USB_Event_Stub>
     9a0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     9a4:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     9a6:	1b c0       	rjmp	.+54     	; 0x9de <__vector_10+0x7c>
     9a8:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     9ac:	80 ff       	sbrs	r24, 0
     9ae:	17 c0       	rjmp	.+46     	; 0x9de <__vector_10+0x7c>
     9b0:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     9b4:	8e 7f       	andi	r24, 0xFE	; 254
     9b6:	80 93 da 00 	sts	0x00DA, r24
     9ba:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     9be:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     9c0:	0b c0       	rjmp	.+22     	; 0x9d8 <__vector_10+0x76>
     9c2:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9c4:	89 bd       	out	0x29, r24	; 41
     9c6:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9c8:	89 bd       	out	0x29, r24	; 41
     9ca:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     9cc:	00 fe       	sbrs	r0, 0
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <__vector_10+0x68>
     9d0:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     9d2:	8e bb       	out	0x1e, r24	; 30
     9d4:	f7 dc       	rcall	.-1554   	; 0x3c4 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <__vector_10+0x7c>
     9d8:	19 bc       	out	0x29, r1	; 41
     9da:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     9dc:	f5 dc       	rcall	.-1558   	; 0x3c8 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     9de:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     9e2:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     9e4:	17 c0       	rjmp	.+46     	; 0xa14 <__vector_10+0xb2>
     9e6:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     9ea:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     9ec:	13 c0       	rjmp	.+38     	; 0xa14 <__vector_10+0xb2>
     9ee:	80 91 e2 00 	lds	r24, 0x00E2
     9f2:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9f4:	80 93 e2 00 	sts	0x00E2, r24
     9f8:	80 91 e2 00 	lds	r24, 0x00E2
     9fc:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9fe:	80 93 e2 00 	sts	0x00E2, r24
     a02:	80 91 d8 00 	lds	r24, 0x00D8
     a06:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     a08:	80 93 d8 00 	sts	0x00D8, r24
     a0c:	19 bc       	out	0x29, r1	; 41
     a0e:	85 e0       	ldi	r24, 0x05	; 5
     a10:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a12:	0a d2       	rcall	.+1044   	; 0xe28 <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     a14:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     a18:	84 ff       	sbrs	r24, 4
     a1a:	2c c0       	rjmp	.+88     	; 0xa74 <__vector_10+0x112>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     a1c:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     a20:	84 ff       	sbrs	r24, 4
     a22:	28 c0       	rjmp	.+80     	; 0xa74 <__vector_10+0x112>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     a24:	80 e1       	ldi	r24, 0x10	; 16
     a26:	89 bd       	out	0x29, r24	; 41
     a28:	82 e1       	ldi	r24, 0x12	; 18
     a2a:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a2c:	09 b4       	in	r0, 0x29	; 41
     a2e:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a30:	fd cf       	rjmp	.-6      	; 0xa2c <__vector_10+0xca>
     a32:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a36:	8f 7d       	andi	r24, 0xDF	; 223
     a38:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a3c:	80 91 e1 00 	lds	r24, 0x00E1
     a40:	8f 7e       	andi	r24, 0xEF	; 239
     a42:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a46:	80 91 e2 00 	lds	r24, 0x00E2
     a4a:	8f 7e       	andi	r24, 0xEF	; 239
     a4c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     a50:	80 91 e2 00 	lds	r24, 0x00E2
     a54:	81 60       	ori	r24, 0x01	; 1
     a56:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a5a:	80 91 a6 02 	lds	r24, 0x02A6
     a5e:	88 23       	and	r24, r24
     a60:	21 f4       	brne	.+8      	; 0xa6a <__vector_10+0x108>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     a62:	80 91 e3 00 	lds	r24, 0x00E3
     a66:	87 ff       	sbrs	r24, 7
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     a6a:	84 e0       	ldi	r24, 0x04	; 4
     a6c:	01 c0       	rjmp	.+2      	; 0xa70 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	8e bb       	out	0x1e, r24	; 30
     a72:	da d1       	rcall	.+948    	; 0xe28 <USB_Event_Stub>
     a74:	80 91 e1 00 	lds	r24, 0x00E1
     a78:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     a7a:	26 c0       	rjmp	.+76     	; 0xac8 <__vector_10+0x166>
     a7c:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     a80:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     a82:	22 c0       	rjmp	.+68     	; 0xac8 <__vector_10+0x166>
     a84:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     a88:	87 7f       	andi	r24, 0xF7	; 247
     a8a:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	8e bb       	out	0x1e, r24	; 30
     a92:	10 92 a6 02 	sts	0x02A6, r1
     a96:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     a9a:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     a9c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     aa0:	80 91 e2 00 	lds	r24, 0x00E2
     aa4:	8e 7f       	andi	r24, 0xFE	; 254
     aa6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     aaa:	80 91 e2 00 	lds	r24, 0x00E2
     aae:	80 61       	ori	r24, 0x10	; 16
     ab0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	42 e0       	ldi	r20, 0x02	; 2
     aba:	35 de       	rcall	.-918    	; 0x726 <Endpoint_ConfigureEndpoint_Prv>
     abc:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ac0:	88 60       	ori	r24, 0x08	; 8
     ac2:	80 93 f0 00 	sts	0x00F0, r24
     ac6:	b0 d1       	rcall	.+864    	; 0xe28 <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	bf 91       	pop	r27
     ace:	af 91       	pop	r26
     ad0:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     ad2:	8f 91       	pop	r24
     ad4:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ad6:	6f 91       	pop	r22
     ad8:	5f 91       	pop	r21
     ada:	4f 91       	pop	r20
     adc:	3f 91       	pop	r19
     ade:	2f 91       	pop	r18
     ae0:	0f 90       	pop	r0
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	0f 90       	pop	r0
     ae6:	1f 90       	pop	r1
     ae8:	18 95       	reti

00000aea <__vector_11>:
     aea:	1f 92       	push	r1
     aec:	0f 92       	push	r0
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	0f 92       	push	r0
     af2:	11 24       	eor	r1, r1
     af4:	2f 93       	push	r18
     af6:	3f 93       	push	r19

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     af8:	4f 93       	push	r20
     afa:	5f 93       	push	r21
     afc:	6f 93       	push	r22
     afe:	7f 93       	push	r23
     b00:	8f 93       	push	r24
     b02:	9f 93       	push	r25
     b04:	af 93       	push	r26
     b06:	bf 93       	push	r27
     b08:	cf 93       	push	r28
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     b0e:	c0 91 e9 00 	lds	r28, 0x00E9
     b12:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b14:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b18:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     b1c:	80 91 f0 00 	lds	r24, 0x00F0
     b20:	87 7f       	andi	r24, 0xF7	; 247
     b22:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     b26:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     b28:	1b d0       	rcall	.+54     	; 0xb60 <USB_Device_ProcessControlRequest>
     b2a:	10 92 e9 00 	sts	0x00E9, r1
     b2e:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     b32:	88 60       	ori	r24, 0x08	; 8
     b34:	80 93 f0 00 	sts	0x00F0, r24
     b38:	c0 93 e9 00 	sts	0x00E9, r28
     b3c:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     b3e:	ef 91       	pop	r30
     b40:	cf 91       	pop	r28
     b42:	bf 91       	pop	r27
     b44:	af 91       	pop	r26
     b46:	9f 91       	pop	r25
     b48:	8f 91       	pop	r24
     b4a:	7f 91       	pop	r23
     b4c:	6f 91       	pop	r22
     b4e:	5f 91       	pop	r21
     b50:	4f 91       	pop	r20
     b52:	3f 91       	pop	r19
     b54:	2f 91       	pop	r18
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	0f 90       	pop	r0
     b5c:	1f 90       	pop	r1
     b5e:	18 95       	reti

00000b60 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	ac 97       	sbiw	r28, 0x2c	; 44
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b76:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     b78:	ea ea       	ldi	r30, 0xAA	; 170
     b7a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b7c:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b80:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b82:	8f 5f       	subi	r24, 0xFF	; 255
     b84:	88 30       	cpi	r24, 0x08	; 8
     b86:	d1 f7       	brne	.-12     	; 0xb7c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b88:	2a dc       	rcall	.-1964   	; 0x3de <EVENT_USB_Device_ControlRequest>
     b8a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b8e:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     b90:	33 c1       	rjmp	.+614    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     b92:	80 91 aa 02 	lds	r24, 0x02AA
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b96:	20 91 ab 02 	lds	r18, 0x02AB

		switch (USB_ControlRequest.bRequest)
     b9a:	25 30       	cpi	r18, 0x05	; 5
     b9c:	09 f4       	brne	.+2      	; 0xba0 <USB_Device_ProcessControlRequest+0x40>
     b9e:	84 c0       	rjmp	.+264    	; 0xca8 <USB_Device_ProcessControlRequest+0x148>
     ba0:	26 30       	cpi	r18, 0x06	; 6
     ba2:	40 f4       	brcc	.+16     	; 0xbb4 <USB_Device_ProcessControlRequest+0x54>
     ba4:	21 30       	cpi	r18, 0x01	; 1
     ba6:	a1 f1       	breq	.+104    	; 0xc10 <USB_Device_ProcessControlRequest+0xb0>
     ba8:	21 30       	cpi	r18, 0x01	; 1
     baa:	70 f0       	brcs	.+28     	; 0xbc8 <USB_Device_ProcessControlRequest+0x68>
     bac:	23 30       	cpi	r18, 0x03	; 3
     bae:	09 f0       	breq	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0x52>
     bb0:	23 c1       	rjmp	.+582    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     bb2:	2e c0       	rjmp	.+92     	; 0xc10 <USB_Device_ProcessControlRequest+0xb0>
     bb4:	28 30       	cpi	r18, 0x08	; 8
     bb6:	09 f4       	brne	.+2      	; 0xbba <USB_Device_ProcessControlRequest+0x5a>
     bb8:	f2 c0       	rjmp	.+484    	; 0xd9e <USB_Device_ProcessControlRequest+0x23e>
     bba:	29 30       	cpi	r18, 0x09	; 9
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <USB_Device_ProcessControlRequest+0x60>
     bbe:	01 c1       	rjmp	.+514    	; 0xdc2 <USB_Device_ProcessControlRequest+0x262>
     bc0:	26 30       	cpi	r18, 0x06	; 6
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <USB_Device_ProcessControlRequest+0x66>
     bc4:	19 c1       	rjmp	.+562    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     bc6:	92 c0       	rjmp	.+292    	; 0xcec <USB_Device_ProcessControlRequest+0x18c>
     bc8:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bca:	21 f0       	breq	.+8      	; 0xbd4 <USB_Device_ProcessControlRequest+0x74>
     bcc:	82 38       	cpi	r24, 0x82	; 130
     bce:	09 f0       	breq	.+2      	; 0xbd2 <USB_Device_ProcessControlRequest+0x72>
     bd0:	13 c1       	rjmp	.+550    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <USB_Device_ProcessControlRequest+0x84>
     bd4:	80 91 a7 02 	lds	r24, 0x02A7
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     bd8:	90 91 a8 02 	lds	r25, 0x02A8
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     bdc:	99 23       	and	r25, r25
     bde:	71 f0       	breq	.+28     	; 0xbfc <USB_Device_ProcessControlRequest+0x9c>
     be0:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     be2:	0c c0       	rjmp	.+24     	; 0xbfc <USB_Device_ProcessControlRequest+0x9c>
     be4:	80 91 ae 02 	lds	r24, 0x02AE
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     be8:	8f 70       	andi	r24, 0x0F	; 15
     bea:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bee:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     bf2:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
     bf4:	95 ff       	sbrs	r25, 5
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bfc:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c00:	97 7f       	andi	r25, 0xF7	; 247
     c02:	90 93 e8 00 	sts	0x00E8, r25
     c06:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c0a:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     c0e:	d2 c0       	rjmp	.+420    	; 0xdb4 <USB_Device_ProcessControlRequest+0x254>
     c10:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c12:	19 f0       	breq	.+6      	; 0xc1a <USB_Device_ProcessControlRequest+0xba>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	09 f0       	breq	.+2      	; 0xc1a <USB_Device_ProcessControlRequest+0xba>
     c18:	ef c0       	rjmp	.+478    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     c1a:	90 e0       	ldi	r25, 0x00	; 0
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c1c:	8f 71       	andi	r24, 0x1F	; 31
     c1e:	90 70       	andi	r25, 0x00	; 0
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	29 f0       	breq	.+10     	; 0xc2e <USB_Device_ProcessControlRequest+0xce>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	91 05       	cpc	r25, r1
     c28:	09 f0       	breq	.+2      	; 0xc2c <USB_Device_ProcessControlRequest+0xcc>
     c2a:	e6 c0       	rjmp	.+460    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     c2c:	0b c0       	rjmp	.+22     	; 0xc44 <USB_Device_ProcessControlRequest+0xe4>
     c2e:	80 91 ac 02 	lds	r24, 0x02AC
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c32:	81 30       	cpi	r24, 0x01	; 1
     c34:	09 f0       	breq	.+2      	; 0xc38 <USB_Device_ProcessControlRequest+0xd8>
     c36:	e0 c0       	rjmp	.+448    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     c38:	23 30       	cpi	r18, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c3a:	09 f0       	breq	.+2      	; 0xc3e <USB_Device_ProcessControlRequest+0xde>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	80 93 a8 02 	sts	0x02A8, r24
     c42:	2c c0       	rjmp	.+88     	; 0xc9c <USB_Device_ProcessControlRequest+0x13c>
     c44:	80 91 ac 02 	lds	r24, 0x02AC

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c48:	88 23       	and	r24, r24
     c4a:	41 f5       	brne	.+80     	; 0xc9c <USB_Device_ProcessControlRequest+0x13c>
     c4c:	20 91 ae 02 	lds	r18, 0x02AE
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c50:	2f 70       	andi	r18, 0x0F	; 15
     c52:	09 f4       	brne	.+2      	; 0xc56 <USB_Device_ProcessControlRequest+0xf6>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c54:	d1 c0       	rjmp	.+418    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     c56:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c5a:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c5e:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c60:	1d c0       	rjmp	.+58     	; 0xc9c <USB_Device_ProcessControlRequest+0x13c>
     c62:	80 91 ab 02 	lds	r24, 0x02AB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	21 f4       	brne	.+8      	; 0xc72 <USB_Device_ProcessControlRequest+0x112>
     c6a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c6e:	80 62       	ori	r24, 0x20	; 32
     c70:	13 c0       	rjmp	.+38     	; 0xc98 <USB_Device_ProcessControlRequest+0x138>
     c72:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c76:	80 61       	ori	r24, 0x10	; 16
     c78:	80 93 eb 00 	sts	0x00EB, r24
     c7c:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <USB_Device_ProcessControlRequest+0x126>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	2a 95       	dec	r18
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <USB_Device_ProcessControlRequest+0x122>
     c8a:	80 93 ea 00 	sts	0x00EA, r24
     c8e:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     c92:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c96:	88 60       	ori	r24, 0x08	; 8
     c98:	80 93 eb 00 	sts	0x00EB, r24
     c9c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ca0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ca4:	87 7f       	andi	r24, 0xF7	; 247
     ca6:	89 c0       	rjmp	.+274    	; 0xdba <USB_Device_ProcessControlRequest+0x25a>
     ca8:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     caa:	09 f0       	breq	.+2      	; 0xcae <USB_Device_ProcessControlRequest+0x14e>
     cac:	a5 c0       	rjmp	.+330    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     cae:	10 91 ac 02 	lds	r17, 0x02AC
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     cb2:	1f 77       	andi	r17, 0x7F	; 127
     cb4:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     cb8:	80 78       	andi	r24, 0x80	; 128
     cba:	81 2b       	or	r24, r17
     cbc:	80 93 e3 00 	sts	0x00E3, r24
     cc0:	80 91 e8 00 	lds	r24, 0x00E8
     cc4:	87 7f       	andi	r24, 0xF7	; 247
     cc6:	80 93 e8 00 	sts	0x00E8, r24
     cca:	9e dd       	rcall	.-1220   	; 0x808 <Endpoint_ClearStatusStage>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ccc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cd0:	80 ff       	sbrs	r24, 0
     cd2:	fc cf       	rjmp	.-8      	; 0xccc <USB_Device_ProcessControlRequest+0x16c>

	while (!(Endpoint_IsINReady()));
     cd4:	80 91 e3 00 	lds	r24, 0x00E3
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     cd8:	80 68       	ori	r24, 0x80	; 128
     cda:	80 93 e3 00 	sts	0x00E3, r24
     cde:	11 23       	and	r17, r17
     ce0:	11 f0       	breq	.+4      	; 0xce6 <USB_Device_ProcessControlRequest+0x186>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <USB_Device_ProcessControlRequest+0x188>
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	8e bb       	out	0x1e, r24	; 30
     cea:	86 c0       	rjmp	.+268    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     cec:	80 58       	subi	r24, 0x80	; 128
     cee:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <USB_Device_ProcessControlRequest+0x194>
     cf2:	82 c0       	rjmp	.+260    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     cf4:	80 91 ac 02 	lds	r24, 0x02AC
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     cf8:	90 91 ad 02 	lds	r25, 0x02AD
     cfc:	23 e0       	ldi	r18, 0x03	; 3
     cfe:	8c 3d       	cpi	r24, 0xDC	; 220
     d00:	92 07       	cpc	r25, r18
     d02:	a9 f5       	brne	.+106    	; 0xd6e <USB_Device_ProcessControlRequest+0x20e>
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	8c 83       	std	Y+4, r24	; 0x04
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d08:	8a e2       	ldi	r24, 0x2A	; 42
     d0a:	8b 83       	std	Y+3, r24	; 0x03
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d0c:	5f b7       	in	r21, 0x3f	; 63
     d0e:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d10:	de 01       	movw	r26, r28
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d12:	13 96       	adiw	r26, 0x03	; 3
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	4e e0       	ldi	r20, 0x0E	; 14
     d1a:	61 e2       	ldi	r22, 0x21	; 33
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d1c:	e4 2f       	mov	r30, r20

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	60 93 57 00 	sts	0x0057, r22
     d24:	e4 91       	lpm	r30, Z
     d26:	80 ff       	sbrs	r24, 0
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <USB_Device_ProcessControlRequest+0x1d0>

					if (SerialCharNum & 0x01)
     d2a:	e2 95       	swap	r30
     d2c:	ef 70       	andi	r30, 0x0F	; 15
					{
						SerialByte >>= 4;
     d2e:	4f 5f       	subi	r20, 0xFF	; 255
     d30:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     d32:	2e 2f       	mov	r18, r30
					}

					SerialByte &= 0x0F;
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	ea 30       	cpi	r30, 0x0A	; 10
     d38:	18 f0       	brcs	.+6      	; 0xd40 <USB_Device_ProcessControlRequest+0x1e0>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d3a:	29 5c       	subi	r18, 0xC9	; 201
     d3c:	3f 4f       	sbci	r19, 0xFF	; 255
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <USB_Device_ProcessControlRequest+0x1e4>
     d40:	20 5d       	subi	r18, 0xD0	; 208
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	13 96       	adiw	r26, 0x03	; 3
     d46:	3c 93       	st	X, r19
     d48:	2e 93       	st	-X, r18
     d4a:	12 97       	sbiw	r26, 0x02	; 2
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	12 96       	adiw	r26, 0x02	; 2
     d50:	84 31       	cpi	r24, 0x14	; 20
     d52:	91 05       	cpc	r25, r1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d54:	19 f7       	brne	.-58     	; 0xd1c <USB_Device_ProcessControlRequest+0x1bc>
     d56:	5f bf       	out	0x3f, r21	; 63
     d58:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d5c:	87 7f       	andi	r24, 0xF7	; 247
     d5e:	80 93 e8 00 	sts	0x00E8, r24
     d62:	ce 01       	movw	r24, r28
     d64:	03 96       	adiw	r24, 0x03	; 3

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d66:	6a e2       	ldi	r22, 0x2A	; 42
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	1d dc       	rcall	.-1990   	; 0x5a6 <Endpoint_Write_Control_Stream_LE>
     d6c:	12 c0       	rjmp	.+36     	; 0xd92 <USB_Device_ProcessControlRequest+0x232>
     d6e:	60 91 ae 02 	lds	r22, 0x02AE
     d72:	ae 01       	movw	r20, r28
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d74:	4f 5f       	subi	r20, 0xFF	; 255
     d76:	5f 4f       	sbci	r21, 0xFF	; 255
     d78:	9b db       	rcall	.-2250   	; 0x4b0 <CALLBACK_USB_GetDescriptor>
     d7a:	bc 01       	movw	r22, r24
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	09 f4       	brne	.+2      	; 0xd82 <USB_Device_ProcessControlRequest+0x222>
     d80:	3b c0       	rjmp	.+118    	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     d82:	80 91 e8 00 	lds	r24, 0x00E8
     d86:	87 7f       	andi	r24, 0xF7	; 247
     d88:	80 93 e8 00 	sts	0x00E8, r24
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	69 dc       	rcall	.-1838   	; 0x664 <Endpoint_Write_Control_PStream_LE>
     d92:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d96:	8b 77       	andi	r24, 0x7B	; 123
     d98:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d9c:	2d c0       	rjmp	.+90     	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     d9e:	80 38       	cpi	r24, 0x80	; 128
     da0:	59 f5       	brne	.+86     	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     da2:	80 91 e8 00 	lds	r24, 0x00E8
     da6:	87 7f       	andi	r24, 0xF7	; 247
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     da8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dac:	80 91 a6 02 	lds	r24, 0x02A6
     db0:	80 93 f1 00 	sts	0x00F1, r24
     db4:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     db8:	8e 77       	andi	r24, 0x7E	; 126
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dba:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dbe:	24 dd       	rcall	.-1464   	; 0x808 <Endpoint_ClearStatusStage>
     dc0:	1b c0       	rjmp	.+54     	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     dc2:	88 23       	and	r24, r24
     dc4:	c9 f4       	brne	.+50     	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
     dc6:	90 91 ac 02 	lds	r25, 0x02AC
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     dca:	92 30       	cpi	r25, 0x02	; 2
     dcc:	a8 f4       	brcc	.+42     	; 0xdf8 <USB_Device_ProcessControlRequest+0x298>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     dce:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     dd2:	87 7f       	andi	r24, 0xF7	; 247
     dd4:	80 93 e8 00 	sts	0x00E8, r24
     dd8:	90 93 a6 02 	sts	0x02A6, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ddc:	15 dd       	rcall	.-1494   	; 0x808 <Endpoint_ClearStatusStage>
     dde:	80 91 a6 02 	lds	r24, 0x02A6
     de2:	88 23       	and	r24, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     de4:	21 f4       	brne	.+8      	; 0xdee <USB_Device_ProcessControlRequest+0x28e>
     de6:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     dea:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <USB_Device_ProcessControlRequest+0x292>
     dee:	84 e0       	ldi	r24, 0x04	; 4
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <USB_Device_ProcessControlRequest+0x294>
     df2:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     df4:	8e bb       	out	0x1e, r24	; 30
     df6:	ea da       	rcall	.-2604   	; 0x3cc <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     df8:	80 91 e8 00 	lds	r24, 0x00E8
     dfc:	83 ff       	sbrs	r24, 3
     dfe:	0a c0       	rjmp	.+20     	; 0xe14 <USB_Device_ProcessControlRequest+0x2b4>
     e00:	80 91 e8 00 	lds	r24, 0x00E8

	EVENT_USB_Device_ConfigurationChanged();
     e04:	87 7f       	andi	r24, 0xF7	; 247
     e06:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e0a:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e0e:	80 62       	ori	r24, 0x20	; 32
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e10:	80 93 eb 00 	sts	0x00EB, r24
     e14:	ac 96       	adiw	r28, 0x2c	; 44
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     e24:	1f 91       	pop	r17
     e26:	08 95       	ret

00000e28 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e28:	08 95       	ret

00000e2a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e2a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e2c:	8e b3       	in	r24, 0x1e	; 30
     e2e:	88 23       	and	r24, r24
     e30:	a9 f0       	breq	.+42     	; 0xe5c <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e32:	80 91 e9 00 	lds	r24, 0x00E9
     e36:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e38:	90 91 ec 00 	lds	r25, 0x00EC
     e3c:	90 ff       	sbrs	r25, 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <USB_USBTask+0x1a>
     e40:	c0 e8       	ldi	r28, 0x80	; 128
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <USB_USBTask+0x1c>
     e44:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e46:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e48:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e4c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e50:	83 ff       	sbrs	r24, 3
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
     e54:	85 de       	rcall	.-758    	; 0xb60 <USB_Device_ProcessControlRequest>
     e56:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e58:	c0 93 e9 00 	sts	0x00E9, r28
     e5c:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e5e:	08 95       	ret

00000e60 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e66:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     e6a:	83 ff       	sbrs	r24, 3
     e6c:	a2 c0       	rjmp	.+324    	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e6e:	88 81       	ld	r24, Y
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	20 91 ae 02 	lds	r18, 0x02AE
     e76:	30 91 af 02 	lds	r19, 0x02AF
     e7a:	28 17       	cp	r18, r24
     e7c:	39 07       	cpc	r19, r25
     e7e:	09 f0       	breq	.+2      	; 0xe82 <CDC_Device_ProcessControlRequest+0x22>
     e80:	98 c0       	rjmp	.+304    	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     e82:	80 91 ab 02 	lds	r24, 0x02AB
     e86:	81 32       	cpi	r24, 0x21	; 33
     e88:	69 f0       	breq	.+26     	; 0xea4 <CDC_Device_ProcessControlRequest+0x44>
     e8a:	82 32       	cpi	r24, 0x22	; 34
     e8c:	20 f4       	brcc	.+8      	; 0xe96 <CDC_Device_ProcessControlRequest+0x36>
     e8e:	80 32       	cpi	r24, 0x20	; 32
     e90:	09 f0       	breq	.+2      	; 0xe94 <CDC_Device_ProcessControlRequest+0x34>
     e92:	8f c0       	rjmp	.+286    	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
     e94:	3c c0       	rjmp	.+120    	; 0xf0e <CDC_Device_ProcessControlRequest+0xae>
     e96:	82 32       	cpi	r24, 0x22	; 34
     e98:	09 f4       	brne	.+2      	; 0xe9c <CDC_Device_ProcessControlRequest+0x3c>
     e9a:	6a c0       	rjmp	.+212    	; 0xf70 <CDC_Device_ProcessControlRequest+0x110>
     e9c:	83 32       	cpi	r24, 0x23	; 35
     e9e:	09 f0       	breq	.+2      	; 0xea2 <CDC_Device_ProcessControlRequest+0x42>
     ea0:	88 c0       	rjmp	.+272    	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
     ea2:	79 c0       	rjmp	.+242    	; 0xf96 <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     ea4:	80 91 aa 02 	lds	r24, 0x02AA
     ea8:	81 3a       	cpi	r24, 0xA1	; 161
     eaa:	09 f0       	breq	.+2      	; 0xeae <CDC_Device_ProcessControlRequest+0x4e>
     eac:	82 c0       	rjmp	.+260    	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eae:	80 91 e8 00 	lds	r24, 0x00E8
     eb2:	87 7f       	andi	r24, 0xF7	; 247
     eb4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eb8:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     ebc:	80 ff       	sbrs	r24, 0
     ebe:	fc cf       	rjmp	.-8      	; 0xeb8 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     ec0:	8c 89       	ldd	r24, Y+20	; 0x14
     ec2:	9d 89       	ldd	r25, Y+21	; 0x15
     ec4:	ae 89       	ldd	r26, Y+22	; 0x16
     ec6:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     ec8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ecc:	49 2f       	mov	r20, r25
     ece:	5a 2f       	mov	r21, r26
     ed0:	6b 2f       	mov	r22, r27
     ed2:	77 27       	eor	r23, r23
     ed4:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
     ed8:	ad 01       	movw	r20, r26
     eda:	66 27       	eor	r22, r22
     edc:	77 27       	eor	r23, r23
     ede:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
     ee2:	8b 2f       	mov	r24, r27
     ee4:	99 27       	eor	r25, r25
     ee6:	aa 27       	eor	r26, r26
     ee8:	bb 27       	eor	r27, r27
     eea:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     eee:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ef0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     ef4:	89 8d       	ldd	r24, Y+25	; 0x19
     ef6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     efa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     efc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f00:	80 91 e8 00 	lds	r24, 0x00E8
     f04:	8e 77       	andi	r24, 0x7E	; 126
     f06:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     f0a:	7e dc       	rcall	.-1796   	; 0x808 <Endpoint_ClearStatusStage>
     f0c:	52 c0       	rjmp	.+164    	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
     f0e:	80 91 aa 02 	lds	r24, 0x02AA
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f12:	81 32       	cpi	r24, 0x21	; 33
     f14:	09 f0       	breq	.+2      	; 0xf18 <CDC_Device_ProcessControlRequest+0xb8>
     f16:	4d c0       	rjmp	.+154    	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
     f18:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f1c:	87 7f       	andi	r24, 0xF7	; 247
     f1e:	80 93 e8 00 	sts	0x00E8, r24
     f22:	04 c0       	rjmp	.+8      	; 0xf2c <CDC_Device_ProcessControlRequest+0xcc>
     f24:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     f26:	88 23       	and	r24, r24
     f28:	09 f4       	brne	.+2      	; 0xf2c <CDC_Device_ProcessControlRequest+0xcc>
     f2a:	43 c0       	rjmp	.+134    	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
     f2c:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f30:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     f32:	f8 cf       	rjmp	.-16     	; 0xf24 <CDC_Device_ProcessControlRequest+0xc4>
     f34:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     f38:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
     f3c:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
     f40:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     f44:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f46:	2d 8b       	std	Y+21, r18	; 0x15
     f48:	9e 8b       	std	Y+22, r25	; 0x16
     f4a:	8f 8b       	std	Y+23, r24	; 0x17
     f4c:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f50:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f52:	80 91 f1 00 	lds	r24, 0x00F1
     f56:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f58:	80 91 f1 00 	lds	r24, 0x00F1
     f5c:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f5e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f62:	8b 77       	andi	r24, 0x7B	; 123
     f64:	80 93 e8 00 	sts	0x00E8, r24
     f68:	4f dc       	rcall	.-1890   	; 0x808 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f6a:	ce 01       	movw	r24, r28
     f6c:	5e da       	rcall	.-2884   	; 0x42a <EVENT_CDC_Device_LineEncodingChanged>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f6e:	21 c0       	rjmp	.+66     	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
     f70:	80 91 aa 02 	lds	r24, 0x02AA
     f74:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f76:	e9 f4       	brne	.+58     	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
     f78:	80 91 e8 00 	lds	r24, 0x00E8
     f7c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f7e:	80 93 e8 00 	sts	0x00E8, r24
     f82:	42 dc       	rcall	.-1916   	; 0x808 <Endpoint_ClearStatusStage>
     f84:	80 91 ac 02 	lds	r24, 0x02AC
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f88:	90 91 ad 02 	lds	r25, 0x02AD

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f8c:	99 8b       	std	Y+17, r25	; 0x11
     f8e:	88 8b       	std	Y+16, r24	; 0x10
     f90:	ce 01       	movw	r24, r28
     f92:	66 d1       	rcall	.+716    	; 0x1260 <CDC_Device_Event_Stub>
     f94:	0e c0       	rjmp	.+28     	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
     f96:	80 91 aa 02 	lds	r24, 0x02AA

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f9a:	81 32       	cpi	r24, 0x21	; 33
     f9c:	51 f4       	brne	.+20     	; 0xfb2 <CDC_Device_ProcessControlRequest+0x152>
     f9e:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     fa2:	87 7f       	andi	r24, 0xF7	; 247
     fa4:	80 93 e8 00 	sts	0x00E8, r24
     fa8:	2f dc       	rcall	.-1954   	; 0x808 <Endpoint_ClearStatusStage>
     faa:	ce 01       	movw	r24, r28
     fac:	60 91 ac 02 	lds	r22, 0x02AC
     fb0:	57 d1       	rcall	.+686    	; 0x1260 <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     fb6:	08 95       	ret

00000fb8 <CDC_Device_ConfigureEndpoints>:
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
     fbe:	40 96       	adiw	r24, 0x10	; 16
			}

			break;
	}
}
     fc0:	fc 01       	movw	r30, r24
     fc2:	8b e0       	ldi	r24, 0x0B	; 11
     fc4:	df 01       	movw	r26, r30

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     fc6:	1d 92       	st	X+, r1
     fc8:	8a 95       	dec	r24
     fca:	e9 f7       	brne	.-6      	; 0xfc6 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     fd0:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     fd2:	83 e0       	ldi	r24, 0x03	; 3
     fd4:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	d9 db       	rcall	.-2126   	; 0x790 <Endpoint_ConfigureEndpointTable>
     fde:	88 23       	and	r24, r24
     fe0:	59 f0       	breq	.+22     	; 0xff8 <CDC_Device_ConfigureEndpoints+0x40>
     fe2:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     fe4:	06 96       	adiw	r24, 0x06	; 6
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	d3 db       	rcall	.-2138   	; 0x790 <Endpoint_ConfigureEndpointTable>
     fea:	88 23       	and	r24, r24
     fec:	29 f0       	breq	.+10     	; 0xff8 <CDC_Device_ConfigureEndpoints+0x40>
     fee:	ce 01       	movw	r24, r28
     ff0:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	cd db       	rcall	.-2150   	; 0x790 <Endpoint_ConfigureEndpointTable>
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <CDC_Device_ConfigureEndpoints+0x42>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     ffe:	08 95       	ret

00001000 <CDC_Device_SendString>:

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    1000:	fc 01       	movw	r30, r24
    1002:	cb 01       	movw	r24, r22
    1004:	2e b3       	in	r18, 0x1e	; 30
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1006:	24 30       	cpi	r18, 0x04	; 4
    1008:	c1 f4       	brne	.+48     	; 0x103a <CDC_Device_SendString+0x3a>
    100a:	44 89       	ldd	r20, Z+20	; 0x14
    100c:	55 89       	ldd	r21, Z+21	; 0x15
    100e:	66 89       	ldd	r22, Z+22	; 0x16
    1010:	77 89       	ldd	r23, Z+23	; 0x17
    1012:	41 15       	cp	r20, r1
    1014:	51 05       	cpc	r21, r1
    1016:	61 05       	cpc	r22, r1
    1018:	71 05       	cpc	r23, r1
    101a:	89 f0       	breq	.+34     	; 0x103e <CDC_Device_SendString+0x3e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    101c:	21 81       	ldd	r18, Z+1	; 0x01
    101e:	2f 70       	andi	r18, 0x0F	; 15
    1020:	20 93 e9 00 	sts	0x00E9, r18
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
    1024:	fc 01       	movw	r30, r24
    1026:	01 90       	ld	r0, Z+
    1028:	00 20       	and	r0, r0
    102a:	e9 f7       	brne	.-6      	; 0x1026 <CDC_Device_SendString+0x26>
    102c:	31 97       	sbiw	r30, 0x01	; 1
    102e:	e8 1b       	sub	r30, r24
    1030:	f9 0b       	sbc	r31, r25
    1032:	bf 01       	movw	r22, r30
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	67 ca       	rjmp	.-2866   	; 0x508 <Endpoint_Write_Stream_LE>
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	08 95       	ret

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	08 95       	ret

00001042 <CDC_Device_SendByte>:
    1042:	cf 93       	push	r28

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
}
    1044:	fc 01       	movw	r30, r24
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    1046:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1048:	8e b3       	in	r24, 0x1e	; 30
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	e9 f4       	brne	.+58     	; 0x1088 <CDC_Device_SendByte+0x46>
    104e:	44 89       	ldd	r20, Z+20	; 0x14
    1050:	55 89       	ldd	r21, Z+21	; 0x15
    1052:	66 89       	ldd	r22, Z+22	; 0x16
    1054:	77 89       	ldd	r23, Z+23	; 0x17
    1056:	41 15       	cp	r20, r1
    1058:	51 05       	cpc	r21, r1
    105a:	61 05       	cpc	r22, r1
    105c:	71 05       	cpc	r23, r1
    105e:	a1 f0       	breq	.+40     	; 0x1088 <CDC_Device_SendByte+0x46>
    1060:	81 81       	ldd	r24, Z+1	; 0x01
    1062:	8f 70       	andi	r24, 0x0F	; 15
    1064:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1068:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    106c:	85 fd       	sbrc	r24, 5
    106e:	08 c0       	rjmp	.+16     	; 0x1080 <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1070:	80 91 e8 00 	lds	r24, 0x00E8
    1074:	8e 77       	andi	r24, 0x7E	; 126
    1076:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    107a:	e5 db       	rcall	.-2102   	; 0x846 <Endpoint_WaitUntilReady>
    107c:	88 23       	and	r24, r24
    107e:	29 f4       	brne	.+10     	; 0x108a <CDC_Device_SendByte+0x48>
    1080:	c0 93 f1 00 	sts	0x00F1, r28
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1084:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1086:	01 c0       	rjmp	.+2      	; 0x108a <CDC_Device_SendByte+0x48>
    1088:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    108a:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    108c:	08 95       	ret

0000108e <CDC_Device_putchar>:
    108e:	28 2f       	mov	r18, r24
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    1090:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    1092:	84 85       	ldd	r24, Z+12	; 0x0c
    1094:	95 85       	ldd	r25, Z+13	; 0x0d
    1096:	62 2f       	mov	r22, r18
    1098:	d4 df       	rcall	.-88     	; 0x1042 <CDC_Device_SendByte>
    109a:	88 23       	and	r24, r24
    109c:	19 f0       	breq	.+6      	; 0x10a4 <CDC_Device_putchar+0x16>
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	9f ef       	ldi	r25, 0xFF	; 255
    10a2:	08 95       	ret
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	08 95       	ret

000010aa <CDC_Device_Flush>:
}
    10aa:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10ac:	8e b3       	in	r24, 0x1e	; 30
    10ae:	84 30       	cpi	r24, 0x04	; 4
    10b0:	51 f5       	brne	.+84     	; 0x1106 <CDC_Device_Flush+0x5c>
    10b2:	44 89       	ldd	r20, Z+20	; 0x14
    10b4:	55 89       	ldd	r21, Z+21	; 0x15
    10b6:	66 89       	ldd	r22, Z+22	; 0x16
    10b8:	77 89       	ldd	r23, Z+23	; 0x17
    10ba:	41 15       	cp	r20, r1
    10bc:	51 05       	cpc	r21, r1
    10be:	61 05       	cpc	r22, r1
    10c0:	71 05       	cpc	r23, r1
    10c2:	09 f1       	breq	.+66     	; 0x1106 <CDC_Device_Flush+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10c4:	81 81       	ldd	r24, Z+1	; 0x01
    10c6:	8f 70       	andi	r24, 0x0F	; 15
    10c8:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    10cc:	90 91 f3 00 	lds	r25, 0x00F3
    10d0:	80 91 f2 00 	lds	r24, 0x00F2
    10d4:	39 2f       	mov	r19, r25
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	82 2b       	or	r24, r18
    10dc:	93 2b       	or	r25, r19

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	a1 f0       	breq	.+40     	; 0x110a <CDC_Device_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    10e2:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10e6:	80 91 e8 00 	lds	r24, 0x00E8
    10ea:	8e 77       	andi	r24, 0x7E	; 126
    10ec:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    10f0:	95 fd       	sbrc	r25, 5
    10f2:	0d c0       	rjmp	.+26     	; 0x110e <CDC_Device_Flush+0x64>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    10f4:	a8 db       	rcall	.-2224   	; 0x846 <Endpoint_WaitUntilReady>
    10f6:	88 23       	and	r24, r24
    10f8:	59 f4       	brne	.+22     	; 0x1110 <CDC_Device_Flush+0x66>
    10fa:	90 91 e8 00 	lds	r25, 0x00E8
    10fe:	9e 77       	andi	r25, 0x7E	; 126
    1100:	90 93 e8 00 	sts	0x00E8, r25
    1104:	08 95       	ret
    1106:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1108:	08 95       	ret
    110a:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    110c:	08 95       	ret
    110e:	80 e0       	ldi	r24, 0x00	; 0
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    1110:	08 95       	ret

00001112 <CDC_Device_USBTask>:
}
    1112:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1114:	24 30       	cpi	r18, 0x04	; 4
    1116:	99 f4       	brne	.+38     	; 0x113e <CDC_Device_USBTask+0x2c>
    1118:	fc 01       	movw	r30, r24
    111a:	44 89       	ldd	r20, Z+20	; 0x14
    111c:	55 89       	ldd	r21, Z+21	; 0x15
    111e:	66 89       	ldd	r22, Z+22	; 0x16
    1120:	77 89       	ldd	r23, Z+23	; 0x17
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	49 f0       	breq	.+18     	; 0x113e <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    112c:	21 81       	ldd	r18, Z+1	; 0x01
    112e:	2f 70       	andi	r18, 0x0F	; 15
    1130:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1134:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1138:	20 ff       	sbrs	r18, 0
    113a:	01 c0       	rjmp	.+2      	; 0x113e <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
    113c:	b6 cf       	rjmp	.-148    	; 0x10aa <CDC_Device_Flush>
    113e:	08 95       	ret

00001140 <CDC_Device_BytesReceived>:
    1140:	fc 01       	movw	r30, r24
	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1142:	8e b3       	in	r24, 0x1e	; 30
    1144:	84 30       	cpi	r24, 0x04	; 4
    1146:	61 f5       	brne	.+88     	; 0x11a0 <CDC_Device_BytesReceived+0x60>
    1148:	44 89       	ldd	r20, Z+20	; 0x14
    114a:	55 89       	ldd	r21, Z+21	; 0x15
    114c:	66 89       	ldd	r22, Z+22	; 0x16
    114e:	77 89       	ldd	r23, Z+23	; 0x17
    1150:	41 15       	cp	r20, r1
    1152:	51 05       	cpc	r21, r1
    1154:	61 05       	cpc	r22, r1
    1156:	71 05       	cpc	r23, r1
    1158:	19 f1       	breq	.+70     	; 0x11a0 <CDC_Device_BytesReceived+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    115a:	86 81       	ldd	r24, Z+6	; 0x06
    115c:	8f 70       	andi	r24, 0x0F	; 15
    115e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1162:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1166:	82 ff       	sbrs	r24, 2
    1168:	1e c0       	rjmp	.+60     	; 0x11a6 <CDC_Device_BytesReceived+0x66>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    116a:	90 91 f3 00 	lds	r25, 0x00F3
    116e:	80 91 f2 00 	lds	r24, 0x00F2
    1172:	39 2f       	mov	r19, r25
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	82 2b       	or	r24, r18
    117a:	93 2b       	or	r25, r19
	{
		if (!(Endpoint_BytesInEndpoint()))
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	31 f4       	brne	.+12     	; 0x118c <CDC_Device_BytesReceived+0x4c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1180:	80 91 e8 00 	lds	r24, 0x00E8
    1184:	8b 77       	andi	r24, 0x7B	; 123
    1186:	80 93 e8 00 	sts	0x00E8, r24
    118a:	0a c0       	rjmp	.+20     	; 0x11a0 <CDC_Device_BytesReceived+0x60>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    118c:	90 91 f3 00 	lds	r25, 0x00F3
    1190:	80 91 f2 00 	lds	r24, 0x00F2
    1194:	39 2f       	mov	r19, r25
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	82 2b       	or	r24, r18
    119c:	93 2b       	or	r25, r19
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
    119e:	08 95       	ret
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return 0;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	08 95       	ret
			return Endpoint_BytesInEndpoint();
		}
	}
	else
	{
		return 0;
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    11aa:	08 95       	ret

000011ac <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11ac:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    11ae:	8e b3       	in	r24, 0x1e	; 30
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	a1 f5       	brne	.+104    	; 0x121c <CDC_Device_ReceiveByte+0x70>
    11b4:	44 89       	ldd	r20, Z+20	; 0x14
    11b6:	55 89       	ldd	r21, Z+21	; 0x15
    11b8:	66 89       	ldd	r22, Z+22	; 0x16
    11ba:	77 89       	ldd	r23, Z+23	; 0x17
    11bc:	41 15       	cp	r20, r1
    11be:	51 05       	cpc	r21, r1
    11c0:	61 05       	cpc	r22, r1
    11c2:	71 05       	cpc	r23, r1
    11c4:	59 f1       	breq	.+86     	; 0x121c <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11c6:	86 81       	ldd	r24, Z+6	; 0x06
    11c8:	8f 70       	andi	r24, 0x0F	; 15
    11ca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11ce:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    11d2:	82 ff       	sbrs	r24, 2
    11d4:	26 c0       	rjmp	.+76     	; 0x1222 <CDC_Device_ReceiveByte+0x76>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    11d6:	90 91 f3 00 	lds	r25, 0x00F3
    11da:	80 91 f2 00 	lds	r24, 0x00F2
    11de:	39 2f       	mov	r19, r25
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	82 2b       	or	r24, r18
    11e6:	93 2b       	or	r25, r19
	{
		if (Endpoint_BytesInEndpoint())
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <CDC_Device_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    11ec:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <CDC_Device_ReceiveByte+0x4c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    11f8:	30 91 f3 00 	lds	r19, 0x00F3
    11fc:	20 91 f2 00 	lds	r18, 0x00F2
    1200:	53 2f       	mov	r21, r19
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	24 2b       	or	r18, r20
    1208:	35 2b       	or	r19, r21
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    120a:	21 15       	cp	r18, r1
    120c:	31 05       	cpc	r19, r1
    120e:	59 f4       	brne	.+22     	; 0x1226 <CDC_Device_ReceiveByte+0x7a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1210:	20 91 e8 00 	lds	r18, 0x00E8
    1214:	2b 77       	andi	r18, 0x7B	; 123
    1216:	20 93 e8 00 	sts	0x00E8, r18
    121a:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	9f ef       	ldi	r25, 0xFF	; 255
    1220:	08 95       	ret

	int16_t ReceivedByte = -1;
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1226:	08 95       	ret

00001228 <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    1228:	fc 01       	movw	r30, r24
    122a:	84 85       	ldd	r24, Z+12	; 0x0c
    122c:	95 85       	ldd	r25, Z+13	; 0x0d
    122e:	be df       	rcall	.-132    	; 0x11ac <CDC_Device_ReceiveByte>
    1230:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <CDC_Device_getchar+0x10>
    1234:	8e ef       	ldi	r24, 0xFE	; 254
	  return _FDEV_EOF;
    1236:	9f ef       	ldi	r25, 0xFF	; 255
    1238:	08 95       	ret

0000123a <CDC_Device_CreateStream>:

	return ReceivedByte;
}
    123a:	fb 01       	movw	r30, r22

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    123c:	2e e0       	ldi	r18, 0x0E	; 14
    123e:	db 01       	movw	r26, r22
    1240:	1d 92       	st	X+, r1
    1242:	2a 95       	dec	r18
    1244:	e9 f7       	brne	.-6      	; 0x1240 <CDC_Device_CreateStream+0x6>
    1246:	23 e0       	ldi	r18, 0x03	; 3
    1248:	23 83       	std	Z+3, r18	; 0x03
    124a:	27 e4       	ldi	r18, 0x47	; 71
    124c:	38 e0       	ldi	r19, 0x08	; 8
    124e:	31 87       	std	Z+9, r19	; 0x09
    1250:	20 87       	std	Z+8, r18	; 0x08
    1252:	24 e1       	ldi	r18, 0x14	; 20
    1254:	39 e0       	ldi	r19, 0x09	; 9
    1256:	33 87       	std	Z+11, r19	; 0x0b
    1258:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    125a:	95 87       	std	Z+13, r25	; 0x0d
    125c:	84 87       	std	Z+12, r24	; 0x0c
}
    125e:	08 95       	ret

00001260 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1260:	08 95       	ret

00001262 <__udivmodsi4>:
    1262:	a1 e2       	ldi	r26, 0x21	; 33
    1264:	1a 2e       	mov	r1, r26
    1266:	aa 1b       	sub	r26, r26
    1268:	bb 1b       	sub	r27, r27
    126a:	fd 01       	movw	r30, r26
    126c:	0d c0       	rjmp	.+26     	; 0x1288 <__udivmodsi4_ep>

0000126e <__udivmodsi4_loop>:
    126e:	aa 1f       	adc	r26, r26
    1270:	bb 1f       	adc	r27, r27
    1272:	ee 1f       	adc	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	a2 17       	cp	r26, r18
    1278:	b3 07       	cpc	r27, r19
    127a:	e4 07       	cpc	r30, r20
    127c:	f5 07       	cpc	r31, r21
    127e:	20 f0       	brcs	.+8      	; 0x1288 <__udivmodsi4_ep>
    1280:	a2 1b       	sub	r26, r18
    1282:	b3 0b       	sbc	r27, r19
    1284:	e4 0b       	sbc	r30, r20
    1286:	f5 0b       	sbc	r31, r21

00001288 <__udivmodsi4_ep>:
    1288:	66 1f       	adc	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	1a 94       	dec	r1
    1292:	69 f7       	brne	.-38     	; 0x126e <__udivmodsi4_loop>
    1294:	60 95       	com	r22
    1296:	70 95       	com	r23
    1298:	80 95       	com	r24
    129a:	90 95       	com	r25
    129c:	9b 01       	movw	r18, r22
    129e:	ac 01       	movw	r20, r24
    12a0:	bd 01       	movw	r22, r26
    12a2:	cf 01       	movw	r24, r30
    12a4:	08 95       	ret

000012a6 <strncmp>:
    12a6:	fb 01       	movw	r30, r22
    12a8:	dc 01       	movw	r26, r24
    12aa:	41 50       	subi	r20, 0x01	; 1
    12ac:	50 40       	sbci	r21, 0x00	; 0
    12ae:	30 f0       	brcs	.+12     	; 0x12bc <strncmp+0x16>
    12b0:	8d 91       	ld	r24, X+
    12b2:	01 90       	ld	r0, Z+
    12b4:	80 19       	sub	r24, r0
    12b6:	19 f4       	brne	.+6      	; 0x12be <strncmp+0x18>
    12b8:	00 20       	and	r0, r0
    12ba:	b9 f7       	brne	.-18     	; 0x12aa <strncmp+0x4>
    12bc:	88 1b       	sub	r24, r24
    12be:	99 0b       	sbc	r25, r25
    12c0:	08 95       	ret

000012c2 <strncpy>:
    12c2:	fb 01       	movw	r30, r22
    12c4:	dc 01       	movw	r26, r24
    12c6:	41 50       	subi	r20, 0x01	; 1
    12c8:	50 40       	sbci	r21, 0x00	; 0
    12ca:	48 f0       	brcs	.+18     	; 0x12de <strncpy+0x1c>
    12cc:	01 90       	ld	r0, Z+
    12ce:	0d 92       	st	X+, r0
    12d0:	00 20       	and	r0, r0
    12d2:	c9 f7       	brne	.-14     	; 0x12c6 <strncpy+0x4>
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <strncpy+0x16>
    12d6:	1d 92       	st	X+, r1
    12d8:	41 50       	subi	r20, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	e0 f7       	brcc	.-8      	; 0x12d6 <strncpy+0x14>
    12de:	08 95       	ret

000012e0 <fprintf>:
    12e0:	a0 e0       	ldi	r26, 0x00	; 0
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e7       	ldi	r30, 0x75	; 117
    12e6:	f9 e0       	ldi	r31, 0x09	; 9
    12e8:	ad c2       	rjmp	.+1370   	; 0x1844 <__prologue_saves__+0x20>
    12ea:	ae 01       	movw	r20, r28
    12ec:	47 5f       	subi	r20, 0xF7	; 247
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	6f 81       	ldd	r22, Y+7	; 0x07
    12f6:	78 85       	ldd	r23, Y+8	; 0x08
    12f8:	26 d0       	rcall	.+76     	; 0x1346 <vfprintf>
    12fa:	20 96       	adiw	r28, 0x00	; 0
    12fc:	e2 e0       	ldi	r30, 0x02	; 2
    12fe:	be c2       	rjmp	.+1404   	; 0x187c <__epilogue_restores__+0x20>

00001300 <fputs>:
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	7c 01       	movw	r14, r24
    130e:	eb 01       	movw	r28, r22
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	81 ff       	sbrs	r24, 1
    1314:	11 c0       	rjmp	.+34     	; 0x1338 <fputs+0x38>
    1316:	00 e0       	ldi	r16, 0x00	; 0
    1318:	10 e0       	ldi	r17, 0x00	; 0
    131a:	08 c0       	rjmp	.+16     	; 0x132c <fputs+0x2c>
    131c:	e8 85       	ldd	r30, Y+8	; 0x08
    131e:	f9 85       	ldd	r31, Y+9	; 0x09
    1320:	be 01       	movw	r22, r28
    1322:	09 95       	icall
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	11 f0       	breq	.+4      	; 0x132c <fputs+0x2c>
    1328:	0f ef       	ldi	r16, 0xFF	; 255
    132a:	1f ef       	ldi	r17, 0xFF	; 255
    132c:	f7 01       	movw	r30, r14
    132e:	81 91       	ld	r24, Z+
    1330:	7f 01       	movw	r14, r30
    1332:	88 23       	and	r24, r24
    1334:	99 f7       	brne	.-26     	; 0x131c <fputs+0x1c>
    1336:	02 c0       	rjmp	.+4      	; 0x133c <fputs+0x3c>
    1338:	0f ef       	ldi	r16, 0xFF	; 255
    133a:	1f ef       	ldi	r17, 0xFF	; 255
    133c:	c8 01       	movw	r24, r16
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	e6 e0       	ldi	r30, 0x06	; 6
    1344:	97 c2       	rjmp	.+1326   	; 0x1874 <__epilogue_restores__+0x18>

00001346 <vfprintf>:
    1346:	ad e0       	ldi	r26, 0x0D	; 13
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e8 ea       	ldi	r30, 0xA8	; 168
    134c:	f9 e0       	ldi	r31, 0x09	; 9
    134e:	6a c2       	rjmp	.+1236   	; 0x1824 <__prologue_saves__>
    1350:	3c 01       	movw	r6, r24
    1352:	7d 87       	std	Y+13, r23	; 0x0d
    1354:	6c 87       	std	Y+12, r22	; 0x0c
    1356:	5a 01       	movw	r10, r20
    1358:	fc 01       	movw	r30, r24
    135a:	17 82       	std	Z+7, r1	; 0x07
    135c:	16 82       	std	Z+6, r1	; 0x06
    135e:	83 81       	ldd	r24, Z+3	; 0x03
    1360:	81 ff       	sbrs	r24, 1
    1362:	bb c1       	rjmp	.+886    	; 0x16da <vfprintf+0x394>
    1364:	2e 01       	movw	r4, r28
    1366:	08 94       	sec
    1368:	41 1c       	adc	r4, r1
    136a:	51 1c       	adc	r5, r1
    136c:	f3 01       	movw	r30, r6
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	ec 85       	ldd	r30, Y+12	; 0x0c
    1372:	fd 85       	ldd	r31, Y+13	; 0x0d
    1374:	93 fd       	sbrc	r25, 3
    1376:	85 91       	lpm	r24, Z+
    1378:	93 ff       	sbrs	r25, 3
    137a:	81 91       	ld	r24, Z+
    137c:	fd 87       	std	Y+13, r31	; 0x0d
    137e:	ec 87       	std	Y+12, r30	; 0x0c
    1380:	88 23       	and	r24, r24
    1382:	09 f4       	brne	.+2      	; 0x1386 <vfprintf+0x40>
    1384:	a6 c1       	rjmp	.+844    	; 0x16d2 <vfprintf+0x38c>
    1386:	85 32       	cpi	r24, 0x25	; 37
    1388:	41 f4       	brne	.+16     	; 0x139a <vfprintf+0x54>
    138a:	93 fd       	sbrc	r25, 3
    138c:	85 91       	lpm	r24, Z+
    138e:	93 ff       	sbrs	r25, 3
    1390:	81 91       	ld	r24, Z+
    1392:	fd 87       	std	Y+13, r31	; 0x0d
    1394:	ec 87       	std	Y+12, r30	; 0x0c
    1396:	85 32       	cpi	r24, 0x25	; 37
    1398:	21 f4       	brne	.+8      	; 0x13a2 <vfprintf+0x5c>
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	b3 01       	movw	r22, r6
    139e:	b8 d1       	rcall	.+880    	; 0x1710 <fputc>
    13a0:	e5 cf       	rjmp	.-54     	; 0x136c <vfprintf+0x26>
    13a2:	ff 24       	eor	r15, r15
    13a4:	ee 24       	eor	r14, r14
    13a6:	10 e0       	ldi	r17, 0x00	; 0
    13a8:	10 32       	cpi	r17, 0x20	; 32
    13aa:	b0 f4       	brcc	.+44     	; 0x13d8 <vfprintf+0x92>
    13ac:	8b 32       	cpi	r24, 0x2B	; 43
    13ae:	69 f0       	breq	.+26     	; 0x13ca <vfprintf+0x84>
    13b0:	8c 32       	cpi	r24, 0x2C	; 44
    13b2:	28 f4       	brcc	.+10     	; 0x13be <vfprintf+0x78>
    13b4:	80 32       	cpi	r24, 0x20	; 32
    13b6:	51 f0       	breq	.+20     	; 0x13cc <vfprintf+0x86>
    13b8:	83 32       	cpi	r24, 0x23	; 35
    13ba:	71 f4       	brne	.+28     	; 0x13d8 <vfprintf+0x92>
    13bc:	0b c0       	rjmp	.+22     	; 0x13d4 <vfprintf+0x8e>
    13be:	8d 32       	cpi	r24, 0x2D	; 45
    13c0:	39 f0       	breq	.+14     	; 0x13d0 <vfprintf+0x8a>
    13c2:	80 33       	cpi	r24, 0x30	; 48
    13c4:	49 f4       	brne	.+18     	; 0x13d8 <vfprintf+0x92>
    13c6:	11 60       	ori	r17, 0x01	; 1
    13c8:	2c c0       	rjmp	.+88     	; 0x1422 <vfprintf+0xdc>
    13ca:	12 60       	ori	r17, 0x02	; 2
    13cc:	14 60       	ori	r17, 0x04	; 4
    13ce:	29 c0       	rjmp	.+82     	; 0x1422 <vfprintf+0xdc>
    13d0:	18 60       	ori	r17, 0x08	; 8
    13d2:	27 c0       	rjmp	.+78     	; 0x1422 <vfprintf+0xdc>
    13d4:	10 61       	ori	r17, 0x10	; 16
    13d6:	25 c0       	rjmp	.+74     	; 0x1422 <vfprintf+0xdc>
    13d8:	17 fd       	sbrc	r17, 7
    13da:	2e c0       	rjmp	.+92     	; 0x1438 <vfprintf+0xf2>
    13dc:	28 2f       	mov	r18, r24
    13de:	20 53       	subi	r18, 0x30	; 48
    13e0:	2a 30       	cpi	r18, 0x0A	; 10
    13e2:	98 f4       	brcc	.+38     	; 0x140a <vfprintf+0xc4>
    13e4:	16 ff       	sbrs	r17, 6
    13e6:	08 c0       	rjmp	.+16     	; 0x13f8 <vfprintf+0xb2>
    13e8:	8f 2d       	mov	r24, r15
    13ea:	88 0f       	add	r24, r24
    13ec:	f8 2e       	mov	r15, r24
    13ee:	ff 0c       	add	r15, r15
    13f0:	ff 0c       	add	r15, r15
    13f2:	f8 0e       	add	r15, r24
    13f4:	f2 0e       	add	r15, r18
    13f6:	15 c0       	rjmp	.+42     	; 0x1422 <vfprintf+0xdc>
    13f8:	8e 2d       	mov	r24, r14
    13fa:	88 0f       	add	r24, r24
    13fc:	e8 2e       	mov	r14, r24
    13fe:	ee 0c       	add	r14, r14
    1400:	ee 0c       	add	r14, r14
    1402:	e8 0e       	add	r14, r24
    1404:	e2 0e       	add	r14, r18
    1406:	10 62       	ori	r17, 0x20	; 32
    1408:	0c c0       	rjmp	.+24     	; 0x1422 <vfprintf+0xdc>
    140a:	8e 32       	cpi	r24, 0x2E	; 46
    140c:	21 f4       	brne	.+8      	; 0x1416 <vfprintf+0xd0>
    140e:	16 fd       	sbrc	r17, 6
    1410:	60 c1       	rjmp	.+704    	; 0x16d2 <vfprintf+0x38c>
    1412:	10 64       	ori	r17, 0x40	; 64
    1414:	06 c0       	rjmp	.+12     	; 0x1422 <vfprintf+0xdc>
    1416:	8c 36       	cpi	r24, 0x6C	; 108
    1418:	11 f4       	brne	.+4      	; 0x141e <vfprintf+0xd8>
    141a:	10 68       	ori	r17, 0x80	; 128
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <vfprintf+0xdc>
    141e:	88 36       	cpi	r24, 0x68	; 104
    1420:	59 f4       	brne	.+22     	; 0x1438 <vfprintf+0xf2>
    1422:	ec 85       	ldd	r30, Y+12	; 0x0c
    1424:	fd 85       	ldd	r31, Y+13	; 0x0d
    1426:	93 fd       	sbrc	r25, 3
    1428:	85 91       	lpm	r24, Z+
    142a:	93 ff       	sbrs	r25, 3
    142c:	81 91       	ld	r24, Z+
    142e:	fd 87       	std	Y+13, r31	; 0x0d
    1430:	ec 87       	std	Y+12, r30	; 0x0c
    1432:	88 23       	and	r24, r24
    1434:	09 f0       	breq	.+2      	; 0x1438 <vfprintf+0xf2>
    1436:	b8 cf       	rjmp	.-144    	; 0x13a8 <vfprintf+0x62>
    1438:	98 2f       	mov	r25, r24
    143a:	95 54       	subi	r25, 0x45	; 69
    143c:	93 30       	cpi	r25, 0x03	; 3
    143e:	18 f0       	brcs	.+6      	; 0x1446 <vfprintf+0x100>
    1440:	90 52       	subi	r25, 0x20	; 32
    1442:	93 30       	cpi	r25, 0x03	; 3
    1444:	38 f4       	brcc	.+14     	; 0x1454 <vfprintf+0x10e>
    1446:	24 e0       	ldi	r18, 0x04	; 4
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	a2 0e       	add	r10, r18
    144c:	b3 1e       	adc	r11, r19
    144e:	3f e3       	ldi	r19, 0x3F	; 63
    1450:	39 83       	std	Y+1, r19	; 0x01
    1452:	0f c0       	rjmp	.+30     	; 0x1472 <vfprintf+0x12c>
    1454:	83 36       	cpi	r24, 0x63	; 99
    1456:	31 f0       	breq	.+12     	; 0x1464 <vfprintf+0x11e>
    1458:	83 37       	cpi	r24, 0x73	; 115
    145a:	81 f0       	breq	.+32     	; 0x147c <vfprintf+0x136>
    145c:	83 35       	cpi	r24, 0x53	; 83
    145e:	09 f0       	breq	.+2      	; 0x1462 <vfprintf+0x11c>
    1460:	56 c0       	rjmp	.+172    	; 0x150e <vfprintf+0x1c8>
    1462:	21 c0       	rjmp	.+66     	; 0x14a6 <vfprintf+0x160>
    1464:	f5 01       	movw	r30, r10
    1466:	80 81       	ld	r24, Z
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	22 e0       	ldi	r18, 0x02	; 2
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	a2 0e       	add	r10, r18
    1470:	b3 1e       	adc	r11, r19
    1472:	21 e0       	ldi	r18, 0x01	; 1
    1474:	c2 2e       	mov	r12, r18
    1476:	d1 2c       	mov	r13, r1
    1478:	42 01       	movw	r8, r4
    147a:	13 c0       	rjmp	.+38     	; 0x14a2 <vfprintf+0x15c>
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	29 2e       	mov	r2, r25
    1480:	31 2c       	mov	r3, r1
    1482:	2a 0c       	add	r2, r10
    1484:	3b 1c       	adc	r3, r11
    1486:	f5 01       	movw	r30, r10
    1488:	80 80       	ld	r8, Z
    148a:	91 80       	ldd	r9, Z+1	; 0x01
    148c:	16 ff       	sbrs	r17, 6
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <vfprintf+0x150>
    1490:	6f 2d       	mov	r22, r15
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	02 c0       	rjmp	.+4      	; 0x149a <vfprintf+0x154>
    1496:	6f ef       	ldi	r22, 0xFF	; 255
    1498:	7f ef       	ldi	r23, 0xFF	; 255
    149a:	c4 01       	movw	r24, r8
    149c:	2e d1       	rcall	.+604    	; 0x16fa <strnlen>
    149e:	6c 01       	movw	r12, r24
    14a0:	51 01       	movw	r10, r2
    14a2:	1f 77       	andi	r17, 0x7F	; 127
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <vfprintf+0x188>
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	28 2e       	mov	r2, r24
    14aa:	31 2c       	mov	r3, r1
    14ac:	2a 0c       	add	r2, r10
    14ae:	3b 1c       	adc	r3, r11
    14b0:	f5 01       	movw	r30, r10
    14b2:	80 80       	ld	r8, Z
    14b4:	91 80       	ldd	r9, Z+1	; 0x01
    14b6:	16 ff       	sbrs	r17, 6
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <vfprintf+0x17a>
    14ba:	6f 2d       	mov	r22, r15
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x17e>
    14c0:	6f ef       	ldi	r22, 0xFF	; 255
    14c2:	7f ef       	ldi	r23, 0xFF	; 255
    14c4:	c4 01       	movw	r24, r8
    14c6:	0e d1       	rcall	.+540    	; 0x16e4 <strnlen_P>
    14c8:	6c 01       	movw	r12, r24
    14ca:	10 68       	ori	r17, 0x80	; 128
    14cc:	51 01       	movw	r10, r2
    14ce:	13 fd       	sbrc	r17, 3
    14d0:	1a c0       	rjmp	.+52     	; 0x1506 <vfprintf+0x1c0>
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <vfprintf+0x198>
    14d4:	80 e2       	ldi	r24, 0x20	; 32
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	b3 01       	movw	r22, r6
    14da:	1a d1       	rcall	.+564    	; 0x1710 <fputc>
    14dc:	ea 94       	dec	r14
    14de:	8e 2d       	mov	r24, r14
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	c8 16       	cp	r12, r24
    14e4:	d9 06       	cpc	r13, r25
    14e6:	b0 f3       	brcs	.-20     	; 0x14d4 <vfprintf+0x18e>
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <vfprintf+0x1c0>
    14ea:	f4 01       	movw	r30, r8
    14ec:	17 fd       	sbrc	r17, 7
    14ee:	85 91       	lpm	r24, Z+
    14f0:	17 ff       	sbrs	r17, 7
    14f2:	81 91       	ld	r24, Z+
    14f4:	4f 01       	movw	r8, r30
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	b3 01       	movw	r22, r6
    14fa:	0a d1       	rcall	.+532    	; 0x1710 <fputc>
    14fc:	e1 10       	cpse	r14, r1
    14fe:	ea 94       	dec	r14
    1500:	08 94       	sec
    1502:	c1 08       	sbc	r12, r1
    1504:	d1 08       	sbc	r13, r1
    1506:	c1 14       	cp	r12, r1
    1508:	d1 04       	cpc	r13, r1
    150a:	79 f7       	brne	.-34     	; 0x14ea <vfprintf+0x1a4>
    150c:	df c0       	rjmp	.+446    	; 0x16cc <vfprintf+0x386>
    150e:	84 36       	cpi	r24, 0x64	; 100
    1510:	11 f0       	breq	.+4      	; 0x1516 <vfprintf+0x1d0>
    1512:	89 36       	cpi	r24, 0x69	; 105
    1514:	49 f5       	brne	.+82     	; 0x1568 <vfprintf+0x222>
    1516:	f5 01       	movw	r30, r10
    1518:	17 ff       	sbrs	r17, 7
    151a:	07 c0       	rjmp	.+14     	; 0x152a <vfprintf+0x1e4>
    151c:	80 81       	ld	r24, Z
    151e:	91 81       	ldd	r25, Z+1	; 0x01
    1520:	a2 81       	ldd	r26, Z+2	; 0x02
    1522:	b3 81       	ldd	r27, Z+3	; 0x03
    1524:	24 e0       	ldi	r18, 0x04	; 4
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	08 c0       	rjmp	.+16     	; 0x153a <vfprintf+0x1f4>
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	aa 27       	eor	r26, r26
    1530:	97 fd       	sbrc	r25, 7
    1532:	a0 95       	com	r26
    1534:	ba 2f       	mov	r27, r26
    1536:	22 e0       	ldi	r18, 0x02	; 2
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	a2 0e       	add	r10, r18
    153c:	b3 1e       	adc	r11, r19
    153e:	01 2f       	mov	r16, r17
    1540:	0f 76       	andi	r16, 0x6F	; 111
    1542:	b7 ff       	sbrs	r27, 7
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <vfprintf+0x210>
    1546:	b0 95       	com	r27
    1548:	a0 95       	com	r26
    154a:	90 95       	com	r25
    154c:	81 95       	neg	r24
    154e:	9f 4f       	sbci	r25, 0xFF	; 255
    1550:	af 4f       	sbci	r26, 0xFF	; 255
    1552:	bf 4f       	sbci	r27, 0xFF	; 255
    1554:	00 68       	ori	r16, 0x80	; 128
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	a2 01       	movw	r20, r4
    155c:	2a e0       	ldi	r18, 0x0A	; 10
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	03 d1       	rcall	.+518    	; 0x1768 <__ultoa_invert>
    1562:	d8 2e       	mov	r13, r24
    1564:	d4 18       	sub	r13, r4
    1566:	3e c0       	rjmp	.+124    	; 0x15e4 <vfprintf+0x29e>
    1568:	85 37       	cpi	r24, 0x75	; 117
    156a:	21 f4       	brne	.+8      	; 0x1574 <vfprintf+0x22e>
    156c:	1f 7e       	andi	r17, 0xEF	; 239
    156e:	2a e0       	ldi	r18, 0x0A	; 10
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	20 c0       	rjmp	.+64     	; 0x15b4 <vfprintf+0x26e>
    1574:	19 7f       	andi	r17, 0xF9	; 249
    1576:	8f 36       	cpi	r24, 0x6F	; 111
    1578:	a9 f0       	breq	.+42     	; 0x15a4 <vfprintf+0x25e>
    157a:	80 37       	cpi	r24, 0x70	; 112
    157c:	20 f4       	brcc	.+8      	; 0x1586 <vfprintf+0x240>
    157e:	88 35       	cpi	r24, 0x58	; 88
    1580:	09 f0       	breq	.+2      	; 0x1584 <vfprintf+0x23e>
    1582:	a7 c0       	rjmp	.+334    	; 0x16d2 <vfprintf+0x38c>
    1584:	0b c0       	rjmp	.+22     	; 0x159c <vfprintf+0x256>
    1586:	80 37       	cpi	r24, 0x70	; 112
    1588:	21 f0       	breq	.+8      	; 0x1592 <vfprintf+0x24c>
    158a:	88 37       	cpi	r24, 0x78	; 120
    158c:	09 f0       	breq	.+2      	; 0x1590 <vfprintf+0x24a>
    158e:	a1 c0       	rjmp	.+322    	; 0x16d2 <vfprintf+0x38c>
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <vfprintf+0x24e>
    1592:	10 61       	ori	r17, 0x10	; 16
    1594:	14 ff       	sbrs	r17, 4
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <vfprintf+0x264>
    1598:	14 60       	ori	r17, 0x04	; 4
    159a:	07 c0       	rjmp	.+14     	; 0x15aa <vfprintf+0x264>
    159c:	14 ff       	sbrs	r17, 4
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <vfprintf+0x26a>
    15a0:	16 60       	ori	r17, 0x06	; 6
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <vfprintf+0x26a>
    15a4:	28 e0       	ldi	r18, 0x08	; 8
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <vfprintf+0x26e>
    15aa:	20 e1       	ldi	r18, 0x10	; 16
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <vfprintf+0x26e>
    15b0:	20 e1       	ldi	r18, 0x10	; 16
    15b2:	32 e0       	ldi	r19, 0x02	; 2
    15b4:	f5 01       	movw	r30, r10
    15b6:	17 ff       	sbrs	r17, 7
    15b8:	07 c0       	rjmp	.+14     	; 0x15c8 <vfprintf+0x282>
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	44 e0       	ldi	r20, 0x04	; 4
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <vfprintf+0x28e>
    15c8:	60 81       	ld	r22, Z
    15ca:	71 81       	ldd	r23, Z+1	; 0x01
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	42 e0       	ldi	r20, 0x02	; 2
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	a4 0e       	add	r10, r20
    15d6:	b5 1e       	adc	r11, r21
    15d8:	a2 01       	movw	r20, r4
    15da:	c6 d0       	rcall	.+396    	; 0x1768 <__ultoa_invert>
    15dc:	d8 2e       	mov	r13, r24
    15de:	d4 18       	sub	r13, r4
    15e0:	01 2f       	mov	r16, r17
    15e2:	0f 77       	andi	r16, 0x7F	; 127
    15e4:	06 ff       	sbrs	r16, 6
    15e6:	09 c0       	rjmp	.+18     	; 0x15fa <vfprintf+0x2b4>
    15e8:	0e 7f       	andi	r16, 0xFE	; 254
    15ea:	df 14       	cp	r13, r15
    15ec:	30 f4       	brcc	.+12     	; 0x15fa <vfprintf+0x2b4>
    15ee:	04 ff       	sbrs	r16, 4
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <vfprintf+0x2b8>
    15f2:	02 fd       	sbrc	r16, 2
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <vfprintf+0x2b8>
    15f6:	0f 7e       	andi	r16, 0xEF	; 239
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <vfprintf+0x2b8>
    15fa:	1d 2d       	mov	r17, r13
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <vfprintf+0x2ba>
    15fe:	1f 2d       	mov	r17, r15
    1600:	80 2f       	mov	r24, r16
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	04 ff       	sbrs	r16, 4
    1606:	0c c0       	rjmp	.+24     	; 0x1620 <vfprintf+0x2da>
    1608:	fe 01       	movw	r30, r28
    160a:	ed 0d       	add	r30, r13
    160c:	f1 1d       	adc	r31, r1
    160e:	20 81       	ld	r18, Z
    1610:	20 33       	cpi	r18, 0x30	; 48
    1612:	11 f4       	brne	.+4      	; 0x1618 <vfprintf+0x2d2>
    1614:	09 7e       	andi	r16, 0xE9	; 233
    1616:	09 c0       	rjmp	.+18     	; 0x162a <vfprintf+0x2e4>
    1618:	02 ff       	sbrs	r16, 2
    161a:	06 c0       	rjmp	.+12     	; 0x1628 <vfprintf+0x2e2>
    161c:	1e 5f       	subi	r17, 0xFE	; 254
    161e:	05 c0       	rjmp	.+10     	; 0x162a <vfprintf+0x2e4>
    1620:	86 78       	andi	r24, 0x86	; 134
    1622:	90 70       	andi	r25, 0x00	; 0
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	09 f0       	breq	.+2      	; 0x162a <vfprintf+0x2e4>
    1628:	1f 5f       	subi	r17, 0xFF	; 255
    162a:	80 2e       	mov	r8, r16
    162c:	99 24       	eor	r9, r9
    162e:	03 fd       	sbrc	r16, 3
    1630:	11 c0       	rjmp	.+34     	; 0x1654 <vfprintf+0x30e>
    1632:	00 ff       	sbrs	r16, 0
    1634:	0c c0       	rjmp	.+24     	; 0x164e <vfprintf+0x308>
    1636:	fd 2c       	mov	r15, r13
    1638:	1e 15       	cp	r17, r14
    163a:	48 f4       	brcc	.+18     	; 0x164e <vfprintf+0x308>
    163c:	fe 0c       	add	r15, r14
    163e:	f1 1a       	sub	r15, r17
    1640:	1e 2d       	mov	r17, r14
    1642:	05 c0       	rjmp	.+10     	; 0x164e <vfprintf+0x308>
    1644:	80 e2       	ldi	r24, 0x20	; 32
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	b3 01       	movw	r22, r6
    164a:	62 d0       	rcall	.+196    	; 0x1710 <fputc>
    164c:	1f 5f       	subi	r17, 0xFF	; 255
    164e:	1e 15       	cp	r17, r14
    1650:	c8 f3       	brcs	.-14     	; 0x1644 <vfprintf+0x2fe>
    1652:	04 c0       	rjmp	.+8      	; 0x165c <vfprintf+0x316>
    1654:	1e 15       	cp	r17, r14
    1656:	10 f4       	brcc	.+4      	; 0x165c <vfprintf+0x316>
    1658:	e1 1a       	sub	r14, r17
    165a:	01 c0       	rjmp	.+2      	; 0x165e <vfprintf+0x318>
    165c:	ee 24       	eor	r14, r14
    165e:	84 fe       	sbrs	r8, 4
    1660:	0e c0       	rjmp	.+28     	; 0x167e <vfprintf+0x338>
    1662:	80 e3       	ldi	r24, 0x30	; 48
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	b3 01       	movw	r22, r6
    1668:	53 d0       	rcall	.+166    	; 0x1710 <fputc>
    166a:	82 fe       	sbrs	r8, 2
    166c:	1d c0       	rjmp	.+58     	; 0x16a8 <vfprintf+0x362>
    166e:	81 fe       	sbrs	r8, 1
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <vfprintf+0x332>
    1672:	88 e5       	ldi	r24, 0x58	; 88
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	10 c0       	rjmp	.+32     	; 0x1698 <vfprintf+0x352>
    1678:	88 e7       	ldi	r24, 0x78	; 120
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0d c0       	rjmp	.+26     	; 0x1698 <vfprintf+0x352>
    167e:	c4 01       	movw	r24, r8
    1680:	86 78       	andi	r24, 0x86	; 134
    1682:	90 70       	andi	r25, 0x00	; 0
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	81 f0       	breq	.+32     	; 0x16a8 <vfprintf+0x362>
    1688:	81 fc       	sbrc	r8, 1
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <vfprintf+0x34a>
    168c:	80 e2       	ldi	r24, 0x20	; 32
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <vfprintf+0x34c>
    1690:	8b e2       	ldi	r24, 0x2B	; 43
    1692:	07 fd       	sbrc	r16, 7
    1694:	8d e2       	ldi	r24, 0x2D	; 45
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	b3 01       	movw	r22, r6
    169a:	3a d0       	rcall	.+116    	; 0x1710 <fputc>
    169c:	05 c0       	rjmp	.+10     	; 0x16a8 <vfprintf+0x362>
    169e:	80 e3       	ldi	r24, 0x30	; 48
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	b3 01       	movw	r22, r6
    16a4:	35 d0       	rcall	.+106    	; 0x1710 <fputc>
    16a6:	fa 94       	dec	r15
    16a8:	df 14       	cp	r13, r15
    16aa:	c8 f3       	brcs	.-14     	; 0x169e <vfprintf+0x358>
    16ac:	da 94       	dec	r13
    16ae:	f2 01       	movw	r30, r4
    16b0:	ed 0d       	add	r30, r13
    16b2:	f1 1d       	adc	r31, r1
    16b4:	80 81       	ld	r24, Z
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	b3 01       	movw	r22, r6
    16ba:	2a d0       	rcall	.+84     	; 0x1710 <fputc>
    16bc:	dd 20       	and	r13, r13
    16be:	b1 f7       	brne	.-20     	; 0x16ac <vfprintf+0x366>
    16c0:	05 c0       	rjmp	.+10     	; 0x16cc <vfprintf+0x386>
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	b3 01       	movw	r22, r6
    16c8:	23 d0       	rcall	.+70     	; 0x1710 <fputc>
    16ca:	ea 94       	dec	r14
    16cc:	ee 20       	and	r14, r14
    16ce:	c9 f7       	brne	.-14     	; 0x16c2 <vfprintf+0x37c>
    16d0:	4d ce       	rjmp	.-870    	; 0x136c <vfprintf+0x26>
    16d2:	f3 01       	movw	r30, r6
    16d4:	86 81       	ldd	r24, Z+6	; 0x06
    16d6:	97 81       	ldd	r25, Z+7	; 0x07
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <vfprintf+0x398>
    16da:	8f ef       	ldi	r24, 0xFF	; 255
    16dc:	9f ef       	ldi	r25, 0xFF	; 255
    16de:	2d 96       	adiw	r28, 0x0d	; 13
    16e0:	e2 e1       	ldi	r30, 0x12	; 18
    16e2:	bc c0       	rjmp	.+376    	; 0x185c <__epilogue_restores__>

000016e4 <strnlen_P>:
    16e4:	fc 01       	movw	r30, r24
    16e6:	05 90       	lpm	r0, Z+
    16e8:	61 50       	subi	r22, 0x01	; 1
    16ea:	70 40       	sbci	r23, 0x00	; 0
    16ec:	01 10       	cpse	r0, r1
    16ee:	d8 f7       	brcc	.-10     	; 0x16e6 <strnlen_P+0x2>
    16f0:	80 95       	com	r24
    16f2:	90 95       	com	r25
    16f4:	8e 0f       	add	r24, r30
    16f6:	9f 1f       	adc	r25, r31
    16f8:	08 95       	ret

000016fa <strnlen>:
    16fa:	fc 01       	movw	r30, r24
    16fc:	61 50       	subi	r22, 0x01	; 1
    16fe:	70 40       	sbci	r23, 0x00	; 0
    1700:	01 90       	ld	r0, Z+
    1702:	01 10       	cpse	r0, r1
    1704:	d8 f7       	brcc	.-10     	; 0x16fc <strnlen+0x2>
    1706:	80 95       	com	r24
    1708:	90 95       	com	r25
    170a:	8e 0f       	add	r24, r30
    170c:	9f 1f       	adc	r25, r31
    170e:	08 95       	ret

00001710 <fputc>:
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	8c 01       	movw	r16, r24
    171a:	eb 01       	movw	r28, r22
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	81 ff       	sbrs	r24, 1
    1720:	1b c0       	rjmp	.+54     	; 0x1758 <fputc+0x48>
    1722:	82 ff       	sbrs	r24, 2
    1724:	0d c0       	rjmp	.+26     	; 0x1740 <fputc+0x30>
    1726:	2e 81       	ldd	r18, Y+6	; 0x06
    1728:	3f 81       	ldd	r19, Y+7	; 0x07
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	28 17       	cp	r18, r24
    1730:	39 07       	cpc	r19, r25
    1732:	64 f4       	brge	.+24     	; 0x174c <fputc+0x3c>
    1734:	e8 81       	ld	r30, Y
    1736:	f9 81       	ldd	r31, Y+1	; 0x01
    1738:	01 93       	st	Z+, r16
    173a:	f9 83       	std	Y+1, r31	; 0x01
    173c:	e8 83       	st	Y, r30
    173e:	06 c0       	rjmp	.+12     	; 0x174c <fputc+0x3c>
    1740:	e8 85       	ldd	r30, Y+8	; 0x08
    1742:	f9 85       	ldd	r31, Y+9	; 0x09
    1744:	80 2f       	mov	r24, r16
    1746:	09 95       	icall
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	31 f4       	brne	.+12     	; 0x1758 <fputc+0x48>
    174c:	8e 81       	ldd	r24, Y+6	; 0x06
    174e:	9f 81       	ldd	r25, Y+7	; 0x07
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	9f 83       	std	Y+7, r25	; 0x07
    1754:	8e 83       	std	Y+6, r24	; 0x06
    1756:	02 c0       	rjmp	.+4      	; 0x175c <fputc+0x4c>
    1758:	0f ef       	ldi	r16, 0xFF	; 255
    175a:	1f ef       	ldi	r17, 0xFF	; 255
    175c:	c8 01       	movw	r24, r16
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	08 95       	ret

00001768 <__ultoa_invert>:
    1768:	fa 01       	movw	r30, r20
    176a:	aa 27       	eor	r26, r26
    176c:	28 30       	cpi	r18, 0x08	; 8
    176e:	51 f1       	breq	.+84     	; 0x17c4 <__ultoa_invert+0x5c>
    1770:	20 31       	cpi	r18, 0x10	; 16
    1772:	81 f1       	breq	.+96     	; 0x17d4 <__ultoa_invert+0x6c>
    1774:	e8 94       	clt
    1776:	6f 93       	push	r22
    1778:	6e 7f       	andi	r22, 0xFE	; 254
    177a:	6e 5f       	subi	r22, 0xFE	; 254
    177c:	7f 4f       	sbci	r23, 0xFF	; 255
    177e:	8f 4f       	sbci	r24, 0xFF	; 255
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	af 4f       	sbci	r26, 0xFF	; 255
    1784:	b1 e0       	ldi	r27, 0x01	; 1
    1786:	3e d0       	rcall	.+124    	; 0x1804 <__ultoa_invert+0x9c>
    1788:	b4 e0       	ldi	r27, 0x04	; 4
    178a:	3c d0       	rcall	.+120    	; 0x1804 <__ultoa_invert+0x9c>
    178c:	67 0f       	add	r22, r23
    178e:	78 1f       	adc	r23, r24
    1790:	89 1f       	adc	r24, r25
    1792:	9a 1f       	adc	r25, r26
    1794:	a1 1d       	adc	r26, r1
    1796:	68 0f       	add	r22, r24
    1798:	79 1f       	adc	r23, r25
    179a:	8a 1f       	adc	r24, r26
    179c:	91 1d       	adc	r25, r1
    179e:	a1 1d       	adc	r26, r1
    17a0:	6a 0f       	add	r22, r26
    17a2:	71 1d       	adc	r23, r1
    17a4:	81 1d       	adc	r24, r1
    17a6:	91 1d       	adc	r25, r1
    17a8:	a1 1d       	adc	r26, r1
    17aa:	20 d0       	rcall	.+64     	; 0x17ec <__ultoa_invert+0x84>
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <__ultoa_invert+0x48>
    17ae:	68 94       	set
    17b0:	3f 91       	pop	r19
    17b2:	2a e0       	ldi	r18, 0x0A	; 10
    17b4:	26 9f       	mul	r18, r22
    17b6:	11 24       	eor	r1, r1
    17b8:	30 19       	sub	r19, r0
    17ba:	30 5d       	subi	r19, 0xD0	; 208
    17bc:	31 93       	st	Z+, r19
    17be:	de f6       	brtc	.-74     	; 0x1776 <__ultoa_invert+0xe>
    17c0:	cf 01       	movw	r24, r30
    17c2:	08 95       	ret
    17c4:	46 2f       	mov	r20, r22
    17c6:	47 70       	andi	r20, 0x07	; 7
    17c8:	40 5d       	subi	r20, 0xD0	; 208
    17ca:	41 93       	st	Z+, r20
    17cc:	b3 e0       	ldi	r27, 0x03	; 3
    17ce:	0f d0       	rcall	.+30     	; 0x17ee <__ultoa_invert+0x86>
    17d0:	c9 f7       	brne	.-14     	; 0x17c4 <__ultoa_invert+0x5c>
    17d2:	f6 cf       	rjmp	.-20     	; 0x17c0 <__ultoa_invert+0x58>
    17d4:	46 2f       	mov	r20, r22
    17d6:	4f 70       	andi	r20, 0x0F	; 15
    17d8:	40 5d       	subi	r20, 0xD0	; 208
    17da:	4a 33       	cpi	r20, 0x3A	; 58
    17dc:	18 f0       	brcs	.+6      	; 0x17e4 <__ultoa_invert+0x7c>
    17de:	49 5d       	subi	r20, 0xD9	; 217
    17e0:	31 fd       	sbrc	r19, 1
    17e2:	40 52       	subi	r20, 0x20	; 32
    17e4:	41 93       	st	Z+, r20
    17e6:	02 d0       	rcall	.+4      	; 0x17ec <__ultoa_invert+0x84>
    17e8:	a9 f7       	brne	.-22     	; 0x17d4 <__ultoa_invert+0x6c>
    17ea:	ea cf       	rjmp	.-44     	; 0x17c0 <__ultoa_invert+0x58>
    17ec:	b4 e0       	ldi	r27, 0x04	; 4
    17ee:	a6 95       	lsr	r26
    17f0:	97 95       	ror	r25
    17f2:	87 95       	ror	r24
    17f4:	77 95       	ror	r23
    17f6:	67 95       	ror	r22
    17f8:	ba 95       	dec	r27
    17fa:	c9 f7       	brne	.-14     	; 0x17ee <__ultoa_invert+0x86>
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	61 05       	cpc	r22, r1
    1800:	71 05       	cpc	r23, r1
    1802:	08 95       	ret
    1804:	9b 01       	movw	r18, r22
    1806:	ac 01       	movw	r20, r24
    1808:	0a 2e       	mov	r0, r26
    180a:	06 94       	lsr	r0
    180c:	57 95       	ror	r21
    180e:	47 95       	ror	r20
    1810:	37 95       	ror	r19
    1812:	27 95       	ror	r18
    1814:	ba 95       	dec	r27
    1816:	c9 f7       	brne	.-14     	; 0x180a <__ultoa_invert+0xa2>
    1818:	62 0f       	add	r22, r18
    181a:	73 1f       	adc	r23, r19
    181c:	84 1f       	adc	r24, r20
    181e:	95 1f       	adc	r25, r21
    1820:	a0 1d       	adc	r26, r0
    1822:	08 95       	ret

00001824 <__prologue_saves__>:
    1824:	2f 92       	push	r2
    1826:	3f 92       	push	r3
    1828:	4f 92       	push	r4
    182a:	5f 92       	push	r5
    182c:	6f 92       	push	r6
    182e:	7f 92       	push	r7
    1830:	8f 92       	push	r8
    1832:	9f 92       	push	r9
    1834:	af 92       	push	r10
    1836:	bf 92       	push	r11
    1838:	cf 92       	push	r12
    183a:	df 92       	push	r13
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	ca 1b       	sub	r28, r26
    184e:	db 0b       	sbc	r29, r27
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	09 94       	ijmp

0000185c <__epilogue_restores__>:
    185c:	2a 88       	ldd	r2, Y+18	; 0x12
    185e:	39 88       	ldd	r3, Y+17	; 0x11
    1860:	48 88       	ldd	r4, Y+16	; 0x10
    1862:	5f 84       	ldd	r5, Y+15	; 0x0f
    1864:	6e 84       	ldd	r6, Y+14	; 0x0e
    1866:	7d 84       	ldd	r7, Y+13	; 0x0d
    1868:	8c 84       	ldd	r8, Y+12	; 0x0c
    186a:	9b 84       	ldd	r9, Y+11	; 0x0b
    186c:	aa 84       	ldd	r10, Y+10	; 0x0a
    186e:	b9 84       	ldd	r11, Y+9	; 0x09
    1870:	c8 84       	ldd	r12, Y+8	; 0x08
    1872:	df 80       	ldd	r13, Y+7	; 0x07
    1874:	ee 80       	ldd	r14, Y+6	; 0x06
    1876:	fd 80       	ldd	r15, Y+5	; 0x05
    1878:	0c 81       	ldd	r16, Y+4	; 0x04
    187a:	1b 81       	ldd	r17, Y+3	; 0x03
    187c:	aa 81       	ldd	r26, Y+2	; 0x02
    187e:	b9 81       	ldd	r27, Y+1	; 0x01
    1880:	ce 0f       	add	r28, r30
    1882:	d1 1d       	adc	r29, r1
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	ed 01       	movw	r28, r26
    1890:	08 95       	ret

00001892 <_exit>:
    1892:	f8 94       	cli

00001894 <__stop_program>:
    1894:	ff cf       	rjmp	.-2      	; 0x1894 <__stop_program>
